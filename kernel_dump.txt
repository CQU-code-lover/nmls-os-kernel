
kernel：     文件格式 elf32-i386


Disassembly of section .init.text:

00100000 <start-0xc>:
  100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fb                   	sti    
  100009:	4f                   	dec    %edi
  10000a:	52                   	push   %edx
  10000b:	e4                   	.byte 0xe4

0010000c <start>:
  10000c:	fa                   	cli    
  10000d:	89 1d 00 14 10 00    	mov    %ebx,0x101400
  100013:	bc ff 03 00 00       	mov    $0x3ff,%esp
  100018:	83 e4 f0             	and    $0xfffffff0,%esp
  10001b:	bd 00 00 00 00       	mov    $0x0,%ebp
  100020:	e8 00 00 00 00       	call   100025 <kern_entry>

00100025 <kern_entry>:
  100025:	55                   	push   %ebp
  100026:	89 e5                	mov    %esp,%ebp
  100028:	53                   	push   %ebx
  100029:	83 ec 14             	sub    $0x14,%esp
  10002c:	e8 cf 3f 00 c0       	call   c0104000 <__x86.get_pc_thunk.ax>
  100031:	05 cf 4f 00 c0       	add    $0xc0004fcf,%eax
  100036:	8b 90 08 c4 ff 3f    	mov    0x3fffc408(%eax),%edx
  10003c:	89 d1                	mov    %edx,%ecx
  10003e:	8b 90 04 c4 ff 3f    	mov    0x3fffc404(%eax),%edx
  100044:	83 c9 03             	or     $0x3,%ecx
  100047:	89 0a                	mov    %ecx,(%edx)
  100049:	8b 90 0c c4 ff 3f    	mov    0x3fffc40c(%eax),%edx
  10004f:	89 d1                	mov    %edx,%ecx
  100051:	8b 90 04 c4 ff 3f    	mov    0x3fffc404(%eax),%edx
  100057:	81 c2 00 0c 00 00    	add    $0xc00,%edx
  10005d:	83 c9 03             	or     $0x3,%ecx
  100060:	89 0a                	mov    %ecx,(%edx)
  100062:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100069:	eb 21                	jmp    10008c <kern_entry+0x67>
  10006b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10006e:	c1 e2 0c             	shl    $0xc,%edx
  100071:	89 d3                	mov    %edx,%ebx
  100073:	83 cb 03             	or     $0x3,%ebx
  100076:	8b 90 08 c4 ff 3f    	mov    0x3fffc408(%eax),%edx
  10007c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  10007f:	c1 e1 02             	shl    $0x2,%ecx
  100082:	01 ca                	add    %ecx,%edx
  100084:	89 d9                	mov    %ebx,%ecx
  100086:	89 0a                	mov    %ecx,(%edx)
  100088:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  10008c:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  100093:	7e d6                	jle    10006b <kern_entry+0x46>
  100095:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10009c:	eb 21                	jmp    1000bf <kern_entry+0x9a>
  10009e:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1000a1:	c1 e2 0c             	shl    $0xc,%edx
  1000a4:	89 d3                	mov    %edx,%ebx
  1000a6:	83 cb 03             	or     $0x3,%ebx
  1000a9:	8b 90 0c c4 ff 3f    	mov    0x3fffc40c(%eax),%edx
  1000af:	8b 4d f4             	mov    -0xc(%ebp),%ecx
  1000b2:	c1 e1 02             	shl    $0x2,%ecx
  1000b5:	01 ca                	add    %ecx,%edx
  1000b7:	89 d9                	mov    %ebx,%ecx
  1000b9:	89 0a                	mov    %ecx,(%edx)
  1000bb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  1000bf:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  1000c6:	7e d6                	jle    10009e <kern_entry+0x79>
  1000c8:	8b 90 04 c4 ff 3f    	mov    0x3fffc404(%eax),%edx
  1000ce:	0f 22 da             	mov    %edx,%cr3
  1000d1:	0f 20 c2             	mov    %cr0,%edx
  1000d4:	89 55 f0             	mov    %edx,-0x10(%ebp)
  1000d7:	81 4d f0 00 00 00 80 	orl    $0x80000000,-0x10(%ebp)
  1000de:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1000e1:	0f 22 c2             	mov    %edx,%cr0
  1000e4:	c7 c2 a0 6c 18 c0    	mov    $0xc0186ca0,%edx
  1000ea:	81 c2 00 20 00 00    	add    $0x2000,%edx
  1000f0:	83 e2 f0             	and    $0xfffffff0,%edx
  1000f3:	89 55 ec             	mov    %edx,-0x14(%ebp)
  1000f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1000f9:	89 d4                	mov    %edx,%esp
  1000fb:	31 ed                	xor    %ebp,%ebp
  1000fd:	c7 c2 00 14 10 00    	mov    $0x101400,%edx
  100103:	8b 12                	mov    (%edx),%edx
  100105:	c7 c0 80 6c 18 c0    	mov    $0xc0186c80,%eax
  10010b:	89 10                	mov    %edx,(%eax)
  10010d:	e8 ab 35 00 c0       	call   c01036bd <kern_init>
  100112:	90                   	nop
  100113:	83 c4 14             	add    $0x14,%esp
  100116:	5b                   	pop    %ebx
  100117:	5d                   	pop    %ebp
  100118:	c3                   	ret    
  100119:	66 90                	xchg   %ax,%ax
  10011b:	66 90                	xchg   %ax,%ax
  10011d:	66 90                	xchg   %ax,%ax
  10011f:	66 90                	xchg   %ax,%ax
  100121:	66 90                	xchg   %ax,%ax
  100123:	66 90                	xchg   %ax,%ax
  100125:	66 90                	xchg   %ax,%ax
  100127:	66 90                	xchg   %ax,%ax
  100129:	66 90                	xchg   %ax,%ax
  10012b:	66 90                	xchg   %ax,%ax
  10012d:	66 90                	xchg   %ax,%ax
  10012f:	66 90                	xchg   %ax,%ax
  100131:	66 90                	xchg   %ax,%ax
  100133:	66 90                	xchg   %ax,%ax
  100135:	66 90                	xchg   %ax,%ax
  100137:	66 90                	xchg   %ax,%ax
  100139:	66 90                	xchg   %ax,%ax
  10013b:	66 90                	xchg   %ax,%ax
  10013d:	66 90                	xchg   %ax,%ax
  10013f:	66 90                	xchg   %ax,%ax
  100141:	66 90                	xchg   %ax,%ax
  100143:	66 90                	xchg   %ax,%ax
  100145:	66 90                	xchg   %ax,%ax
  100147:	66 90                	xchg   %ax,%ax
  100149:	66 90                	xchg   %ax,%ax
  10014b:	66 90                	xchg   %ax,%ax
  10014d:	66 90                	xchg   %ax,%ax
  10014f:	66 90                	xchg   %ax,%ax
  100151:	66 90                	xchg   %ax,%ax
  100153:	66 90                	xchg   %ax,%ax
  100155:	66 90                	xchg   %ax,%ax
  100157:	66 90                	xchg   %ax,%ax
  100159:	66 90                	xchg   %ax,%ax
  10015b:	66 90                	xchg   %ax,%ax
  10015d:	66 90                	xchg   %ax,%ax
  10015f:	66 90                	xchg   %ax,%ax
  100161:	66 90                	xchg   %ax,%ax
  100163:	66 90                	xchg   %ax,%ax
  100165:	66 90                	xchg   %ax,%ax
  100167:	66 90                	xchg   %ax,%ax
  100169:	66 90                	xchg   %ax,%ax
  10016b:	66 90                	xchg   %ax,%ax
  10016d:	66 90                	xchg   %ax,%ax
  10016f:	66 90                	xchg   %ax,%ax
  100171:	66 90                	xchg   %ax,%ax
  100173:	66 90                	xchg   %ax,%ax
  100175:	66 90                	xchg   %ax,%ax
  100177:	66 90                	xchg   %ax,%ax
  100179:	66 90                	xchg   %ax,%ax
  10017b:	66 90                	xchg   %ax,%ax
  10017d:	66 90                	xchg   %ax,%ax
  10017f:	66 90                	xchg   %ax,%ax
  100181:	66 90                	xchg   %ax,%ax
  100183:	66 90                	xchg   %ax,%ax
  100185:	66 90                	xchg   %ax,%ax
  100187:	66 90                	xchg   %ax,%ax
  100189:	66 90                	xchg   %ax,%ax
  10018b:	66 90                	xchg   %ax,%ax
  10018d:	66 90                	xchg   %ax,%ax
  10018f:	66 90                	xchg   %ax,%ax
  100191:	66 90                	xchg   %ax,%ax
  100193:	66 90                	xchg   %ax,%ax
  100195:	66 90                	xchg   %ax,%ax
  100197:	66 90                	xchg   %ax,%ax
  100199:	66 90                	xchg   %ax,%ax
  10019b:	66 90                	xchg   %ax,%ax
  10019d:	66 90                	xchg   %ax,%ax
  10019f:	66 90                	xchg   %ax,%ax
  1001a1:	66 90                	xchg   %ax,%ax
  1001a3:	66 90                	xchg   %ax,%ax
  1001a5:	66 90                	xchg   %ax,%ax
  1001a7:	66 90                	xchg   %ax,%ax
  1001a9:	66 90                	xchg   %ax,%ax
  1001ab:	66 90                	xchg   %ax,%ax
  1001ad:	66 90                	xchg   %ax,%ax
  1001af:	66 90                	xchg   %ax,%ax
  1001b1:	66 90                	xchg   %ax,%ax
  1001b3:	66 90                	xchg   %ax,%ax
  1001b5:	66 90                	xchg   %ax,%ax
  1001b7:	66 90                	xchg   %ax,%ax
  1001b9:	66 90                	xchg   %ax,%ax
  1001bb:	66 90                	xchg   %ax,%ax
  1001bd:	66 90                	xchg   %ax,%ax
  1001bf:	66 90                	xchg   %ax,%ax
  1001c1:	66 90                	xchg   %ax,%ax
  1001c3:	66 90                	xchg   %ax,%ax
  1001c5:	66 90                	xchg   %ax,%ax
  1001c7:	66 90                	xchg   %ax,%ax
  1001c9:	66 90                	xchg   %ax,%ax
  1001cb:	66 90                	xchg   %ax,%ax
  1001cd:	66 90                	xchg   %ax,%ax
  1001cf:	66 90                	xchg   %ax,%ax
  1001d1:	66 90                	xchg   %ax,%ax
  1001d3:	66 90                	xchg   %ax,%ax
  1001d5:	66 90                	xchg   %ax,%ax
  1001d7:	66 90                	xchg   %ax,%ax
  1001d9:	66 90                	xchg   %ax,%ax
  1001db:	66 90                	xchg   %ax,%ax
  1001dd:	66 90                	xchg   %ax,%ax
  1001df:	66 90                	xchg   %ax,%ax
  1001e1:	66 90                	xchg   %ax,%ax
  1001e3:	66 90                	xchg   %ax,%ax
  1001e5:	66 90                	xchg   %ax,%ax
  1001e7:	66 90                	xchg   %ax,%ax
  1001e9:	66 90                	xchg   %ax,%ax
  1001eb:	66 90                	xchg   %ax,%ax
  1001ed:	66 90                	xchg   %ax,%ax
  1001ef:	66 90                	xchg   %ax,%ax
  1001f1:	66 90                	xchg   %ax,%ax
  1001f3:	66 90                	xchg   %ax,%ax
  1001f5:	66 90                	xchg   %ax,%ax
  1001f7:	66 90                	xchg   %ax,%ax
  1001f9:	66 90                	xchg   %ax,%ax
  1001fb:	66 90                	xchg   %ax,%ax
  1001fd:	66 90                	xchg   %ax,%ax
  1001ff:	66 90                	xchg   %ax,%ax
  100201:	66 90                	xchg   %ax,%ax
  100203:	66 90                	xchg   %ax,%ax
  100205:	66 90                	xchg   %ax,%ax
  100207:	66 90                	xchg   %ax,%ax
  100209:	66 90                	xchg   %ax,%ax
  10020b:	66 90                	xchg   %ax,%ax
  10020d:	66 90                	xchg   %ax,%ax
  10020f:	66 90                	xchg   %ax,%ax
  100211:	66 90                	xchg   %ax,%ax
  100213:	66 90                	xchg   %ax,%ax
  100215:	66 90                	xchg   %ax,%ax
  100217:	66 90                	xchg   %ax,%ax
  100219:	66 90                	xchg   %ax,%ax
  10021b:	66 90                	xchg   %ax,%ax
  10021d:	66 90                	xchg   %ax,%ax
  10021f:	66 90                	xchg   %ax,%ax
  100221:	66 90                	xchg   %ax,%ax
  100223:	66 90                	xchg   %ax,%ax
  100225:	66 90                	xchg   %ax,%ax
  100227:	66 90                	xchg   %ax,%ax
  100229:	66 90                	xchg   %ax,%ax
  10022b:	66 90                	xchg   %ax,%ax
  10022d:	66 90                	xchg   %ax,%ax
  10022f:	66 90                	xchg   %ax,%ax
  100231:	66 90                	xchg   %ax,%ax
  100233:	66 90                	xchg   %ax,%ax
  100235:	66 90                	xchg   %ax,%ax
  100237:	66 90                	xchg   %ax,%ax
  100239:	66 90                	xchg   %ax,%ax
  10023b:	66 90                	xchg   %ax,%ax
  10023d:	66 90                	xchg   %ax,%ax
  10023f:	66 90                	xchg   %ax,%ax
  100241:	66 90                	xchg   %ax,%ax
  100243:	66 90                	xchg   %ax,%ax
  100245:	66 90                	xchg   %ax,%ax
  100247:	66 90                	xchg   %ax,%ax
  100249:	66 90                	xchg   %ax,%ax
  10024b:	66 90                	xchg   %ax,%ax
  10024d:	66 90                	xchg   %ax,%ax
  10024f:	66 90                	xchg   %ax,%ax
  100251:	66 90                	xchg   %ax,%ax
  100253:	66 90                	xchg   %ax,%ax
  100255:	66 90                	xchg   %ax,%ax
  100257:	66 90                	xchg   %ax,%ax
  100259:	66 90                	xchg   %ax,%ax
  10025b:	66 90                	xchg   %ax,%ax
  10025d:	66 90                	xchg   %ax,%ax
  10025f:	66 90                	xchg   %ax,%ax
  100261:	66 90                	xchg   %ax,%ax
  100263:	66 90                	xchg   %ax,%ax
  100265:	66 90                	xchg   %ax,%ax
  100267:	66 90                	xchg   %ax,%ax
  100269:	66 90                	xchg   %ax,%ax
  10026b:	66 90                	xchg   %ax,%ax
  10026d:	66 90                	xchg   %ax,%ax
  10026f:	66 90                	xchg   %ax,%ax
  100271:	66 90                	xchg   %ax,%ax
  100273:	66 90                	xchg   %ax,%ax
  100275:	66 90                	xchg   %ax,%ax
  100277:	66 90                	xchg   %ax,%ax
  100279:	66 90                	xchg   %ax,%ax
  10027b:	66 90                	xchg   %ax,%ax
  10027d:	66 90                	xchg   %ax,%ax
  10027f:	66 90                	xchg   %ax,%ax
  100281:	66 90                	xchg   %ax,%ax
  100283:	66 90                	xchg   %ax,%ax
  100285:	66 90                	xchg   %ax,%ax
  100287:	66 90                	xchg   %ax,%ax
  100289:	66 90                	xchg   %ax,%ax
  10028b:	66 90                	xchg   %ax,%ax
  10028d:	66 90                	xchg   %ax,%ax
  10028f:	66 90                	xchg   %ax,%ax
  100291:	66 90                	xchg   %ax,%ax
  100293:	66 90                	xchg   %ax,%ax
  100295:	66 90                	xchg   %ax,%ax
  100297:	66 90                	xchg   %ax,%ax
  100299:	66 90                	xchg   %ax,%ax
  10029b:	66 90                	xchg   %ax,%ax
  10029d:	66 90                	xchg   %ax,%ax
  10029f:	66 90                	xchg   %ax,%ax
  1002a1:	66 90                	xchg   %ax,%ax
  1002a3:	66 90                	xchg   %ax,%ax
  1002a5:	66 90                	xchg   %ax,%ax
  1002a7:	66 90                	xchg   %ax,%ax
  1002a9:	66 90                	xchg   %ax,%ax
  1002ab:	66 90                	xchg   %ax,%ax
  1002ad:	66 90                	xchg   %ax,%ax
  1002af:	66 90                	xchg   %ax,%ax
  1002b1:	66 90                	xchg   %ax,%ax
  1002b3:	66 90                	xchg   %ax,%ax
  1002b5:	66 90                	xchg   %ax,%ax
  1002b7:	66 90                	xchg   %ax,%ax
  1002b9:	66 90                	xchg   %ax,%ax
  1002bb:	66 90                	xchg   %ax,%ax
  1002bd:	66 90                	xchg   %ax,%ax
  1002bf:	66 90                	xchg   %ax,%ax
  1002c1:	66 90                	xchg   %ax,%ax
  1002c3:	66 90                	xchg   %ax,%ax
  1002c5:	66 90                	xchg   %ax,%ax
  1002c7:	66 90                	xchg   %ax,%ax
  1002c9:	66 90                	xchg   %ax,%ax
  1002cb:	66 90                	xchg   %ax,%ax
  1002cd:	66 90                	xchg   %ax,%ax
  1002cf:	66 90                	xchg   %ax,%ax
  1002d1:	66 90                	xchg   %ax,%ax
  1002d3:	66 90                	xchg   %ax,%ax
  1002d5:	66 90                	xchg   %ax,%ax
  1002d7:	66 90                	xchg   %ax,%ax
  1002d9:	66 90                	xchg   %ax,%ax
  1002db:	66 90                	xchg   %ax,%ax
  1002dd:	66 90                	xchg   %ax,%ax
  1002df:	66 90                	xchg   %ax,%ax
  1002e1:	66 90                	xchg   %ax,%ax
  1002e3:	66 90                	xchg   %ax,%ax
  1002e5:	66 90                	xchg   %ax,%ax
  1002e7:	66 90                	xchg   %ax,%ax
  1002e9:	66 90                	xchg   %ax,%ax
  1002eb:	66 90                	xchg   %ax,%ax
  1002ed:	66 90                	xchg   %ax,%ax
  1002ef:	66 90                	xchg   %ax,%ax
  1002f1:	66 90                	xchg   %ax,%ax
  1002f3:	66 90                	xchg   %ax,%ax
  1002f5:	66 90                	xchg   %ax,%ax
  1002f7:	66 90                	xchg   %ax,%ax
  1002f9:	66 90                	xchg   %ax,%ax
  1002fb:	66 90                	xchg   %ax,%ax
  1002fd:	66 90                	xchg   %ax,%ax
  1002ff:	66 90                	xchg   %ax,%ax
  100301:	66 90                	xchg   %ax,%ax
  100303:	66 90                	xchg   %ax,%ax
  100305:	66 90                	xchg   %ax,%ax
  100307:	66 90                	xchg   %ax,%ax
  100309:	66 90                	xchg   %ax,%ax
  10030b:	66 90                	xchg   %ax,%ax
  10030d:	66 90                	xchg   %ax,%ax
  10030f:	66 90                	xchg   %ax,%ax
  100311:	66 90                	xchg   %ax,%ax
  100313:	66 90                	xchg   %ax,%ax
  100315:	66 90                	xchg   %ax,%ax
  100317:	66 90                	xchg   %ax,%ax
  100319:	66 90                	xchg   %ax,%ax
  10031b:	66 90                	xchg   %ax,%ax
  10031d:	66 90                	xchg   %ax,%ax
  10031f:	66 90                	xchg   %ax,%ax
  100321:	66 90                	xchg   %ax,%ax
  100323:	66 90                	xchg   %ax,%ax
  100325:	66 90                	xchg   %ax,%ax
  100327:	66 90                	xchg   %ax,%ax
  100329:	66 90                	xchg   %ax,%ax
  10032b:	66 90                	xchg   %ax,%ax
  10032d:	66 90                	xchg   %ax,%ax
  10032f:	66 90                	xchg   %ax,%ax
  100331:	66 90                	xchg   %ax,%ax
  100333:	66 90                	xchg   %ax,%ax
  100335:	66 90                	xchg   %ax,%ax
  100337:	66 90                	xchg   %ax,%ax
  100339:	66 90                	xchg   %ax,%ax
  10033b:	66 90                	xchg   %ax,%ax
  10033d:	66 90                	xchg   %ax,%ax
  10033f:	66 90                	xchg   %ax,%ax
  100341:	66 90                	xchg   %ax,%ax
  100343:	66 90                	xchg   %ax,%ax
  100345:	66 90                	xchg   %ax,%ax
  100347:	66 90                	xchg   %ax,%ax
  100349:	66 90                	xchg   %ax,%ax
  10034b:	66 90                	xchg   %ax,%ax
  10034d:	66 90                	xchg   %ax,%ax
  10034f:	66 90                	xchg   %ax,%ax
  100351:	66 90                	xchg   %ax,%ax
  100353:	66 90                	xchg   %ax,%ax
  100355:	66 90                	xchg   %ax,%ax
  100357:	66 90                	xchg   %ax,%ax
  100359:	66 90                	xchg   %ax,%ax
  10035b:	66 90                	xchg   %ax,%ax
  10035d:	66 90                	xchg   %ax,%ax
  10035f:	66 90                	xchg   %ax,%ax
  100361:	66 90                	xchg   %ax,%ax
  100363:	66 90                	xchg   %ax,%ax
  100365:	66 90                	xchg   %ax,%ax
  100367:	66 90                	xchg   %ax,%ax
  100369:	66 90                	xchg   %ax,%ax
  10036b:	66 90                	xchg   %ax,%ax
  10036d:	66 90                	xchg   %ax,%ax
  10036f:	66 90                	xchg   %ax,%ax
  100371:	66 90                	xchg   %ax,%ax
  100373:	66 90                	xchg   %ax,%ax
  100375:	66 90                	xchg   %ax,%ax
  100377:	66 90                	xchg   %ax,%ax
  100379:	66 90                	xchg   %ax,%ax
  10037b:	66 90                	xchg   %ax,%ax
  10037d:	66 90                	xchg   %ax,%ax
  10037f:	66 90                	xchg   %ax,%ax
  100381:	66 90                	xchg   %ax,%ax
  100383:	66 90                	xchg   %ax,%ax
  100385:	66 90                	xchg   %ax,%ax
  100387:	66 90                	xchg   %ax,%ax
  100389:	66 90                	xchg   %ax,%ax
  10038b:	66 90                	xchg   %ax,%ax
  10038d:	66 90                	xchg   %ax,%ax
  10038f:	66 90                	xchg   %ax,%ax
  100391:	66 90                	xchg   %ax,%ax
  100393:	66 90                	xchg   %ax,%ax
  100395:	66 90                	xchg   %ax,%ax
  100397:	66 90                	xchg   %ax,%ax
  100399:	66 90                	xchg   %ax,%ax
  10039b:	66 90                	xchg   %ax,%ax
  10039d:	66 90                	xchg   %ax,%ax
  10039f:	66 90                	xchg   %ax,%ax
  1003a1:	66 90                	xchg   %ax,%ax
  1003a3:	66 90                	xchg   %ax,%ax
  1003a5:	66 90                	xchg   %ax,%ax
  1003a7:	66 90                	xchg   %ax,%ax
  1003a9:	66 90                	xchg   %ax,%ax
  1003ab:	66 90                	xchg   %ax,%ax
  1003ad:	66 90                	xchg   %ax,%ax
  1003af:	66 90                	xchg   %ax,%ax
  1003b1:	66 90                	xchg   %ax,%ax
  1003b3:	66 90                	xchg   %ax,%ax
  1003b5:	66 90                	xchg   %ax,%ax
  1003b7:	66 90                	xchg   %ax,%ax
  1003b9:	66 90                	xchg   %ax,%ax
  1003bb:	66 90                	xchg   %ax,%ax
  1003bd:	66 90                	xchg   %ax,%ax
  1003bf:	66 90                	xchg   %ax,%ax
  1003c1:	66 90                	xchg   %ax,%ax
  1003c3:	66 90                	xchg   %ax,%ax
  1003c5:	66 90                	xchg   %ax,%ax
  1003c7:	66 90                	xchg   %ax,%ax
  1003c9:	66 90                	xchg   %ax,%ax
  1003cb:	66 90                	xchg   %ax,%ax
  1003cd:	66 90                	xchg   %ax,%ax
  1003cf:	66 90                	xchg   %ax,%ax
  1003d1:	66 90                	xchg   %ax,%ax
  1003d3:	66 90                	xchg   %ax,%ax
  1003d5:	66 90                	xchg   %ax,%ax
  1003d7:	66 90                	xchg   %ax,%ax
  1003d9:	66 90                	xchg   %ax,%ax
  1003db:	66 90                	xchg   %ax,%ax
  1003dd:	66 90                	xchg   %ax,%ax
  1003df:	66 90                	xchg   %ax,%ax
  1003e1:	66 90                	xchg   %ax,%ax
  1003e3:	66 90                	xchg   %ax,%ax
  1003e5:	66 90                	xchg   %ax,%ax
  1003e7:	66 90                	xchg   %ax,%ax
  1003e9:	66 90                	xchg   %ax,%ax
  1003eb:	66 90                	xchg   %ax,%ax
  1003ed:	66 90                	xchg   %ax,%ax
  1003ef:	66 90                	xchg   %ax,%ax
  1003f1:	66 90                	xchg   %ax,%ax
  1003f3:	66 90                	xchg   %ax,%ax
  1003f5:	66 90                	xchg   %ax,%ax
  1003f7:	66 90                	xchg   %ax,%ax
  1003f9:	66 90                	xchg   %ax,%ax
  1003fb:	66 90                	xchg   %ax,%ax
  1003fd:	66 90                	xchg   %ax,%ax
  1003ff:	66 90                	xchg   %ax,%ax
  100401:	66 90                	xchg   %ax,%ax
  100403:	66 90                	xchg   %ax,%ax
  100405:	66 90                	xchg   %ax,%ax
  100407:	66 90                	xchg   %ax,%ax
  100409:	66 90                	xchg   %ax,%ax
  10040b:	66 90                	xchg   %ax,%ax
  10040d:	66 90                	xchg   %ax,%ax
  10040f:	66 90                	xchg   %ax,%ax
  100411:	66 90                	xchg   %ax,%ax
  100413:	66 90                	xchg   %ax,%ax
  100415:	66 90                	xchg   %ax,%ax
  100417:	66 90                	xchg   %ax,%ax
  100419:	66 90                	xchg   %ax,%ax
  10041b:	66 90                	xchg   %ax,%ax
  10041d:	66 90                	xchg   %ax,%ax
  10041f:	66 90                	xchg   %ax,%ax
  100421:	66 90                	xchg   %ax,%ax
  100423:	66 90                	xchg   %ax,%ax
  100425:	66 90                	xchg   %ax,%ax
  100427:	66 90                	xchg   %ax,%ax
  100429:	66 90                	xchg   %ax,%ax
  10042b:	66 90                	xchg   %ax,%ax
  10042d:	66 90                	xchg   %ax,%ax
  10042f:	66 90                	xchg   %ax,%ax
  100431:	66 90                	xchg   %ax,%ax
  100433:	66 90                	xchg   %ax,%ax
  100435:	66 90                	xchg   %ax,%ax
  100437:	66 90                	xchg   %ax,%ax
  100439:	66 90                	xchg   %ax,%ax
  10043b:	66 90                	xchg   %ax,%ax
  10043d:	66 90                	xchg   %ax,%ax
  10043f:	66 90                	xchg   %ax,%ax
  100441:	66 90                	xchg   %ax,%ax
  100443:	66 90                	xchg   %ax,%ax
  100445:	66 90                	xchg   %ax,%ax
  100447:	66 90                	xchg   %ax,%ax
  100449:	66 90                	xchg   %ax,%ax
  10044b:	66 90                	xchg   %ax,%ax
  10044d:	66 90                	xchg   %ax,%ax
  10044f:	66 90                	xchg   %ax,%ax
  100451:	66 90                	xchg   %ax,%ax
  100453:	66 90                	xchg   %ax,%ax
  100455:	66 90                	xchg   %ax,%ax
  100457:	66 90                	xchg   %ax,%ax
  100459:	66 90                	xchg   %ax,%ax
  10045b:	66 90                	xchg   %ax,%ax
  10045d:	66 90                	xchg   %ax,%ax
  10045f:	66 90                	xchg   %ax,%ax
  100461:	66 90                	xchg   %ax,%ax
  100463:	66 90                	xchg   %ax,%ax
  100465:	66 90                	xchg   %ax,%ax
  100467:	66 90                	xchg   %ax,%ax
  100469:	66 90                	xchg   %ax,%ax
  10046b:	66 90                	xchg   %ax,%ax
  10046d:	66 90                	xchg   %ax,%ax
  10046f:	66 90                	xchg   %ax,%ax
  100471:	66 90                	xchg   %ax,%ax
  100473:	66 90                	xchg   %ax,%ax
  100475:	66 90                	xchg   %ax,%ax
  100477:	66 90                	xchg   %ax,%ax
  100479:	66 90                	xchg   %ax,%ax
  10047b:	66 90                	xchg   %ax,%ax
  10047d:	66 90                	xchg   %ax,%ax
  10047f:	66 90                	xchg   %ax,%ax
  100481:	66 90                	xchg   %ax,%ax
  100483:	66 90                	xchg   %ax,%ax
  100485:	66 90                	xchg   %ax,%ax
  100487:	66 90                	xchg   %ax,%ax
  100489:	66 90                	xchg   %ax,%ax
  10048b:	66 90                	xchg   %ax,%ax
  10048d:	66 90                	xchg   %ax,%ax
  10048f:	66 90                	xchg   %ax,%ax
  100491:	66 90                	xchg   %ax,%ax
  100493:	66 90                	xchg   %ax,%ax
  100495:	66 90                	xchg   %ax,%ax
  100497:	66 90                	xchg   %ax,%ax
  100499:	66 90                	xchg   %ax,%ax
  10049b:	66 90                	xchg   %ax,%ax
  10049d:	66 90                	xchg   %ax,%ax
  10049f:	66 90                	xchg   %ax,%ax
  1004a1:	66 90                	xchg   %ax,%ax
  1004a3:	66 90                	xchg   %ax,%ax
  1004a5:	66 90                	xchg   %ax,%ax
  1004a7:	66 90                	xchg   %ax,%ax
  1004a9:	66 90                	xchg   %ax,%ax
  1004ab:	66 90                	xchg   %ax,%ax
  1004ad:	66 90                	xchg   %ax,%ax
  1004af:	66 90                	xchg   %ax,%ax
  1004b1:	66 90                	xchg   %ax,%ax
  1004b3:	66 90                	xchg   %ax,%ax
  1004b5:	66 90                	xchg   %ax,%ax
  1004b7:	66 90                	xchg   %ax,%ax
  1004b9:	66 90                	xchg   %ax,%ax
  1004bb:	66 90                	xchg   %ax,%ax
  1004bd:	66 90                	xchg   %ax,%ax
  1004bf:	66 90                	xchg   %ax,%ax
  1004c1:	66 90                	xchg   %ax,%ax
  1004c3:	66 90                	xchg   %ax,%ax
  1004c5:	66 90                	xchg   %ax,%ax
  1004c7:	66 90                	xchg   %ax,%ax
  1004c9:	66 90                	xchg   %ax,%ax
  1004cb:	66 90                	xchg   %ax,%ax
  1004cd:	66 90                	xchg   %ax,%ax
  1004cf:	66 90                	xchg   %ax,%ax
  1004d1:	66 90                	xchg   %ax,%ax
  1004d3:	66 90                	xchg   %ax,%ax
  1004d5:	66 90                	xchg   %ax,%ax
  1004d7:	66 90                	xchg   %ax,%ax
  1004d9:	66 90                	xchg   %ax,%ax
  1004db:	66 90                	xchg   %ax,%ax
  1004dd:	66 90                	xchg   %ax,%ax
  1004df:	66 90                	xchg   %ax,%ax
  1004e1:	66 90                	xchg   %ax,%ax
  1004e3:	66 90                	xchg   %ax,%ax
  1004e5:	66 90                	xchg   %ax,%ax
  1004e7:	66 90                	xchg   %ax,%ax
  1004e9:	66 90                	xchg   %ax,%ax
  1004eb:	66 90                	xchg   %ax,%ax
  1004ed:	66 90                	xchg   %ax,%ax
  1004ef:	66 90                	xchg   %ax,%ax
  1004f1:	66 90                	xchg   %ax,%ax
  1004f3:	66 90                	xchg   %ax,%ax
  1004f5:	66 90                	xchg   %ax,%ax
  1004f7:	66 90                	xchg   %ax,%ax
  1004f9:	66 90                	xchg   %ax,%ax
  1004fb:	66 90                	xchg   %ax,%ax
  1004fd:	66 90                	xchg   %ax,%ax
  1004ff:	66 90                	xchg   %ax,%ax
  100501:	66 90                	xchg   %ax,%ax
  100503:	66 90                	xchg   %ax,%ax
  100505:	66 90                	xchg   %ax,%ax
  100507:	66 90                	xchg   %ax,%ax
  100509:	66 90                	xchg   %ax,%ax
  10050b:	66 90                	xchg   %ax,%ax
  10050d:	66 90                	xchg   %ax,%ax
  10050f:	66 90                	xchg   %ax,%ax
  100511:	66 90                	xchg   %ax,%ax
  100513:	66 90                	xchg   %ax,%ax
  100515:	66 90                	xchg   %ax,%ax
  100517:	66 90                	xchg   %ax,%ax
  100519:	66 90                	xchg   %ax,%ax
  10051b:	66 90                	xchg   %ax,%ax
  10051d:	66 90                	xchg   %ax,%ax
  10051f:	66 90                	xchg   %ax,%ax
  100521:	66 90                	xchg   %ax,%ax
  100523:	66 90                	xchg   %ax,%ax
  100525:	66 90                	xchg   %ax,%ax
  100527:	66 90                	xchg   %ax,%ax
  100529:	66 90                	xchg   %ax,%ax
  10052b:	66 90                	xchg   %ax,%ax
  10052d:	66 90                	xchg   %ax,%ax
  10052f:	66 90                	xchg   %ax,%ax
  100531:	66 90                	xchg   %ax,%ax
  100533:	66 90                	xchg   %ax,%ax
  100535:	66 90                	xchg   %ax,%ax
  100537:	66 90                	xchg   %ax,%ax
  100539:	66 90                	xchg   %ax,%ax
  10053b:	66 90                	xchg   %ax,%ax
  10053d:	66 90                	xchg   %ax,%ax
  10053f:	66 90                	xchg   %ax,%ax
  100541:	66 90                	xchg   %ax,%ax
  100543:	66 90                	xchg   %ax,%ax
  100545:	66 90                	xchg   %ax,%ax
  100547:	66 90                	xchg   %ax,%ax
  100549:	66 90                	xchg   %ax,%ax
  10054b:	66 90                	xchg   %ax,%ax
  10054d:	66 90                	xchg   %ax,%ax
  10054f:	66 90                	xchg   %ax,%ax
  100551:	66 90                	xchg   %ax,%ax
  100553:	66 90                	xchg   %ax,%ax
  100555:	66 90                	xchg   %ax,%ax
  100557:	66 90                	xchg   %ax,%ax
  100559:	66 90                	xchg   %ax,%ax
  10055b:	66 90                	xchg   %ax,%ax
  10055d:	66 90                	xchg   %ax,%ax
  10055f:	66 90                	xchg   %ax,%ax
  100561:	66 90                	xchg   %ax,%ax
  100563:	66 90                	xchg   %ax,%ax
  100565:	66 90                	xchg   %ax,%ax
  100567:	66 90                	xchg   %ax,%ax
  100569:	66 90                	xchg   %ax,%ax
  10056b:	66 90                	xchg   %ax,%ax
  10056d:	66 90                	xchg   %ax,%ax
  10056f:	66 90                	xchg   %ax,%ax
  100571:	66 90                	xchg   %ax,%ax
  100573:	66 90                	xchg   %ax,%ax
  100575:	66 90                	xchg   %ax,%ax
  100577:	66 90                	xchg   %ax,%ax
  100579:	66 90                	xchg   %ax,%ax
  10057b:	66 90                	xchg   %ax,%ax
  10057d:	66 90                	xchg   %ax,%ax
  10057f:	66 90                	xchg   %ax,%ax
  100581:	66 90                	xchg   %ax,%ax
  100583:	66 90                	xchg   %ax,%ax
  100585:	66 90                	xchg   %ax,%ax
  100587:	66 90                	xchg   %ax,%ax
  100589:	66 90                	xchg   %ax,%ax
  10058b:	66 90                	xchg   %ax,%ax
  10058d:	66 90                	xchg   %ax,%ax
  10058f:	66 90                	xchg   %ax,%ax
  100591:	66 90                	xchg   %ax,%ax
  100593:	66 90                	xchg   %ax,%ax
  100595:	66 90                	xchg   %ax,%ax
  100597:	66 90                	xchg   %ax,%ax
  100599:	66 90                	xchg   %ax,%ax
  10059b:	66 90                	xchg   %ax,%ax
  10059d:	66 90                	xchg   %ax,%ax
  10059f:	66 90                	xchg   %ax,%ax
  1005a1:	66 90                	xchg   %ax,%ax
  1005a3:	66 90                	xchg   %ax,%ax
  1005a5:	66 90                	xchg   %ax,%ax
  1005a7:	66 90                	xchg   %ax,%ax
  1005a9:	66 90                	xchg   %ax,%ax
  1005ab:	66 90                	xchg   %ax,%ax
  1005ad:	66 90                	xchg   %ax,%ax
  1005af:	66 90                	xchg   %ax,%ax
  1005b1:	66 90                	xchg   %ax,%ax
  1005b3:	66 90                	xchg   %ax,%ax
  1005b5:	66 90                	xchg   %ax,%ax
  1005b7:	66 90                	xchg   %ax,%ax
  1005b9:	66 90                	xchg   %ax,%ax
  1005bb:	66 90                	xchg   %ax,%ax
  1005bd:	66 90                	xchg   %ax,%ax
  1005bf:	66 90                	xchg   %ax,%ax
  1005c1:	66 90                	xchg   %ax,%ax
  1005c3:	66 90                	xchg   %ax,%ax
  1005c5:	66 90                	xchg   %ax,%ax
  1005c7:	66 90                	xchg   %ax,%ax
  1005c9:	66 90                	xchg   %ax,%ax
  1005cb:	66 90                	xchg   %ax,%ax
  1005cd:	66 90                	xchg   %ax,%ax
  1005cf:	66 90                	xchg   %ax,%ax
  1005d1:	66 90                	xchg   %ax,%ax
  1005d3:	66 90                	xchg   %ax,%ax
  1005d5:	66 90                	xchg   %ax,%ax
  1005d7:	66 90                	xchg   %ax,%ax
  1005d9:	66 90                	xchg   %ax,%ax
  1005db:	66 90                	xchg   %ax,%ax
  1005dd:	66 90                	xchg   %ax,%ax
  1005df:	66 90                	xchg   %ax,%ax
  1005e1:	66 90                	xchg   %ax,%ax
  1005e3:	66 90                	xchg   %ax,%ax
  1005e5:	66 90                	xchg   %ax,%ax
  1005e7:	66 90                	xchg   %ax,%ax
  1005e9:	66 90                	xchg   %ax,%ax
  1005eb:	66 90                	xchg   %ax,%ax
  1005ed:	66 90                	xchg   %ax,%ax
  1005ef:	66 90                	xchg   %ax,%ax
  1005f1:	66 90                	xchg   %ax,%ax
  1005f3:	66 90                	xchg   %ax,%ax
  1005f5:	66 90                	xchg   %ax,%ax
  1005f7:	66 90                	xchg   %ax,%ax
  1005f9:	66 90                	xchg   %ax,%ax
  1005fb:	66 90                	xchg   %ax,%ax
  1005fd:	66 90                	xchg   %ax,%ax
  1005ff:	66 90                	xchg   %ax,%ax
  100601:	66 90                	xchg   %ax,%ax
  100603:	66 90                	xchg   %ax,%ax
  100605:	66 90                	xchg   %ax,%ax
  100607:	66 90                	xchg   %ax,%ax
  100609:	66 90                	xchg   %ax,%ax
  10060b:	66 90                	xchg   %ax,%ax
  10060d:	66 90                	xchg   %ax,%ax
  10060f:	66 90                	xchg   %ax,%ax
  100611:	66 90                	xchg   %ax,%ax
  100613:	66 90                	xchg   %ax,%ax
  100615:	66 90                	xchg   %ax,%ax
  100617:	66 90                	xchg   %ax,%ax
  100619:	66 90                	xchg   %ax,%ax
  10061b:	66 90                	xchg   %ax,%ax
  10061d:	66 90                	xchg   %ax,%ax
  10061f:	66 90                	xchg   %ax,%ax
  100621:	66 90                	xchg   %ax,%ax
  100623:	66 90                	xchg   %ax,%ax
  100625:	66 90                	xchg   %ax,%ax
  100627:	66 90                	xchg   %ax,%ax
  100629:	66 90                	xchg   %ax,%ax
  10062b:	66 90                	xchg   %ax,%ax
  10062d:	66 90                	xchg   %ax,%ax
  10062f:	66 90                	xchg   %ax,%ax
  100631:	66 90                	xchg   %ax,%ax
  100633:	66 90                	xchg   %ax,%ax
  100635:	66 90                	xchg   %ax,%ax
  100637:	66 90                	xchg   %ax,%ax
  100639:	66 90                	xchg   %ax,%ax
  10063b:	66 90                	xchg   %ax,%ax
  10063d:	66 90                	xchg   %ax,%ax
  10063f:	66 90                	xchg   %ax,%ax
  100641:	66 90                	xchg   %ax,%ax
  100643:	66 90                	xchg   %ax,%ax
  100645:	66 90                	xchg   %ax,%ax
  100647:	66 90                	xchg   %ax,%ax
  100649:	66 90                	xchg   %ax,%ax
  10064b:	66 90                	xchg   %ax,%ax
  10064d:	66 90                	xchg   %ax,%ax
  10064f:	66 90                	xchg   %ax,%ax
  100651:	66 90                	xchg   %ax,%ax
  100653:	66 90                	xchg   %ax,%ax
  100655:	66 90                	xchg   %ax,%ax
  100657:	66 90                	xchg   %ax,%ax
  100659:	66 90                	xchg   %ax,%ax
  10065b:	66 90                	xchg   %ax,%ax
  10065d:	66 90                	xchg   %ax,%ax
  10065f:	66 90                	xchg   %ax,%ax
  100661:	66 90                	xchg   %ax,%ax
  100663:	66 90                	xchg   %ax,%ax
  100665:	66 90                	xchg   %ax,%ax
  100667:	66 90                	xchg   %ax,%ax
  100669:	66 90                	xchg   %ax,%ax
  10066b:	66 90                	xchg   %ax,%ax
  10066d:	66 90                	xchg   %ax,%ax
  10066f:	66 90                	xchg   %ax,%ax
  100671:	66 90                	xchg   %ax,%ax
  100673:	66 90                	xchg   %ax,%ax
  100675:	66 90                	xchg   %ax,%ax
  100677:	66 90                	xchg   %ax,%ax
  100679:	66 90                	xchg   %ax,%ax
  10067b:	66 90                	xchg   %ax,%ax
  10067d:	66 90                	xchg   %ax,%ax
  10067f:	66 90                	xchg   %ax,%ax
  100681:	66 90                	xchg   %ax,%ax
  100683:	66 90                	xchg   %ax,%ax
  100685:	66 90                	xchg   %ax,%ax
  100687:	66 90                	xchg   %ax,%ax
  100689:	66 90                	xchg   %ax,%ax
  10068b:	66 90                	xchg   %ax,%ax
  10068d:	66 90                	xchg   %ax,%ax
  10068f:	66 90                	xchg   %ax,%ax
  100691:	66 90                	xchg   %ax,%ax
  100693:	66 90                	xchg   %ax,%ax
  100695:	66 90                	xchg   %ax,%ax
  100697:	66 90                	xchg   %ax,%ax
  100699:	66 90                	xchg   %ax,%ax
  10069b:	66 90                	xchg   %ax,%ax
  10069d:	66 90                	xchg   %ax,%ax
  10069f:	66 90                	xchg   %ax,%ax
  1006a1:	66 90                	xchg   %ax,%ax
  1006a3:	66 90                	xchg   %ax,%ax
  1006a5:	66 90                	xchg   %ax,%ax
  1006a7:	66 90                	xchg   %ax,%ax
  1006a9:	66 90                	xchg   %ax,%ax
  1006ab:	66 90                	xchg   %ax,%ax
  1006ad:	66 90                	xchg   %ax,%ax
  1006af:	66 90                	xchg   %ax,%ax
  1006b1:	66 90                	xchg   %ax,%ax
  1006b3:	66 90                	xchg   %ax,%ax
  1006b5:	66 90                	xchg   %ax,%ax
  1006b7:	66 90                	xchg   %ax,%ax
  1006b9:	66 90                	xchg   %ax,%ax
  1006bb:	66 90                	xchg   %ax,%ax
  1006bd:	66 90                	xchg   %ax,%ax
  1006bf:	66 90                	xchg   %ax,%ax
  1006c1:	66 90                	xchg   %ax,%ax
  1006c3:	66 90                	xchg   %ax,%ax
  1006c5:	66 90                	xchg   %ax,%ax
  1006c7:	66 90                	xchg   %ax,%ax
  1006c9:	66 90                	xchg   %ax,%ax
  1006cb:	66 90                	xchg   %ax,%ax
  1006cd:	66 90                	xchg   %ax,%ax
  1006cf:	66 90                	xchg   %ax,%ax
  1006d1:	66 90                	xchg   %ax,%ax
  1006d3:	66 90                	xchg   %ax,%ax
  1006d5:	66 90                	xchg   %ax,%ax
  1006d7:	66 90                	xchg   %ax,%ax
  1006d9:	66 90                	xchg   %ax,%ax
  1006db:	66 90                	xchg   %ax,%ax
  1006dd:	66 90                	xchg   %ax,%ax
  1006df:	66 90                	xchg   %ax,%ax
  1006e1:	66 90                	xchg   %ax,%ax
  1006e3:	66 90                	xchg   %ax,%ax
  1006e5:	66 90                	xchg   %ax,%ax
  1006e7:	66 90                	xchg   %ax,%ax
  1006e9:	66 90                	xchg   %ax,%ax
  1006eb:	66 90                	xchg   %ax,%ax
  1006ed:	66 90                	xchg   %ax,%ax
  1006ef:	66 90                	xchg   %ax,%ax
  1006f1:	66 90                	xchg   %ax,%ax
  1006f3:	66 90                	xchg   %ax,%ax
  1006f5:	66 90                	xchg   %ax,%ax
  1006f7:	66 90                	xchg   %ax,%ax
  1006f9:	66 90                	xchg   %ax,%ax
  1006fb:	66 90                	xchg   %ax,%ax
  1006fd:	66 90                	xchg   %ax,%ax
  1006ff:	66 90                	xchg   %ax,%ax
  100701:	66 90                	xchg   %ax,%ax
  100703:	66 90                	xchg   %ax,%ax
  100705:	66 90                	xchg   %ax,%ax
  100707:	66 90                	xchg   %ax,%ax
  100709:	66 90                	xchg   %ax,%ax
  10070b:	66 90                	xchg   %ax,%ax
  10070d:	66 90                	xchg   %ax,%ax
  10070f:	66 90                	xchg   %ax,%ax
  100711:	66 90                	xchg   %ax,%ax
  100713:	66 90                	xchg   %ax,%ax
  100715:	66 90                	xchg   %ax,%ax
  100717:	66 90                	xchg   %ax,%ax
  100719:	66 90                	xchg   %ax,%ax
  10071b:	66 90                	xchg   %ax,%ax
  10071d:	66 90                	xchg   %ax,%ax
  10071f:	66 90                	xchg   %ax,%ax
  100721:	66 90                	xchg   %ax,%ax
  100723:	66 90                	xchg   %ax,%ax
  100725:	66 90                	xchg   %ax,%ax
  100727:	66 90                	xchg   %ax,%ax
  100729:	66 90                	xchg   %ax,%ax
  10072b:	66 90                	xchg   %ax,%ax
  10072d:	66 90                	xchg   %ax,%ax
  10072f:	66 90                	xchg   %ax,%ax
  100731:	66 90                	xchg   %ax,%ax
  100733:	66 90                	xchg   %ax,%ax
  100735:	66 90                	xchg   %ax,%ax
  100737:	66 90                	xchg   %ax,%ax
  100739:	66 90                	xchg   %ax,%ax
  10073b:	66 90                	xchg   %ax,%ax
  10073d:	66 90                	xchg   %ax,%ax
  10073f:	66 90                	xchg   %ax,%ax
  100741:	66 90                	xchg   %ax,%ax
  100743:	66 90                	xchg   %ax,%ax
  100745:	66 90                	xchg   %ax,%ax
  100747:	66 90                	xchg   %ax,%ax
  100749:	66 90                	xchg   %ax,%ax
  10074b:	66 90                	xchg   %ax,%ax
  10074d:	66 90                	xchg   %ax,%ax
  10074f:	66 90                	xchg   %ax,%ax
  100751:	66 90                	xchg   %ax,%ax
  100753:	66 90                	xchg   %ax,%ax
  100755:	66 90                	xchg   %ax,%ax
  100757:	66 90                	xchg   %ax,%ax
  100759:	66 90                	xchg   %ax,%ax
  10075b:	66 90                	xchg   %ax,%ax
  10075d:	66 90                	xchg   %ax,%ax
  10075f:	66 90                	xchg   %ax,%ax
  100761:	66 90                	xchg   %ax,%ax
  100763:	66 90                	xchg   %ax,%ax
  100765:	66 90                	xchg   %ax,%ax
  100767:	66 90                	xchg   %ax,%ax
  100769:	66 90                	xchg   %ax,%ax
  10076b:	66 90                	xchg   %ax,%ax
  10076d:	66 90                	xchg   %ax,%ax
  10076f:	66 90                	xchg   %ax,%ax
  100771:	66 90                	xchg   %ax,%ax
  100773:	66 90                	xchg   %ax,%ax
  100775:	66 90                	xchg   %ax,%ax
  100777:	66 90                	xchg   %ax,%ax
  100779:	66 90                	xchg   %ax,%ax
  10077b:	66 90                	xchg   %ax,%ax
  10077d:	66 90                	xchg   %ax,%ax
  10077f:	66 90                	xchg   %ax,%ax
  100781:	66 90                	xchg   %ax,%ax
  100783:	66 90                	xchg   %ax,%ax
  100785:	66 90                	xchg   %ax,%ax
  100787:	66 90                	xchg   %ax,%ax
  100789:	66 90                	xchg   %ax,%ax
  10078b:	66 90                	xchg   %ax,%ax
  10078d:	66 90                	xchg   %ax,%ax
  10078f:	66 90                	xchg   %ax,%ax
  100791:	66 90                	xchg   %ax,%ax
  100793:	66 90                	xchg   %ax,%ax
  100795:	66 90                	xchg   %ax,%ax
  100797:	66 90                	xchg   %ax,%ax
  100799:	66 90                	xchg   %ax,%ax
  10079b:	66 90                	xchg   %ax,%ax
  10079d:	66 90                	xchg   %ax,%ax
  10079f:	66 90                	xchg   %ax,%ax
  1007a1:	66 90                	xchg   %ax,%ax
  1007a3:	66 90                	xchg   %ax,%ax
  1007a5:	66 90                	xchg   %ax,%ax
  1007a7:	66 90                	xchg   %ax,%ax
  1007a9:	66 90                	xchg   %ax,%ax
  1007ab:	66 90                	xchg   %ax,%ax
  1007ad:	66 90                	xchg   %ax,%ax
  1007af:	66 90                	xchg   %ax,%ax
  1007b1:	66 90                	xchg   %ax,%ax
  1007b3:	66 90                	xchg   %ax,%ax
  1007b5:	66 90                	xchg   %ax,%ax
  1007b7:	66 90                	xchg   %ax,%ax
  1007b9:	66 90                	xchg   %ax,%ax
  1007bb:	66 90                	xchg   %ax,%ax
  1007bd:	66 90                	xchg   %ax,%ax
  1007bf:	66 90                	xchg   %ax,%ax
  1007c1:	66 90                	xchg   %ax,%ax
  1007c3:	66 90                	xchg   %ax,%ax
  1007c5:	66 90                	xchg   %ax,%ax
  1007c7:	66 90                	xchg   %ax,%ax
  1007c9:	66 90                	xchg   %ax,%ax
  1007cb:	66 90                	xchg   %ax,%ax
  1007cd:	66 90                	xchg   %ax,%ax
  1007cf:	66 90                	xchg   %ax,%ax
  1007d1:	66 90                	xchg   %ax,%ax
  1007d3:	66 90                	xchg   %ax,%ax
  1007d5:	66 90                	xchg   %ax,%ax
  1007d7:	66 90                	xchg   %ax,%ax
  1007d9:	66 90                	xchg   %ax,%ax
  1007db:	66 90                	xchg   %ax,%ax
  1007dd:	66 90                	xchg   %ax,%ax
  1007df:	66 90                	xchg   %ax,%ax
  1007e1:	66 90                	xchg   %ax,%ax
  1007e3:	66 90                	xchg   %ax,%ax
  1007e5:	66 90                	xchg   %ax,%ax
  1007e7:	66 90                	xchg   %ax,%ax
  1007e9:	66 90                	xchg   %ax,%ax
  1007eb:	66 90                	xchg   %ax,%ax
  1007ed:	66 90                	xchg   %ax,%ax
  1007ef:	66 90                	xchg   %ax,%ax
  1007f1:	66 90                	xchg   %ax,%ax
  1007f3:	66 90                	xchg   %ax,%ax
  1007f5:	66 90                	xchg   %ax,%ax
  1007f7:	66 90                	xchg   %ax,%ax
  1007f9:	66 90                	xchg   %ax,%ax
  1007fb:	66 90                	xchg   %ax,%ax
  1007fd:	66 90                	xchg   %ax,%ax
  1007ff:	66 90                	xchg   %ax,%ax
  100801:	66 90                	xchg   %ax,%ax
  100803:	66 90                	xchg   %ax,%ax
  100805:	66 90                	xchg   %ax,%ax
  100807:	66 90                	xchg   %ax,%ax
  100809:	66 90                	xchg   %ax,%ax
  10080b:	66 90                	xchg   %ax,%ax
  10080d:	66 90                	xchg   %ax,%ax
  10080f:	66 90                	xchg   %ax,%ax
  100811:	66 90                	xchg   %ax,%ax
  100813:	66 90                	xchg   %ax,%ax
  100815:	66 90                	xchg   %ax,%ax
  100817:	66 90                	xchg   %ax,%ax
  100819:	66 90                	xchg   %ax,%ax
  10081b:	66 90                	xchg   %ax,%ax
  10081d:	66 90                	xchg   %ax,%ax
  10081f:	66 90                	xchg   %ax,%ax
  100821:	66 90                	xchg   %ax,%ax
  100823:	66 90                	xchg   %ax,%ax
  100825:	66 90                	xchg   %ax,%ax
  100827:	66 90                	xchg   %ax,%ax
  100829:	66 90                	xchg   %ax,%ax
  10082b:	66 90                	xchg   %ax,%ax
  10082d:	66 90                	xchg   %ax,%ax
  10082f:	66 90                	xchg   %ax,%ax
  100831:	66 90                	xchg   %ax,%ax
  100833:	66 90                	xchg   %ax,%ax
  100835:	66 90                	xchg   %ax,%ax
  100837:	66 90                	xchg   %ax,%ax
  100839:	66 90                	xchg   %ax,%ax
  10083b:	66 90                	xchg   %ax,%ax
  10083d:	66 90                	xchg   %ax,%ax
  10083f:	66 90                	xchg   %ax,%ax
  100841:	66 90                	xchg   %ax,%ax
  100843:	66 90                	xchg   %ax,%ax
  100845:	66 90                	xchg   %ax,%ax
  100847:	66 90                	xchg   %ax,%ax
  100849:	66 90                	xchg   %ax,%ax
  10084b:	66 90                	xchg   %ax,%ax
  10084d:	66 90                	xchg   %ax,%ax
  10084f:	66 90                	xchg   %ax,%ax
  100851:	66 90                	xchg   %ax,%ax
  100853:	66 90                	xchg   %ax,%ax
  100855:	66 90                	xchg   %ax,%ax
  100857:	66 90                	xchg   %ax,%ax
  100859:	66 90                	xchg   %ax,%ax
  10085b:	66 90                	xchg   %ax,%ax
  10085d:	66 90                	xchg   %ax,%ax
  10085f:	66 90                	xchg   %ax,%ax
  100861:	66 90                	xchg   %ax,%ax
  100863:	66 90                	xchg   %ax,%ax
  100865:	66 90                	xchg   %ax,%ax
  100867:	66 90                	xchg   %ax,%ax
  100869:	66 90                	xchg   %ax,%ax
  10086b:	66 90                	xchg   %ax,%ax
  10086d:	66 90                	xchg   %ax,%ax
  10086f:	66 90                	xchg   %ax,%ax
  100871:	66 90                	xchg   %ax,%ax
  100873:	66 90                	xchg   %ax,%ax
  100875:	66 90                	xchg   %ax,%ax
  100877:	66 90                	xchg   %ax,%ax
  100879:	66 90                	xchg   %ax,%ax
  10087b:	66 90                	xchg   %ax,%ax
  10087d:	66 90                	xchg   %ax,%ax
  10087f:	66 90                	xchg   %ax,%ax
  100881:	66 90                	xchg   %ax,%ax
  100883:	66 90                	xchg   %ax,%ax
  100885:	66 90                	xchg   %ax,%ax
  100887:	66 90                	xchg   %ax,%ax
  100889:	66 90                	xchg   %ax,%ax
  10088b:	66 90                	xchg   %ax,%ax
  10088d:	66 90                	xchg   %ax,%ax
  10088f:	66 90                	xchg   %ax,%ax
  100891:	66 90                	xchg   %ax,%ax
  100893:	66 90                	xchg   %ax,%ax
  100895:	66 90                	xchg   %ax,%ax
  100897:	66 90                	xchg   %ax,%ax
  100899:	66 90                	xchg   %ax,%ax
  10089b:	66 90                	xchg   %ax,%ax
  10089d:	66 90                	xchg   %ax,%ax
  10089f:	66 90                	xchg   %ax,%ax
  1008a1:	66 90                	xchg   %ax,%ax
  1008a3:	66 90                	xchg   %ax,%ax
  1008a5:	66 90                	xchg   %ax,%ax
  1008a7:	66 90                	xchg   %ax,%ax
  1008a9:	66 90                	xchg   %ax,%ax
  1008ab:	66 90                	xchg   %ax,%ax
  1008ad:	66 90                	xchg   %ax,%ax
  1008af:	66 90                	xchg   %ax,%ax
  1008b1:	66 90                	xchg   %ax,%ax
  1008b3:	66 90                	xchg   %ax,%ax
  1008b5:	66 90                	xchg   %ax,%ax
  1008b7:	66 90                	xchg   %ax,%ax
  1008b9:	66 90                	xchg   %ax,%ax
  1008bb:	66 90                	xchg   %ax,%ax
  1008bd:	66 90                	xchg   %ax,%ax
  1008bf:	66 90                	xchg   %ax,%ax
  1008c1:	66 90                	xchg   %ax,%ax
  1008c3:	66 90                	xchg   %ax,%ax
  1008c5:	66 90                	xchg   %ax,%ax
  1008c7:	66 90                	xchg   %ax,%ax
  1008c9:	66 90                	xchg   %ax,%ax
  1008cb:	66 90                	xchg   %ax,%ax
  1008cd:	66 90                	xchg   %ax,%ax
  1008cf:	66 90                	xchg   %ax,%ax
  1008d1:	66 90                	xchg   %ax,%ax
  1008d3:	66 90                	xchg   %ax,%ax
  1008d5:	66 90                	xchg   %ax,%ax
  1008d7:	66 90                	xchg   %ax,%ax
  1008d9:	66 90                	xchg   %ax,%ax
  1008db:	66 90                	xchg   %ax,%ax
  1008dd:	66 90                	xchg   %ax,%ax
  1008df:	66 90                	xchg   %ax,%ax
  1008e1:	66 90                	xchg   %ax,%ax
  1008e3:	66 90                	xchg   %ax,%ax
  1008e5:	66 90                	xchg   %ax,%ax
  1008e7:	66 90                	xchg   %ax,%ax
  1008e9:	66 90                	xchg   %ax,%ax
  1008eb:	66 90                	xchg   %ax,%ax
  1008ed:	66 90                	xchg   %ax,%ax
  1008ef:	66 90                	xchg   %ax,%ax
  1008f1:	66 90                	xchg   %ax,%ax
  1008f3:	66 90                	xchg   %ax,%ax
  1008f5:	66 90                	xchg   %ax,%ax
  1008f7:	66 90                	xchg   %ax,%ax
  1008f9:	66 90                	xchg   %ax,%ax
  1008fb:	66 90                	xchg   %ax,%ax
  1008fd:	66 90                	xchg   %ax,%ax
  1008ff:	66 90                	xchg   %ax,%ax
  100901:	66 90                	xchg   %ax,%ax
  100903:	66 90                	xchg   %ax,%ax
  100905:	66 90                	xchg   %ax,%ax
  100907:	66 90                	xchg   %ax,%ax
  100909:	66 90                	xchg   %ax,%ax
  10090b:	66 90                	xchg   %ax,%ax
  10090d:	66 90                	xchg   %ax,%ax
  10090f:	66 90                	xchg   %ax,%ax
  100911:	66 90                	xchg   %ax,%ax
  100913:	66 90                	xchg   %ax,%ax
  100915:	66 90                	xchg   %ax,%ax
  100917:	66 90                	xchg   %ax,%ax
  100919:	66 90                	xchg   %ax,%ax
  10091b:	66 90                	xchg   %ax,%ax
  10091d:	66 90                	xchg   %ax,%ax
  10091f:	66 90                	xchg   %ax,%ax
  100921:	66 90                	xchg   %ax,%ax
  100923:	66 90                	xchg   %ax,%ax
  100925:	66 90                	xchg   %ax,%ax
  100927:	66 90                	xchg   %ax,%ax
  100929:	66 90                	xchg   %ax,%ax
  10092b:	66 90                	xchg   %ax,%ax
  10092d:	66 90                	xchg   %ax,%ax
  10092f:	66 90                	xchg   %ax,%ax
  100931:	66 90                	xchg   %ax,%ax
  100933:	66 90                	xchg   %ax,%ax
  100935:	66 90                	xchg   %ax,%ax
  100937:	66 90                	xchg   %ax,%ax
  100939:	66 90                	xchg   %ax,%ax
  10093b:	66 90                	xchg   %ax,%ax
  10093d:	66 90                	xchg   %ax,%ax
  10093f:	66 90                	xchg   %ax,%ax
  100941:	66 90                	xchg   %ax,%ax
  100943:	66 90                	xchg   %ax,%ax
  100945:	66 90                	xchg   %ax,%ax
  100947:	66 90                	xchg   %ax,%ax
  100949:	66 90                	xchg   %ax,%ax
  10094b:	66 90                	xchg   %ax,%ax
  10094d:	66 90                	xchg   %ax,%ax
  10094f:	66 90                	xchg   %ax,%ax
  100951:	66 90                	xchg   %ax,%ax
  100953:	66 90                	xchg   %ax,%ax
  100955:	66 90                	xchg   %ax,%ax
  100957:	66 90                	xchg   %ax,%ax
  100959:	66 90                	xchg   %ax,%ax
  10095b:	66 90                	xchg   %ax,%ax
  10095d:	66 90                	xchg   %ax,%ax
  10095f:	66 90                	xchg   %ax,%ax
  100961:	66 90                	xchg   %ax,%ax
  100963:	66 90                	xchg   %ax,%ax
  100965:	66 90                	xchg   %ax,%ax
  100967:	66 90                	xchg   %ax,%ax
  100969:	66 90                	xchg   %ax,%ax
  10096b:	66 90                	xchg   %ax,%ax
  10096d:	66 90                	xchg   %ax,%ax
  10096f:	66 90                	xchg   %ax,%ax
  100971:	66 90                	xchg   %ax,%ax
  100973:	66 90                	xchg   %ax,%ax
  100975:	66 90                	xchg   %ax,%ax
  100977:	66 90                	xchg   %ax,%ax
  100979:	66 90                	xchg   %ax,%ax
  10097b:	66 90                	xchg   %ax,%ax
  10097d:	66 90                	xchg   %ax,%ax
  10097f:	66 90                	xchg   %ax,%ax
  100981:	66 90                	xchg   %ax,%ax
  100983:	66 90                	xchg   %ax,%ax
  100985:	66 90                	xchg   %ax,%ax
  100987:	66 90                	xchg   %ax,%ax
  100989:	66 90                	xchg   %ax,%ax
  10098b:	66 90                	xchg   %ax,%ax
  10098d:	66 90                	xchg   %ax,%ax
  10098f:	66 90                	xchg   %ax,%ax
  100991:	66 90                	xchg   %ax,%ax
  100993:	66 90                	xchg   %ax,%ax
  100995:	66 90                	xchg   %ax,%ax
  100997:	66 90                	xchg   %ax,%ax
  100999:	66 90                	xchg   %ax,%ax
  10099b:	66 90                	xchg   %ax,%ax
  10099d:	66 90                	xchg   %ax,%ax
  10099f:	66 90                	xchg   %ax,%ax
  1009a1:	66 90                	xchg   %ax,%ax
  1009a3:	66 90                	xchg   %ax,%ax
  1009a5:	66 90                	xchg   %ax,%ax
  1009a7:	66 90                	xchg   %ax,%ax
  1009a9:	66 90                	xchg   %ax,%ax
  1009ab:	66 90                	xchg   %ax,%ax
  1009ad:	66 90                	xchg   %ax,%ax
  1009af:	66 90                	xchg   %ax,%ax
  1009b1:	66 90                	xchg   %ax,%ax
  1009b3:	66 90                	xchg   %ax,%ax
  1009b5:	66 90                	xchg   %ax,%ax
  1009b7:	66 90                	xchg   %ax,%ax
  1009b9:	66 90                	xchg   %ax,%ax
  1009bb:	66 90                	xchg   %ax,%ax
  1009bd:	66 90                	xchg   %ax,%ax
  1009bf:	66 90                	xchg   %ax,%ax
  1009c1:	66 90                	xchg   %ax,%ax
  1009c3:	66 90                	xchg   %ax,%ax
  1009c5:	66 90                	xchg   %ax,%ax
  1009c7:	66 90                	xchg   %ax,%ax
  1009c9:	66 90                	xchg   %ax,%ax
  1009cb:	66 90                	xchg   %ax,%ax
  1009cd:	66 90                	xchg   %ax,%ax
  1009cf:	66 90                	xchg   %ax,%ax
  1009d1:	66 90                	xchg   %ax,%ax
  1009d3:	66 90                	xchg   %ax,%ax
  1009d5:	66 90                	xchg   %ax,%ax
  1009d7:	66 90                	xchg   %ax,%ax
  1009d9:	66 90                	xchg   %ax,%ax
  1009db:	66 90                	xchg   %ax,%ax
  1009dd:	66 90                	xchg   %ax,%ax
  1009df:	66 90                	xchg   %ax,%ax
  1009e1:	66 90                	xchg   %ax,%ax
  1009e3:	66 90                	xchg   %ax,%ax
  1009e5:	66 90                	xchg   %ax,%ax
  1009e7:	66 90                	xchg   %ax,%ax
  1009e9:	66 90                	xchg   %ax,%ax
  1009eb:	66 90                	xchg   %ax,%ax
  1009ed:	66 90                	xchg   %ax,%ax
  1009ef:	66 90                	xchg   %ax,%ax
  1009f1:	66 90                	xchg   %ax,%ax
  1009f3:	66 90                	xchg   %ax,%ax
  1009f5:	66 90                	xchg   %ax,%ax
  1009f7:	66 90                	xchg   %ax,%ax
  1009f9:	66 90                	xchg   %ax,%ax
  1009fb:	66 90                	xchg   %ax,%ax
  1009fd:	66 90                	xchg   %ax,%ax
  1009ff:	66 90                	xchg   %ax,%ax
  100a01:	66 90                	xchg   %ax,%ax
  100a03:	66 90                	xchg   %ax,%ax
  100a05:	66 90                	xchg   %ax,%ax
  100a07:	66 90                	xchg   %ax,%ax
  100a09:	66 90                	xchg   %ax,%ax
  100a0b:	66 90                	xchg   %ax,%ax
  100a0d:	66 90                	xchg   %ax,%ax
  100a0f:	66 90                	xchg   %ax,%ax
  100a11:	66 90                	xchg   %ax,%ax
  100a13:	66 90                	xchg   %ax,%ax
  100a15:	66 90                	xchg   %ax,%ax
  100a17:	66 90                	xchg   %ax,%ax
  100a19:	66 90                	xchg   %ax,%ax
  100a1b:	66 90                	xchg   %ax,%ax
  100a1d:	66 90                	xchg   %ax,%ax
  100a1f:	66 90                	xchg   %ax,%ax
  100a21:	66 90                	xchg   %ax,%ax
  100a23:	66 90                	xchg   %ax,%ax
  100a25:	66 90                	xchg   %ax,%ax
  100a27:	66 90                	xchg   %ax,%ax
  100a29:	66 90                	xchg   %ax,%ax
  100a2b:	66 90                	xchg   %ax,%ax
  100a2d:	66 90                	xchg   %ax,%ax
  100a2f:	66 90                	xchg   %ax,%ax
  100a31:	66 90                	xchg   %ax,%ax
  100a33:	66 90                	xchg   %ax,%ax
  100a35:	66 90                	xchg   %ax,%ax
  100a37:	66 90                	xchg   %ax,%ax
  100a39:	66 90                	xchg   %ax,%ax
  100a3b:	66 90                	xchg   %ax,%ax
  100a3d:	66 90                	xchg   %ax,%ax
  100a3f:	66 90                	xchg   %ax,%ax
  100a41:	66 90                	xchg   %ax,%ax
  100a43:	66 90                	xchg   %ax,%ax
  100a45:	66 90                	xchg   %ax,%ax
  100a47:	66 90                	xchg   %ax,%ax
  100a49:	66 90                	xchg   %ax,%ax
  100a4b:	66 90                	xchg   %ax,%ax
  100a4d:	66 90                	xchg   %ax,%ax
  100a4f:	66 90                	xchg   %ax,%ax
  100a51:	66 90                	xchg   %ax,%ax
  100a53:	66 90                	xchg   %ax,%ax
  100a55:	66 90                	xchg   %ax,%ax
  100a57:	66 90                	xchg   %ax,%ax
  100a59:	66 90                	xchg   %ax,%ax
  100a5b:	66 90                	xchg   %ax,%ax
  100a5d:	66 90                	xchg   %ax,%ax
  100a5f:	66 90                	xchg   %ax,%ax
  100a61:	66 90                	xchg   %ax,%ax
  100a63:	66 90                	xchg   %ax,%ax
  100a65:	66 90                	xchg   %ax,%ax
  100a67:	66 90                	xchg   %ax,%ax
  100a69:	66 90                	xchg   %ax,%ax
  100a6b:	66 90                	xchg   %ax,%ax
  100a6d:	66 90                	xchg   %ax,%ax
  100a6f:	66 90                	xchg   %ax,%ax
  100a71:	66 90                	xchg   %ax,%ax
  100a73:	66 90                	xchg   %ax,%ax
  100a75:	66 90                	xchg   %ax,%ax
  100a77:	66 90                	xchg   %ax,%ax
  100a79:	66 90                	xchg   %ax,%ax
  100a7b:	66 90                	xchg   %ax,%ax
  100a7d:	66 90                	xchg   %ax,%ax
  100a7f:	66 90                	xchg   %ax,%ax
  100a81:	66 90                	xchg   %ax,%ax
  100a83:	66 90                	xchg   %ax,%ax
  100a85:	66 90                	xchg   %ax,%ax
  100a87:	66 90                	xchg   %ax,%ax
  100a89:	66 90                	xchg   %ax,%ax
  100a8b:	66 90                	xchg   %ax,%ax
  100a8d:	66 90                	xchg   %ax,%ax
  100a8f:	66 90                	xchg   %ax,%ax
  100a91:	66 90                	xchg   %ax,%ax
  100a93:	66 90                	xchg   %ax,%ax
  100a95:	66 90                	xchg   %ax,%ax
  100a97:	66 90                	xchg   %ax,%ax
  100a99:	66 90                	xchg   %ax,%ax
  100a9b:	66 90                	xchg   %ax,%ax
  100a9d:	66 90                	xchg   %ax,%ax
  100a9f:	66 90                	xchg   %ax,%ax
  100aa1:	66 90                	xchg   %ax,%ax
  100aa3:	66 90                	xchg   %ax,%ax
  100aa5:	66 90                	xchg   %ax,%ax
  100aa7:	66 90                	xchg   %ax,%ax
  100aa9:	66 90                	xchg   %ax,%ax
  100aab:	66 90                	xchg   %ax,%ax
  100aad:	66 90                	xchg   %ax,%ax
  100aaf:	66 90                	xchg   %ax,%ax
  100ab1:	66 90                	xchg   %ax,%ax
  100ab3:	66 90                	xchg   %ax,%ax
  100ab5:	66 90                	xchg   %ax,%ax
  100ab7:	66 90                	xchg   %ax,%ax
  100ab9:	66 90                	xchg   %ax,%ax
  100abb:	66 90                	xchg   %ax,%ax
  100abd:	66 90                	xchg   %ax,%ax
  100abf:	66 90                	xchg   %ax,%ax
  100ac1:	66 90                	xchg   %ax,%ax
  100ac3:	66 90                	xchg   %ax,%ax
  100ac5:	66 90                	xchg   %ax,%ax
  100ac7:	66 90                	xchg   %ax,%ax
  100ac9:	66 90                	xchg   %ax,%ax
  100acb:	66 90                	xchg   %ax,%ax
  100acd:	66 90                	xchg   %ax,%ax
  100acf:	66 90                	xchg   %ax,%ax
  100ad1:	66 90                	xchg   %ax,%ax
  100ad3:	66 90                	xchg   %ax,%ax
  100ad5:	66 90                	xchg   %ax,%ax
  100ad7:	66 90                	xchg   %ax,%ax
  100ad9:	66 90                	xchg   %ax,%ax
  100adb:	66 90                	xchg   %ax,%ax
  100add:	66 90                	xchg   %ax,%ax
  100adf:	66 90                	xchg   %ax,%ax
  100ae1:	66 90                	xchg   %ax,%ax
  100ae3:	66 90                	xchg   %ax,%ax
  100ae5:	66 90                	xchg   %ax,%ax
  100ae7:	66 90                	xchg   %ax,%ax
  100ae9:	66 90                	xchg   %ax,%ax
  100aeb:	66 90                	xchg   %ax,%ax
  100aed:	66 90                	xchg   %ax,%ax
  100aef:	66 90                	xchg   %ax,%ax
  100af1:	66 90                	xchg   %ax,%ax
  100af3:	66 90                	xchg   %ax,%ax
  100af5:	66 90                	xchg   %ax,%ax
  100af7:	66 90                	xchg   %ax,%ax
  100af9:	66 90                	xchg   %ax,%ax
  100afb:	66 90                	xchg   %ax,%ax
  100afd:	66 90                	xchg   %ax,%ax
  100aff:	66 90                	xchg   %ax,%ax
  100b01:	66 90                	xchg   %ax,%ax
  100b03:	66 90                	xchg   %ax,%ax
  100b05:	66 90                	xchg   %ax,%ax
  100b07:	66 90                	xchg   %ax,%ax
  100b09:	66 90                	xchg   %ax,%ax
  100b0b:	66 90                	xchg   %ax,%ax
  100b0d:	66 90                	xchg   %ax,%ax
  100b0f:	66 90                	xchg   %ax,%ax
  100b11:	66 90                	xchg   %ax,%ax
  100b13:	66 90                	xchg   %ax,%ax
  100b15:	66 90                	xchg   %ax,%ax
  100b17:	66 90                	xchg   %ax,%ax
  100b19:	66 90                	xchg   %ax,%ax
  100b1b:	66 90                	xchg   %ax,%ax
  100b1d:	66 90                	xchg   %ax,%ax
  100b1f:	66 90                	xchg   %ax,%ax
  100b21:	66 90                	xchg   %ax,%ax
  100b23:	66 90                	xchg   %ax,%ax
  100b25:	66 90                	xchg   %ax,%ax
  100b27:	66 90                	xchg   %ax,%ax
  100b29:	66 90                	xchg   %ax,%ax
  100b2b:	66 90                	xchg   %ax,%ax
  100b2d:	66 90                	xchg   %ax,%ax
  100b2f:	66 90                	xchg   %ax,%ax
  100b31:	66 90                	xchg   %ax,%ax
  100b33:	66 90                	xchg   %ax,%ax
  100b35:	66 90                	xchg   %ax,%ax
  100b37:	66 90                	xchg   %ax,%ax
  100b39:	66 90                	xchg   %ax,%ax
  100b3b:	66 90                	xchg   %ax,%ax
  100b3d:	66 90                	xchg   %ax,%ax
  100b3f:	66 90                	xchg   %ax,%ax
  100b41:	66 90                	xchg   %ax,%ax
  100b43:	66 90                	xchg   %ax,%ax
  100b45:	66 90                	xchg   %ax,%ax
  100b47:	66 90                	xchg   %ax,%ax
  100b49:	66 90                	xchg   %ax,%ax
  100b4b:	66 90                	xchg   %ax,%ax
  100b4d:	66 90                	xchg   %ax,%ax
  100b4f:	66 90                	xchg   %ax,%ax
  100b51:	66 90                	xchg   %ax,%ax
  100b53:	66 90                	xchg   %ax,%ax
  100b55:	66 90                	xchg   %ax,%ax
  100b57:	66 90                	xchg   %ax,%ax
  100b59:	66 90                	xchg   %ax,%ax
  100b5b:	66 90                	xchg   %ax,%ax
  100b5d:	66 90                	xchg   %ax,%ax
  100b5f:	66 90                	xchg   %ax,%ax
  100b61:	66 90                	xchg   %ax,%ax
  100b63:	66 90                	xchg   %ax,%ax
  100b65:	66 90                	xchg   %ax,%ax
  100b67:	66 90                	xchg   %ax,%ax
  100b69:	66 90                	xchg   %ax,%ax
  100b6b:	66 90                	xchg   %ax,%ax
  100b6d:	66 90                	xchg   %ax,%ax
  100b6f:	66 90                	xchg   %ax,%ax
  100b71:	66 90                	xchg   %ax,%ax
  100b73:	66 90                	xchg   %ax,%ax
  100b75:	66 90                	xchg   %ax,%ax
  100b77:	66 90                	xchg   %ax,%ax
  100b79:	66 90                	xchg   %ax,%ax
  100b7b:	66 90                	xchg   %ax,%ax
  100b7d:	66 90                	xchg   %ax,%ax
  100b7f:	66 90                	xchg   %ax,%ax
  100b81:	66 90                	xchg   %ax,%ax
  100b83:	66 90                	xchg   %ax,%ax
  100b85:	66 90                	xchg   %ax,%ax
  100b87:	66 90                	xchg   %ax,%ax
  100b89:	66 90                	xchg   %ax,%ax
  100b8b:	66 90                	xchg   %ax,%ax
  100b8d:	66 90                	xchg   %ax,%ax
  100b8f:	66 90                	xchg   %ax,%ax
  100b91:	66 90                	xchg   %ax,%ax
  100b93:	66 90                	xchg   %ax,%ax
  100b95:	66 90                	xchg   %ax,%ax
  100b97:	66 90                	xchg   %ax,%ax
  100b99:	66 90                	xchg   %ax,%ax
  100b9b:	66 90                	xchg   %ax,%ax
  100b9d:	66 90                	xchg   %ax,%ax
  100b9f:	66 90                	xchg   %ax,%ax
  100ba1:	66 90                	xchg   %ax,%ax
  100ba3:	66 90                	xchg   %ax,%ax
  100ba5:	66 90                	xchg   %ax,%ax
  100ba7:	66 90                	xchg   %ax,%ax
  100ba9:	66 90                	xchg   %ax,%ax
  100bab:	66 90                	xchg   %ax,%ax
  100bad:	66 90                	xchg   %ax,%ax
  100baf:	66 90                	xchg   %ax,%ax
  100bb1:	66 90                	xchg   %ax,%ax
  100bb3:	66 90                	xchg   %ax,%ax
  100bb5:	66 90                	xchg   %ax,%ax
  100bb7:	66 90                	xchg   %ax,%ax
  100bb9:	66 90                	xchg   %ax,%ax
  100bbb:	66 90                	xchg   %ax,%ax
  100bbd:	66 90                	xchg   %ax,%ax
  100bbf:	66 90                	xchg   %ax,%ax
  100bc1:	66 90                	xchg   %ax,%ax
  100bc3:	66 90                	xchg   %ax,%ax
  100bc5:	66 90                	xchg   %ax,%ax
  100bc7:	66 90                	xchg   %ax,%ax
  100bc9:	66 90                	xchg   %ax,%ax
  100bcb:	66 90                	xchg   %ax,%ax
  100bcd:	66 90                	xchg   %ax,%ax
  100bcf:	66 90                	xchg   %ax,%ax
  100bd1:	66 90                	xchg   %ax,%ax
  100bd3:	66 90                	xchg   %ax,%ax
  100bd5:	66 90                	xchg   %ax,%ax
  100bd7:	66 90                	xchg   %ax,%ax
  100bd9:	66 90                	xchg   %ax,%ax
  100bdb:	66 90                	xchg   %ax,%ax
  100bdd:	66 90                	xchg   %ax,%ax
  100bdf:	66 90                	xchg   %ax,%ax
  100be1:	66 90                	xchg   %ax,%ax
  100be3:	66 90                	xchg   %ax,%ax
  100be5:	66 90                	xchg   %ax,%ax
  100be7:	66 90                	xchg   %ax,%ax
  100be9:	66 90                	xchg   %ax,%ax
  100beb:	66 90                	xchg   %ax,%ax
  100bed:	66 90                	xchg   %ax,%ax
  100bef:	66 90                	xchg   %ax,%ax
  100bf1:	66 90                	xchg   %ax,%ax
  100bf3:	66 90                	xchg   %ax,%ax
  100bf5:	66 90                	xchg   %ax,%ax
  100bf7:	66 90                	xchg   %ax,%ax
  100bf9:	66 90                	xchg   %ax,%ax
  100bfb:	66 90                	xchg   %ax,%ax
  100bfd:	66 90                	xchg   %ax,%ax
  100bff:	66 90                	xchg   %ax,%ax
  100c01:	66 90                	xchg   %ax,%ax
  100c03:	66 90                	xchg   %ax,%ax
  100c05:	66 90                	xchg   %ax,%ax
  100c07:	66 90                	xchg   %ax,%ax
  100c09:	66 90                	xchg   %ax,%ax
  100c0b:	66 90                	xchg   %ax,%ax
  100c0d:	66 90                	xchg   %ax,%ax
  100c0f:	66 90                	xchg   %ax,%ax
  100c11:	66 90                	xchg   %ax,%ax
  100c13:	66 90                	xchg   %ax,%ax
  100c15:	66 90                	xchg   %ax,%ax
  100c17:	66 90                	xchg   %ax,%ax
  100c19:	66 90                	xchg   %ax,%ax
  100c1b:	66 90                	xchg   %ax,%ax
  100c1d:	66 90                	xchg   %ax,%ax
  100c1f:	66 90                	xchg   %ax,%ax
  100c21:	66 90                	xchg   %ax,%ax
  100c23:	66 90                	xchg   %ax,%ax
  100c25:	66 90                	xchg   %ax,%ax
  100c27:	66 90                	xchg   %ax,%ax
  100c29:	66 90                	xchg   %ax,%ax
  100c2b:	66 90                	xchg   %ax,%ax
  100c2d:	66 90                	xchg   %ax,%ax
  100c2f:	66 90                	xchg   %ax,%ax
  100c31:	66 90                	xchg   %ax,%ax
  100c33:	66 90                	xchg   %ax,%ax
  100c35:	66 90                	xchg   %ax,%ax
  100c37:	66 90                	xchg   %ax,%ax
  100c39:	66 90                	xchg   %ax,%ax
  100c3b:	66 90                	xchg   %ax,%ax
  100c3d:	66 90                	xchg   %ax,%ax
  100c3f:	66 90                	xchg   %ax,%ax
  100c41:	66 90                	xchg   %ax,%ax
  100c43:	66 90                	xchg   %ax,%ax
  100c45:	66 90                	xchg   %ax,%ax
  100c47:	66 90                	xchg   %ax,%ax
  100c49:	66 90                	xchg   %ax,%ax
  100c4b:	66 90                	xchg   %ax,%ax
  100c4d:	66 90                	xchg   %ax,%ax
  100c4f:	66 90                	xchg   %ax,%ax
  100c51:	66 90                	xchg   %ax,%ax
  100c53:	66 90                	xchg   %ax,%ax
  100c55:	66 90                	xchg   %ax,%ax
  100c57:	66 90                	xchg   %ax,%ax
  100c59:	66 90                	xchg   %ax,%ax
  100c5b:	66 90                	xchg   %ax,%ax
  100c5d:	66 90                	xchg   %ax,%ax
  100c5f:	66 90                	xchg   %ax,%ax
  100c61:	66 90                	xchg   %ax,%ax
  100c63:	66 90                	xchg   %ax,%ax
  100c65:	66 90                	xchg   %ax,%ax
  100c67:	66 90                	xchg   %ax,%ax
  100c69:	66 90                	xchg   %ax,%ax
  100c6b:	66 90                	xchg   %ax,%ax
  100c6d:	66 90                	xchg   %ax,%ax
  100c6f:	66 90                	xchg   %ax,%ax
  100c71:	66 90                	xchg   %ax,%ax
  100c73:	66 90                	xchg   %ax,%ax
  100c75:	66 90                	xchg   %ax,%ax
  100c77:	66 90                	xchg   %ax,%ax
  100c79:	66 90                	xchg   %ax,%ax
  100c7b:	66 90                	xchg   %ax,%ax
  100c7d:	66 90                	xchg   %ax,%ax
  100c7f:	66 90                	xchg   %ax,%ax
  100c81:	66 90                	xchg   %ax,%ax
  100c83:	66 90                	xchg   %ax,%ax
  100c85:	66 90                	xchg   %ax,%ax
  100c87:	66 90                	xchg   %ax,%ax
  100c89:	66 90                	xchg   %ax,%ax
  100c8b:	66 90                	xchg   %ax,%ax
  100c8d:	66 90                	xchg   %ax,%ax
  100c8f:	66 90                	xchg   %ax,%ax
  100c91:	66 90                	xchg   %ax,%ax
  100c93:	66 90                	xchg   %ax,%ax
  100c95:	66 90                	xchg   %ax,%ax
  100c97:	66 90                	xchg   %ax,%ax
  100c99:	66 90                	xchg   %ax,%ax
  100c9b:	66 90                	xchg   %ax,%ax
  100c9d:	66 90                	xchg   %ax,%ax
  100c9f:	66 90                	xchg   %ax,%ax
  100ca1:	66 90                	xchg   %ax,%ax
  100ca3:	66 90                	xchg   %ax,%ax
  100ca5:	66 90                	xchg   %ax,%ax
  100ca7:	66 90                	xchg   %ax,%ax
  100ca9:	66 90                	xchg   %ax,%ax
  100cab:	66 90                	xchg   %ax,%ax
  100cad:	66 90                	xchg   %ax,%ax
  100caf:	66 90                	xchg   %ax,%ax
  100cb1:	66 90                	xchg   %ax,%ax
  100cb3:	66 90                	xchg   %ax,%ax
  100cb5:	66 90                	xchg   %ax,%ax
  100cb7:	66 90                	xchg   %ax,%ax
  100cb9:	66 90                	xchg   %ax,%ax
  100cbb:	66 90                	xchg   %ax,%ax
  100cbd:	66 90                	xchg   %ax,%ax
  100cbf:	66 90                	xchg   %ax,%ax
  100cc1:	66 90                	xchg   %ax,%ax
  100cc3:	66 90                	xchg   %ax,%ax
  100cc5:	66 90                	xchg   %ax,%ax
  100cc7:	66 90                	xchg   %ax,%ax
  100cc9:	66 90                	xchg   %ax,%ax
  100ccb:	66 90                	xchg   %ax,%ax
  100ccd:	66 90                	xchg   %ax,%ax
  100ccf:	66 90                	xchg   %ax,%ax
  100cd1:	66 90                	xchg   %ax,%ax
  100cd3:	66 90                	xchg   %ax,%ax
  100cd5:	66 90                	xchg   %ax,%ax
  100cd7:	66 90                	xchg   %ax,%ax
  100cd9:	66 90                	xchg   %ax,%ax
  100cdb:	66 90                	xchg   %ax,%ax
  100cdd:	66 90                	xchg   %ax,%ax
  100cdf:	66 90                	xchg   %ax,%ax
  100ce1:	66 90                	xchg   %ax,%ax
  100ce3:	66 90                	xchg   %ax,%ax
  100ce5:	66 90                	xchg   %ax,%ax
  100ce7:	66 90                	xchg   %ax,%ax
  100ce9:	66 90                	xchg   %ax,%ax
  100ceb:	66 90                	xchg   %ax,%ax
  100ced:	66 90                	xchg   %ax,%ax
  100cef:	66 90                	xchg   %ax,%ax
  100cf1:	66 90                	xchg   %ax,%ax
  100cf3:	66 90                	xchg   %ax,%ax
  100cf5:	66 90                	xchg   %ax,%ax
  100cf7:	66 90                	xchg   %ax,%ax
  100cf9:	66 90                	xchg   %ax,%ax
  100cfb:	66 90                	xchg   %ax,%ax
  100cfd:	66 90                	xchg   %ax,%ax
  100cff:	66 90                	xchg   %ax,%ax
  100d01:	66 90                	xchg   %ax,%ax
  100d03:	66 90                	xchg   %ax,%ax
  100d05:	66 90                	xchg   %ax,%ax
  100d07:	66 90                	xchg   %ax,%ax
  100d09:	66 90                	xchg   %ax,%ax
  100d0b:	66 90                	xchg   %ax,%ax
  100d0d:	66 90                	xchg   %ax,%ax
  100d0f:	66 90                	xchg   %ax,%ax
  100d11:	66 90                	xchg   %ax,%ax
  100d13:	66 90                	xchg   %ax,%ax
  100d15:	66 90                	xchg   %ax,%ax
  100d17:	66 90                	xchg   %ax,%ax
  100d19:	66 90                	xchg   %ax,%ax
  100d1b:	66 90                	xchg   %ax,%ax
  100d1d:	66 90                	xchg   %ax,%ax
  100d1f:	66 90                	xchg   %ax,%ax
  100d21:	66 90                	xchg   %ax,%ax
  100d23:	66 90                	xchg   %ax,%ax
  100d25:	66 90                	xchg   %ax,%ax
  100d27:	66 90                	xchg   %ax,%ax
  100d29:	66 90                	xchg   %ax,%ax
  100d2b:	66 90                	xchg   %ax,%ax
  100d2d:	66 90                	xchg   %ax,%ax
  100d2f:	66 90                	xchg   %ax,%ax
  100d31:	66 90                	xchg   %ax,%ax
  100d33:	66 90                	xchg   %ax,%ax
  100d35:	66 90                	xchg   %ax,%ax
  100d37:	66 90                	xchg   %ax,%ax
  100d39:	66 90                	xchg   %ax,%ax
  100d3b:	66 90                	xchg   %ax,%ax
  100d3d:	66 90                	xchg   %ax,%ax
  100d3f:	66 90                	xchg   %ax,%ax
  100d41:	66 90                	xchg   %ax,%ax
  100d43:	66 90                	xchg   %ax,%ax
  100d45:	66 90                	xchg   %ax,%ax
  100d47:	66 90                	xchg   %ax,%ax
  100d49:	66 90                	xchg   %ax,%ax
  100d4b:	66 90                	xchg   %ax,%ax
  100d4d:	66 90                	xchg   %ax,%ax
  100d4f:	66 90                	xchg   %ax,%ax
  100d51:	66 90                	xchg   %ax,%ax
  100d53:	66 90                	xchg   %ax,%ax
  100d55:	66 90                	xchg   %ax,%ax
  100d57:	66 90                	xchg   %ax,%ax
  100d59:	66 90                	xchg   %ax,%ax
  100d5b:	66 90                	xchg   %ax,%ax
  100d5d:	66 90                	xchg   %ax,%ax
  100d5f:	66 90                	xchg   %ax,%ax
  100d61:	66 90                	xchg   %ax,%ax
  100d63:	66 90                	xchg   %ax,%ax
  100d65:	66 90                	xchg   %ax,%ax
  100d67:	66 90                	xchg   %ax,%ax
  100d69:	66 90                	xchg   %ax,%ax
  100d6b:	66 90                	xchg   %ax,%ax
  100d6d:	66 90                	xchg   %ax,%ax
  100d6f:	66 90                	xchg   %ax,%ax
  100d71:	66 90                	xchg   %ax,%ax
  100d73:	66 90                	xchg   %ax,%ax
  100d75:	66 90                	xchg   %ax,%ax
  100d77:	66 90                	xchg   %ax,%ax
  100d79:	66 90                	xchg   %ax,%ax
  100d7b:	66 90                	xchg   %ax,%ax
  100d7d:	66 90                	xchg   %ax,%ax
  100d7f:	66 90                	xchg   %ax,%ax
  100d81:	66 90                	xchg   %ax,%ax
  100d83:	66 90                	xchg   %ax,%ax
  100d85:	66 90                	xchg   %ax,%ax
  100d87:	66 90                	xchg   %ax,%ax
  100d89:	66 90                	xchg   %ax,%ax
  100d8b:	66 90                	xchg   %ax,%ax
  100d8d:	66 90                	xchg   %ax,%ax
  100d8f:	66 90                	xchg   %ax,%ax
  100d91:	66 90                	xchg   %ax,%ax
  100d93:	66 90                	xchg   %ax,%ax
  100d95:	66 90                	xchg   %ax,%ax
  100d97:	66 90                	xchg   %ax,%ax
  100d99:	66 90                	xchg   %ax,%ax
  100d9b:	66 90                	xchg   %ax,%ax
  100d9d:	66 90                	xchg   %ax,%ax
  100d9f:	66 90                	xchg   %ax,%ax
  100da1:	66 90                	xchg   %ax,%ax
  100da3:	66 90                	xchg   %ax,%ax
  100da5:	66 90                	xchg   %ax,%ax
  100da7:	66 90                	xchg   %ax,%ax
  100da9:	66 90                	xchg   %ax,%ax
  100dab:	66 90                	xchg   %ax,%ax
  100dad:	66 90                	xchg   %ax,%ax
  100daf:	66 90                	xchg   %ax,%ax
  100db1:	66 90                	xchg   %ax,%ax
  100db3:	66 90                	xchg   %ax,%ax
  100db5:	66 90                	xchg   %ax,%ax
  100db7:	66 90                	xchg   %ax,%ax
  100db9:	66 90                	xchg   %ax,%ax
  100dbb:	66 90                	xchg   %ax,%ax
  100dbd:	66 90                	xchg   %ax,%ax
  100dbf:	66 90                	xchg   %ax,%ax
  100dc1:	66 90                	xchg   %ax,%ax
  100dc3:	66 90                	xchg   %ax,%ax
  100dc5:	66 90                	xchg   %ax,%ax
  100dc7:	66 90                	xchg   %ax,%ax
  100dc9:	66 90                	xchg   %ax,%ax
  100dcb:	66 90                	xchg   %ax,%ax
  100dcd:	66 90                	xchg   %ax,%ax
  100dcf:	66 90                	xchg   %ax,%ax
  100dd1:	66 90                	xchg   %ax,%ax
  100dd3:	66 90                	xchg   %ax,%ax
  100dd5:	66 90                	xchg   %ax,%ax
  100dd7:	66 90                	xchg   %ax,%ax
  100dd9:	66 90                	xchg   %ax,%ax
  100ddb:	66 90                	xchg   %ax,%ax
  100ddd:	66 90                	xchg   %ax,%ax
  100ddf:	66 90                	xchg   %ax,%ax
  100de1:	66 90                	xchg   %ax,%ax
  100de3:	66 90                	xchg   %ax,%ax
  100de5:	66 90                	xchg   %ax,%ax
  100de7:	66 90                	xchg   %ax,%ax
  100de9:	66 90                	xchg   %ax,%ax
  100deb:	66 90                	xchg   %ax,%ax
  100ded:	66 90                	xchg   %ax,%ax
  100def:	66 90                	xchg   %ax,%ax
  100df1:	66 90                	xchg   %ax,%ax
  100df3:	66 90                	xchg   %ax,%ax
  100df5:	66 90                	xchg   %ax,%ax
  100df7:	66 90                	xchg   %ax,%ax
  100df9:	66 90                	xchg   %ax,%ax
  100dfb:	66 90                	xchg   %ax,%ax
  100dfd:	66 90                	xchg   %ax,%ax
  100dff:	66 90                	xchg   %ax,%ax
  100e01:	66 90                	xchg   %ax,%ax
  100e03:	66 90                	xchg   %ax,%ax
  100e05:	66 90                	xchg   %ax,%ax
  100e07:	66 90                	xchg   %ax,%ax
  100e09:	66 90                	xchg   %ax,%ax
  100e0b:	66 90                	xchg   %ax,%ax
  100e0d:	66 90                	xchg   %ax,%ax
  100e0f:	66 90                	xchg   %ax,%ax
  100e11:	66 90                	xchg   %ax,%ax
  100e13:	66 90                	xchg   %ax,%ax
  100e15:	66 90                	xchg   %ax,%ax
  100e17:	66 90                	xchg   %ax,%ax
  100e19:	66 90                	xchg   %ax,%ax
  100e1b:	66 90                	xchg   %ax,%ax
  100e1d:	66 90                	xchg   %ax,%ax
  100e1f:	66 90                	xchg   %ax,%ax
  100e21:	66 90                	xchg   %ax,%ax
  100e23:	66 90                	xchg   %ax,%ax
  100e25:	66 90                	xchg   %ax,%ax
  100e27:	66 90                	xchg   %ax,%ax
  100e29:	66 90                	xchg   %ax,%ax
  100e2b:	66 90                	xchg   %ax,%ax
  100e2d:	66 90                	xchg   %ax,%ax
  100e2f:	66 90                	xchg   %ax,%ax
  100e31:	66 90                	xchg   %ax,%ax
  100e33:	66 90                	xchg   %ax,%ax
  100e35:	66 90                	xchg   %ax,%ax
  100e37:	66 90                	xchg   %ax,%ax
  100e39:	66 90                	xchg   %ax,%ax
  100e3b:	66 90                	xchg   %ax,%ax
  100e3d:	66 90                	xchg   %ax,%ax
  100e3f:	66 90                	xchg   %ax,%ax
  100e41:	66 90                	xchg   %ax,%ax
  100e43:	66 90                	xchg   %ax,%ax
  100e45:	66 90                	xchg   %ax,%ax
  100e47:	66 90                	xchg   %ax,%ax
  100e49:	66 90                	xchg   %ax,%ax
  100e4b:	66 90                	xchg   %ax,%ax
  100e4d:	66 90                	xchg   %ax,%ax
  100e4f:	66 90                	xchg   %ax,%ax
  100e51:	66 90                	xchg   %ax,%ax
  100e53:	66 90                	xchg   %ax,%ax
  100e55:	66 90                	xchg   %ax,%ax
  100e57:	66 90                	xchg   %ax,%ax
  100e59:	66 90                	xchg   %ax,%ax
  100e5b:	66 90                	xchg   %ax,%ax
  100e5d:	66 90                	xchg   %ax,%ax
  100e5f:	66 90                	xchg   %ax,%ax
  100e61:	66 90                	xchg   %ax,%ax
  100e63:	66 90                	xchg   %ax,%ax
  100e65:	66 90                	xchg   %ax,%ax
  100e67:	66 90                	xchg   %ax,%ax
  100e69:	66 90                	xchg   %ax,%ax
  100e6b:	66 90                	xchg   %ax,%ax
  100e6d:	66 90                	xchg   %ax,%ax
  100e6f:	66 90                	xchg   %ax,%ax
  100e71:	66 90                	xchg   %ax,%ax
  100e73:	66 90                	xchg   %ax,%ax
  100e75:	66 90                	xchg   %ax,%ax
  100e77:	66 90                	xchg   %ax,%ax
  100e79:	66 90                	xchg   %ax,%ax
  100e7b:	66 90                	xchg   %ax,%ax
  100e7d:	66 90                	xchg   %ax,%ax
  100e7f:	66 90                	xchg   %ax,%ax
  100e81:	66 90                	xchg   %ax,%ax
  100e83:	66 90                	xchg   %ax,%ax
  100e85:	66 90                	xchg   %ax,%ax
  100e87:	66 90                	xchg   %ax,%ax
  100e89:	66 90                	xchg   %ax,%ax
  100e8b:	66 90                	xchg   %ax,%ax
  100e8d:	66 90                	xchg   %ax,%ax
  100e8f:	66 90                	xchg   %ax,%ax
  100e91:	66 90                	xchg   %ax,%ax
  100e93:	66 90                	xchg   %ax,%ax
  100e95:	66 90                	xchg   %ax,%ax
  100e97:	66 90                	xchg   %ax,%ax
  100e99:	66 90                	xchg   %ax,%ax
  100e9b:	66 90                	xchg   %ax,%ax
  100e9d:	66 90                	xchg   %ax,%ax
  100e9f:	66 90                	xchg   %ax,%ax
  100ea1:	66 90                	xchg   %ax,%ax
  100ea3:	66 90                	xchg   %ax,%ax
  100ea5:	66 90                	xchg   %ax,%ax
  100ea7:	66 90                	xchg   %ax,%ax
  100ea9:	66 90                	xchg   %ax,%ax
  100eab:	66 90                	xchg   %ax,%ax
  100ead:	66 90                	xchg   %ax,%ax
  100eaf:	66 90                	xchg   %ax,%ax
  100eb1:	66 90                	xchg   %ax,%ax
  100eb3:	66 90                	xchg   %ax,%ax
  100eb5:	66 90                	xchg   %ax,%ax
  100eb7:	66 90                	xchg   %ax,%ax
  100eb9:	66 90                	xchg   %ax,%ax
  100ebb:	66 90                	xchg   %ax,%ax
  100ebd:	66 90                	xchg   %ax,%ax
  100ebf:	66 90                	xchg   %ax,%ax
  100ec1:	66 90                	xchg   %ax,%ax
  100ec3:	66 90                	xchg   %ax,%ax
  100ec5:	66 90                	xchg   %ax,%ax
  100ec7:	66 90                	xchg   %ax,%ax
  100ec9:	66 90                	xchg   %ax,%ax
  100ecb:	66 90                	xchg   %ax,%ax
  100ecd:	66 90                	xchg   %ax,%ax
  100ecf:	66 90                	xchg   %ax,%ax
  100ed1:	66 90                	xchg   %ax,%ax
  100ed3:	66 90                	xchg   %ax,%ax
  100ed5:	66 90                	xchg   %ax,%ax
  100ed7:	66 90                	xchg   %ax,%ax
  100ed9:	66 90                	xchg   %ax,%ax
  100edb:	66 90                	xchg   %ax,%ax
  100edd:	66 90                	xchg   %ax,%ax
  100edf:	66 90                	xchg   %ax,%ax
  100ee1:	66 90                	xchg   %ax,%ax
  100ee3:	66 90                	xchg   %ax,%ax
  100ee5:	66 90                	xchg   %ax,%ax
  100ee7:	66 90                	xchg   %ax,%ax
  100ee9:	66 90                	xchg   %ax,%ax
  100eeb:	66 90                	xchg   %ax,%ax
  100eed:	66 90                	xchg   %ax,%ax
  100eef:	66 90                	xchg   %ax,%ax
  100ef1:	66 90                	xchg   %ax,%ax
  100ef3:	66 90                	xchg   %ax,%ax
  100ef5:	66 90                	xchg   %ax,%ax
  100ef7:	66 90                	xchg   %ax,%ax
  100ef9:	66 90                	xchg   %ax,%ax
  100efb:	66 90                	xchg   %ax,%ax
  100efd:	66 90                	xchg   %ax,%ax
  100eff:	66 90                	xchg   %ax,%ax
  100f01:	66 90                	xchg   %ax,%ax
  100f03:	66 90                	xchg   %ax,%ax
  100f05:	66 90                	xchg   %ax,%ax
  100f07:	66 90                	xchg   %ax,%ax
  100f09:	66 90                	xchg   %ax,%ax
  100f0b:	66 90                	xchg   %ax,%ax
  100f0d:	66 90                	xchg   %ax,%ax
  100f0f:	66 90                	xchg   %ax,%ax
  100f11:	66 90                	xchg   %ax,%ax
  100f13:	66 90                	xchg   %ax,%ax
  100f15:	66 90                	xchg   %ax,%ax
  100f17:	66 90                	xchg   %ax,%ax
  100f19:	66 90                	xchg   %ax,%ax
  100f1b:	66 90                	xchg   %ax,%ax
  100f1d:	66 90                	xchg   %ax,%ax
  100f1f:	66 90                	xchg   %ax,%ax
  100f21:	66 90                	xchg   %ax,%ax
  100f23:	66 90                	xchg   %ax,%ax
  100f25:	66 90                	xchg   %ax,%ax
  100f27:	66 90                	xchg   %ax,%ax
  100f29:	66 90                	xchg   %ax,%ax
  100f2b:	66 90                	xchg   %ax,%ax
  100f2d:	66 90                	xchg   %ax,%ax
  100f2f:	66 90                	xchg   %ax,%ax
  100f31:	66 90                	xchg   %ax,%ax
  100f33:	66 90                	xchg   %ax,%ax
  100f35:	66 90                	xchg   %ax,%ax
  100f37:	66 90                	xchg   %ax,%ax
  100f39:	66 90                	xchg   %ax,%ax
  100f3b:	66 90                	xchg   %ax,%ax
  100f3d:	66 90                	xchg   %ax,%ax
  100f3f:	66 90                	xchg   %ax,%ax
  100f41:	66 90                	xchg   %ax,%ax
  100f43:	66 90                	xchg   %ax,%ax
  100f45:	66 90                	xchg   %ax,%ax
  100f47:	66 90                	xchg   %ax,%ax
  100f49:	66 90                	xchg   %ax,%ax
  100f4b:	66 90                	xchg   %ax,%ax
  100f4d:	66 90                	xchg   %ax,%ax
  100f4f:	66 90                	xchg   %ax,%ax
  100f51:	66 90                	xchg   %ax,%ax
  100f53:	66 90                	xchg   %ax,%ax
  100f55:	66 90                	xchg   %ax,%ax
  100f57:	66 90                	xchg   %ax,%ax
  100f59:	66 90                	xchg   %ax,%ax
  100f5b:	66 90                	xchg   %ax,%ax
  100f5d:	66 90                	xchg   %ax,%ax
  100f5f:	66 90                	xchg   %ax,%ax
  100f61:	66 90                	xchg   %ax,%ax
  100f63:	66 90                	xchg   %ax,%ax
  100f65:	66 90                	xchg   %ax,%ax
  100f67:	66 90                	xchg   %ax,%ax
  100f69:	66 90                	xchg   %ax,%ax
  100f6b:	66 90                	xchg   %ax,%ax
  100f6d:	66 90                	xchg   %ax,%ax
  100f6f:	66 90                	xchg   %ax,%ax
  100f71:	66 90                	xchg   %ax,%ax
  100f73:	66 90                	xchg   %ax,%ax
  100f75:	66 90                	xchg   %ax,%ax
  100f77:	66 90                	xchg   %ax,%ax
  100f79:	66 90                	xchg   %ax,%ax
  100f7b:	66 90                	xchg   %ax,%ax
  100f7d:	66 90                	xchg   %ax,%ax
  100f7f:	66 90                	xchg   %ax,%ax
  100f81:	66 90                	xchg   %ax,%ax
  100f83:	66 90                	xchg   %ax,%ax
  100f85:	66 90                	xchg   %ax,%ax
  100f87:	66 90                	xchg   %ax,%ax
  100f89:	66 90                	xchg   %ax,%ax
  100f8b:	66 90                	xchg   %ax,%ax
  100f8d:	66 90                	xchg   %ax,%ax
  100f8f:	66 90                	xchg   %ax,%ax
  100f91:	66 90                	xchg   %ax,%ax
  100f93:	66 90                	xchg   %ax,%ax
  100f95:	66 90                	xchg   %ax,%ax
  100f97:	66 90                	xchg   %ax,%ax
  100f99:	66 90                	xchg   %ax,%ax
  100f9b:	66 90                	xchg   %ax,%ax
  100f9d:	66 90                	xchg   %ax,%ax
  100f9f:	66 90                	xchg   %ax,%ax
  100fa1:	66 90                	xchg   %ax,%ax
  100fa3:	66 90                	xchg   %ax,%ax
  100fa5:	66 90                	xchg   %ax,%ax
  100fa7:	66 90                	xchg   %ax,%ax
  100fa9:	66 90                	xchg   %ax,%ax
  100fab:	66 90                	xchg   %ax,%ax
  100fad:	66 90                	xchg   %ax,%ax
  100faf:	66 90                	xchg   %ax,%ax
  100fb1:	66 90                	xchg   %ax,%ax
  100fb3:	66 90                	xchg   %ax,%ax
  100fb5:	66 90                	xchg   %ax,%ax
  100fb7:	66 90                	xchg   %ax,%ax
  100fb9:	66 90                	xchg   %ax,%ax
  100fbb:	66 90                	xchg   %ax,%ax
  100fbd:	66 90                	xchg   %ax,%ax
  100fbf:	66 90                	xchg   %ax,%ax
  100fc1:	66 90                	xchg   %ax,%ax
  100fc3:	66 90                	xchg   %ax,%ax
  100fc5:	66 90                	xchg   %ax,%ax
  100fc7:	66 90                	xchg   %ax,%ax
  100fc9:	66 90                	xchg   %ax,%ax
  100fcb:	66 90                	xchg   %ax,%ax
  100fcd:	66 90                	xchg   %ax,%ax
  100fcf:	66 90                	xchg   %ax,%ax
  100fd1:	66 90                	xchg   %ax,%ax
  100fd3:	66 90                	xchg   %ax,%ax
  100fd5:	66 90                	xchg   %ax,%ax
  100fd7:	66 90                	xchg   %ax,%ax
  100fd9:	66 90                	xchg   %ax,%ax
  100fdb:	66 90                	xchg   %ax,%ax
  100fdd:	66 90                	xchg   %ax,%ax
  100fdf:	66 90                	xchg   %ax,%ax
  100fe1:	66 90                	xchg   %ax,%ax
  100fe3:	66 90                	xchg   %ax,%ax
  100fe5:	66 90                	xchg   %ax,%ax
  100fe7:	66 90                	xchg   %ax,%ax
  100fe9:	66 90                	xchg   %ax,%ax
  100feb:	66 90                	xchg   %ax,%ax
  100fed:	66 90                	xchg   %ax,%ax
  100fef:	66 90                	xchg   %ax,%ax
  100ff1:	66 90                	xchg   %ax,%ax
  100ff3:	66 90                	xchg   %ax,%ax
  100ff5:	66 90                	xchg   %ax,%ax
  100ff7:	66 90                	xchg   %ax,%ax
  100ff9:	66 90                	xchg   %ax,%ax
  100ffb:	66 90                	xchg   %ax,%ax
  100ffd:	66 90                	xchg   %ax,%ax
  100fff:	90                   	nop

Disassembly of section .text:

c0102000 <idt_flush>:
[GLOBAL idt_flush]
;载入IDTR寄存器
idt_flush:
    mov eax, [esp+4]  ; 参数存入 eax 寄存器
c0102000:	8b 44 24 04          	mov    0x4(%esp),%eax
    lidt [eax]        ; 加载到 IDTR
c0102004:	0f 01 18             	lidtl  (%eax)
    ret
c0102007:	c3                   	ret    
c0102008:	66 90                	xchg   %ax,%ax
c010200a:	66 90                	xchg   %ax,%ax
c010200c:	66 90                	xchg   %ax,%ax
c010200e:	66 90                	xchg   %ax,%ax

c0102010 <gdt_flush>:
global gdt_flush

gdt_flush:
    mov eax, [esp+4]  ; 参数存入 eax 寄存器
c0102010:	8b 44 24 04          	mov    0x4(%esp),%eax
    lgdt [eax]        ; 加载到 GDTR [修改原先GRUB设置]
c0102014:	0f 01 10             	lgdtl  (%eax)

    mov ax, 0x10      ; 加载我们的数据段描述符
c0102017:	66 b8 10 00          	mov    $0x10,%ax
    mov ds, ax        ; 更新所有可以更新的段寄存器
c010201b:	8e d8                	mov    %eax,%ds
    mov es, ax
c010201d:	8e c0                	mov    %eax,%es
    mov fs, ax
c010201f:	8e e0                	mov    %eax,%fs
    mov gs, ax
c0102021:	8e e8                	mov    %eax,%gs
    mov ss, ax
c0102023:	8e d0                	mov    %eax,%ss
    jmp 0x08:.flush   ; 远跳转， 0x08 是我们的代码段描述符
c0102025:	ea 2c 20 10 c0 08 00 	ljmp   $0x8,$0xc010202c

c010202c <gdt_flush.flush>:
              ; 远跳目的是清空流水线并串行化处理器
.flush:
    ret
c010202c:	c3                   	ret    
c010202d:	66 90                	xchg   %ax,%ax
c010202f:	90                   	nop

c0102030 <isr_common_stub>:
[EXTERN isr_handler]
[GLOBAL isr_common_stub]
; 内部中断服务程序
isr_common_stub:
    pusha                    ; Pushes edi, esi, ebp, esp, ebx, edx, ecx, eax
c0102030:	60                   	pusha  
    mov ax, ds
c0102031:	66 8c d8             	mov    %ds,%ax
    push eax                ; 保存数据段描述符
c0102034:	50                   	push   %eax
    
    mov ax, 0x10            ; 加载内核数据段描述符表
c0102035:	66 b8 10 00          	mov    $0x10,%ax
    mov ds, ax
c0102039:	8e d8                	mov    %eax,%ds
    mov es, ax
c010203b:	8e c0                	mov    %eax,%es
    mov fs, ax
c010203d:	8e e0                	mov    %eax,%fs
    mov gs, ax
c010203f:	8e e8                	mov    %eax,%gs
    mov ss, ax
c0102041:	8e d0                	mov    %eax,%ss
    
    push esp        ; 此时的 esp 寄存器的值等价于 pt_regs 结构体的指针
c0102043:	54                   	push   %esp
    call isr_handler        ; 在 C 语言代码里
c0102044:	e8 cf 09 00 00       	call   c0102a18 <isr_handler>
    add esp, 4      ; 清除压入的参数
c0102049:	83 c4 04             	add    $0x4,%esp
    
    pop ebx                 ; 恢复原来的数据段描述符
c010204c:	5b                   	pop    %ebx
    mov ds, bx
c010204d:	8e db                	mov    %ebx,%ds
    mov es, bx
c010204f:	8e c3                	mov    %ebx,%es
    mov fs, bx
c0102051:	8e e3                	mov    %ebx,%fs
    mov gs, bx
c0102053:	8e eb                	mov    %ebx,%gs
    mov ss, bx
c0102055:	8e d3                	mov    %ebx,%ss
    
    popa                     ; Pops edi, esi, ebp, esp, ebx, edx, ecx, eax
c0102057:	61                   	popa   
    add esp, 8               ; 清理栈里的 error code 和 ISR
c0102058:	83 c4 08             	add    $0x8,%esp
    iret
c010205b:	cf                   	iret   

c010205c <irq_common_stub>:

; 外部中断服务程序
[GLOBAL irq_common_stub]
[EXTERN irq_handler]
irq_common_stub:
    pusha                ; pushes edi, esi, ebp, esp, ebx, edx, ecx, eax
c010205c:	60                   	pusha  
    
    mov ax, ds
c010205d:	66 8c d8             	mov    %ds,%ax
    push eax             ; 保存数据段描述符
c0102060:	50                   	push   %eax
    
    mov ax, 0x10         ; 加载内核数据段描述符
c0102061:	66 b8 10 00          	mov    $0x10,%ax
    mov ds, ax
c0102065:	8e d8                	mov    %eax,%ds
    mov es, ax
c0102067:	8e c0                	mov    %eax,%es
    mov fs, ax
c0102069:	8e e0                	mov    %eax,%fs
    mov gs, ax
c010206b:	8e e8                	mov    %eax,%gs
    mov ss, ax
c010206d:	8e d0                	mov    %eax,%ss
    
    push esp
c010206f:	54                   	push   %esp
    call irq_handler
c0102070:	e8 01 0a 00 00       	call   c0102a76 <irq_handler>
    add esp, 4
c0102075:	83 c4 04             	add    $0x4,%esp
    
    pop ebx              ; 恢复原来的数据段描述符
c0102078:	5b                   	pop    %ebx
    mov ds, bx
c0102079:	8e db                	mov    %ebx,%ds
    mov es, bx
c010207b:	8e c3                	mov    %ebx,%es
    mov fs, bx
c010207d:	8e e3                	mov    %ebx,%fs
    mov gs, bx
c010207f:	8e eb                	mov    %ebx,%gs
    mov ss, bx
c0102081:	8e d3                	mov    %ebx,%ss
    
    popa                 ; Pops edi,esi,ebp...
c0102083:	61                   	popa   
    add esp, 8           ; 清理压栈的 错误代码 和 ISR 编号
c0102084:	83 c4 08             	add    $0x8,%esp
    iret                 ; 出栈 CS, EIP, EFLAGS, SS, ESP
c0102087:	cf                   	iret   

c0102088 <isr0>:
    push byte %2
    jmp irq_common_stub
%endmacro

; 定义中断处理函数
ISR_NOERRCODE  0    ; 0 #DE 除 0 异常
c0102088:	fa                   	cli    
c0102089:	6a 00                	push   $0x0
c010208b:	6a 00                	push   $0x0
c010208d:	eb a1                	jmp    c0102030 <isr_common_stub>

c010208f <isr1>:
ISR_NOERRCODE  1    ; 1 #DB 调试异常
c010208f:	fa                   	cli    
c0102090:	6a 00                	push   $0x0
c0102092:	6a 01                	push   $0x1
c0102094:	eb 9a                	jmp    c0102030 <isr_common_stub>

c0102096 <isr2>:
ISR_NOERRCODE  2    ; 2 NMI
c0102096:	fa                   	cli    
c0102097:	6a 00                	push   $0x0
c0102099:	6a 02                	push   $0x2
c010209b:	eb 93                	jmp    c0102030 <isr_common_stub>

c010209d <isr3>:
ISR_NOERRCODE  3    ; 3 BP 断点异常 
c010209d:	fa                   	cli    
c010209e:	6a 00                	push   $0x0
c01020a0:	6a 03                	push   $0x3
c01020a2:	eb 8c                	jmp    c0102030 <isr_common_stub>

c01020a4 <isr4>:
ISR_NOERRCODE  4    ; 4 #OF 溢出 
c01020a4:	fa                   	cli    
c01020a5:	6a 00                	push   $0x0
c01020a7:	6a 04                	push   $0x4
c01020a9:	eb 85                	jmp    c0102030 <isr_common_stub>

c01020ab <isr5>:
ISR_NOERRCODE  5    ; 5 #BR 对数组的引用超出边界 
c01020ab:	fa                   	cli    
c01020ac:	6a 00                	push   $0x0
c01020ae:	6a 05                	push   $0x5
c01020b0:	e9 7b ff ff ff       	jmp    c0102030 <isr_common_stub>

c01020b5 <isr6>:
ISR_NOERRCODE  6    ; 6 #UD 无效或未定义的操作码 
c01020b5:	fa                   	cli    
c01020b6:	6a 00                	push   $0x0
c01020b8:	6a 06                	push   $0x6
c01020ba:	e9 71 ff ff ff       	jmp    c0102030 <isr_common_stub>

c01020bf <isr7>:
ISR_NOERRCODE  7    ; 7 #NM 设备不可用(无数学协处理器) 
c01020bf:	fa                   	cli    
c01020c0:	6a 00                	push   $0x0
c01020c2:	6a 07                	push   $0x7
c01020c4:	e9 67 ff ff ff       	jmp    c0102030 <isr_common_stub>

c01020c9 <isr8>:
ISR_ERRCODE    8    ; 8 #DF 双重故障(有错误代码) 
c01020c9:	fa                   	cli    
c01020ca:	6a 08                	push   $0x8
c01020cc:	e9 5f ff ff ff       	jmp    c0102030 <isr_common_stub>

c01020d1 <isr9>:
ISR_NOERRCODE  9    ; 9 协处理器跨段操作
c01020d1:	fa                   	cli    
c01020d2:	6a 00                	push   $0x0
c01020d4:	6a 09                	push   $0x9
c01020d6:	e9 55 ff ff ff       	jmp    c0102030 <isr_common_stub>

c01020db <isr10>:
ISR_ERRCODE   10    ; 10 #TS 无效TSS(有错误代码) 
c01020db:	fa                   	cli    
c01020dc:	6a 0a                	push   $0xa
c01020de:	e9 4d ff ff ff       	jmp    c0102030 <isr_common_stub>

c01020e3 <isr11>:
ISR_ERRCODE   11    ; 11 #NP 段不存在(有错误代码) 
c01020e3:	fa                   	cli    
c01020e4:	6a 0b                	push   $0xb
c01020e6:	e9 45 ff ff ff       	jmp    c0102030 <isr_common_stub>

c01020eb <isr12>:
ISR_ERRCODE   12    ; 12 #SS 栈错误(有错误代码) 
c01020eb:	fa                   	cli    
c01020ec:	6a 0c                	push   $0xc
c01020ee:	e9 3d ff ff ff       	jmp    c0102030 <isr_common_stub>

c01020f3 <isr13>:
ISR_ERRCODE   13    ; 13 #GP 常规保护(有错误代码) 
c01020f3:	fa                   	cli    
c01020f4:	6a 0d                	push   $0xd
c01020f6:	e9 35 ff ff ff       	jmp    c0102030 <isr_common_stub>

c01020fb <isr14>:
ISR_ERRCODE   14    ; 14 #PF 页故障(有错误代码) 
c01020fb:	fa                   	cli    
c01020fc:	6a 0e                	push   $0xe
c01020fe:	e9 2d ff ff ff       	jmp    c0102030 <isr_common_stub>

c0102103 <isr15>:
ISR_NOERRCODE 15    ; 15 CPU 保留 
c0102103:	fa                   	cli    
c0102104:	6a 00                	push   $0x0
c0102106:	6a 0f                	push   $0xf
c0102108:	e9 23 ff ff ff       	jmp    c0102030 <isr_common_stub>

c010210d <isr16>:
ISR_NOERRCODE 16    ; 16 #MF 浮点处理单元错误 
c010210d:	fa                   	cli    
c010210e:	6a 00                	push   $0x0
c0102110:	6a 10                	push   $0x10
c0102112:	e9 19 ff ff ff       	jmp    c0102030 <isr_common_stub>

c0102117 <isr17>:
ISR_ERRCODE   17    ; 17 #AC 对齐检查 
c0102117:	fa                   	cli    
c0102118:	6a 11                	push   $0x11
c010211a:	e9 11 ff ff ff       	jmp    c0102030 <isr_common_stub>

c010211f <isr18>:
ISR_NOERRCODE 18    ; 18 #MC 机器检查 
c010211f:	fa                   	cli    
c0102120:	6a 00                	push   $0x0
c0102122:	6a 12                	push   $0x12
c0102124:	e9 07 ff ff ff       	jmp    c0102030 <isr_common_stub>

c0102129 <isr19>:
ISR_NOERRCODE 19    ; 19 #XM SIMD(单指令多数据)浮点异常
c0102129:	fa                   	cli    
c010212a:	6a 00                	push   $0x0
c010212c:	6a 13                	push   $0x13
c010212e:	e9 fd fe ff ff       	jmp    c0102030 <isr_common_stub>

c0102133 <isr20>:

; 20 ~ 31 Intel 保留
ISR_NOERRCODE 20
c0102133:	fa                   	cli    
c0102134:	6a 00                	push   $0x0
c0102136:	6a 14                	push   $0x14
c0102138:	e9 f3 fe ff ff       	jmp    c0102030 <isr_common_stub>

c010213d <isr21>:
ISR_NOERRCODE 21
c010213d:	fa                   	cli    
c010213e:	6a 00                	push   $0x0
c0102140:	6a 15                	push   $0x15
c0102142:	e9 e9 fe ff ff       	jmp    c0102030 <isr_common_stub>

c0102147 <isr22>:
ISR_NOERRCODE 22
c0102147:	fa                   	cli    
c0102148:	6a 00                	push   $0x0
c010214a:	6a 16                	push   $0x16
c010214c:	e9 df fe ff ff       	jmp    c0102030 <isr_common_stub>

c0102151 <isr23>:
ISR_NOERRCODE 23
c0102151:	fa                   	cli    
c0102152:	6a 00                	push   $0x0
c0102154:	6a 17                	push   $0x17
c0102156:	e9 d5 fe ff ff       	jmp    c0102030 <isr_common_stub>

c010215b <isr24>:
ISR_NOERRCODE 24
c010215b:	fa                   	cli    
c010215c:	6a 00                	push   $0x0
c010215e:	6a 18                	push   $0x18
c0102160:	e9 cb fe ff ff       	jmp    c0102030 <isr_common_stub>

c0102165 <isr25>:
ISR_NOERRCODE 25
c0102165:	fa                   	cli    
c0102166:	6a 00                	push   $0x0
c0102168:	6a 19                	push   $0x19
c010216a:	e9 c1 fe ff ff       	jmp    c0102030 <isr_common_stub>

c010216f <isr26>:
ISR_NOERRCODE 26
c010216f:	fa                   	cli    
c0102170:	6a 00                	push   $0x0
c0102172:	6a 1a                	push   $0x1a
c0102174:	e9 b7 fe ff ff       	jmp    c0102030 <isr_common_stub>

c0102179 <isr27>:
ISR_NOERRCODE 27
c0102179:	fa                   	cli    
c010217a:	6a 00                	push   $0x0
c010217c:	6a 1b                	push   $0x1b
c010217e:	e9 ad fe ff ff       	jmp    c0102030 <isr_common_stub>

c0102183 <isr28>:
ISR_NOERRCODE 28
c0102183:	fa                   	cli    
c0102184:	6a 00                	push   $0x0
c0102186:	6a 1c                	push   $0x1c
c0102188:	e9 a3 fe ff ff       	jmp    c0102030 <isr_common_stub>

c010218d <isr29>:
ISR_NOERRCODE 29
c010218d:	fa                   	cli    
c010218e:	6a 00                	push   $0x0
c0102190:	6a 1d                	push   $0x1d
c0102192:	e9 99 fe ff ff       	jmp    c0102030 <isr_common_stub>

c0102197 <isr30>:
ISR_NOERRCODE 30
c0102197:	fa                   	cli    
c0102198:	6a 00                	push   $0x0
c010219a:	6a 1e                	push   $0x1e
c010219c:	e9 8f fe ff ff       	jmp    c0102030 <isr_common_stub>

c01021a1 <isr31>:
ISR_NOERRCODE 31
c01021a1:	fa                   	cli    
c01021a2:	6a 00                	push   $0x0
c01021a4:	6a 1f                	push   $0x1f
c01021a6:	e9 85 fe ff ff       	jmp    c0102030 <isr_common_stub>

c01021ab <isr255>:
; 32 ～ 255 用户自定义
ISR_NOERRCODE 255
c01021ab:	fa                   	cli    
c01021ac:	6a 00                	push   $0x0
c01021ae:	6a ff                	push   $0xffffffff
c01021b0:	e9 7b fe ff ff       	jmp    c0102030 <isr_common_stub>

c01021b5 <irq0>:




IRQ   0,    32  ; 电脑系统计时器
c01021b5:	fa                   	cli    
c01021b6:	6a 00                	push   $0x0
c01021b8:	6a 20                	push   $0x20
c01021ba:	e9 9d fe ff ff       	jmp    c010205c <irq_common_stub>

c01021bf <irq1>:
IRQ   1,    33  ; 键盘
c01021bf:	fa                   	cli    
c01021c0:	6a 00                	push   $0x0
c01021c2:	6a 21                	push   $0x21
c01021c4:	e9 93 fe ff ff       	jmp    c010205c <irq_common_stub>

c01021c9 <irq2>:
IRQ   2,    34  ; 与 IRQ9 相接，MPU-401 MD 使用
c01021c9:	fa                   	cli    
c01021ca:	6a 00                	push   $0x0
c01021cc:	6a 22                	push   $0x22
c01021ce:	e9 89 fe ff ff       	jmp    c010205c <irq_common_stub>

c01021d3 <irq3>:
IRQ   3,    35  ; 串口设备
c01021d3:	fa                   	cli    
c01021d4:	6a 00                	push   $0x0
c01021d6:	6a 23                	push   $0x23
c01021d8:	e9 7f fe ff ff       	jmp    c010205c <irq_common_stub>

c01021dd <irq4>:
IRQ   4,    36  ; 串口设备
c01021dd:	fa                   	cli    
c01021de:	6a 00                	push   $0x0
c01021e0:	6a 24                	push   $0x24
c01021e2:	e9 75 fe ff ff       	jmp    c010205c <irq_common_stub>

c01021e7 <irq5>:
IRQ   5,    37  ; 建议声卡使用
c01021e7:	fa                   	cli    
c01021e8:	6a 00                	push   $0x0
c01021ea:	6a 25                	push   $0x25
c01021ec:	e9 6b fe ff ff       	jmp    c010205c <irq_common_stub>

c01021f1 <irq6>:
IRQ   6,    38  ; 软驱传输控制使用
c01021f1:	fa                   	cli    
c01021f2:	6a 00                	push   $0x0
c01021f4:	6a 26                	push   $0x26
c01021f6:	e9 61 fe ff ff       	jmp    c010205c <irq_common_stub>

c01021fb <irq7>:
IRQ   7,    39  ; 打印机传输控制使用
c01021fb:	fa                   	cli    
c01021fc:	6a 00                	push   $0x0
c01021fe:	6a 27                	push   $0x27
c0102200:	e9 57 fe ff ff       	jmp    c010205c <irq_common_stub>

c0102205 <irq8>:
IRQ   8,    40  ; 即时时钟
c0102205:	fa                   	cli    
c0102206:	6a 00                	push   $0x0
c0102208:	6a 28                	push   $0x28
c010220a:	e9 4d fe ff ff       	jmp    c010205c <irq_common_stub>

c010220f <irq9>:
IRQ   9,    41  ; 与 IRQ2 相接，可设定给其他硬件
c010220f:	fa                   	cli    
c0102210:	6a 00                	push   $0x0
c0102212:	6a 29                	push   $0x29
c0102214:	e9 43 fe ff ff       	jmp    c010205c <irq_common_stub>

c0102219 <irq10>:
IRQ  10,    42  ; 建议网卡使用
c0102219:	fa                   	cli    
c010221a:	6a 00                	push   $0x0
c010221c:	6a 2a                	push   $0x2a
c010221e:	e9 39 fe ff ff       	jmp    c010205c <irq_common_stub>

c0102223 <irq11>:
IRQ  11,    43  ; 建议 AGP 显卡使用
c0102223:	fa                   	cli    
c0102224:	6a 00                	push   $0x0
c0102226:	6a 2b                	push   $0x2b
c0102228:	e9 2f fe ff ff       	jmp    c010205c <irq_common_stub>

c010222d <irq12>:
IRQ  12,    44  ; 接 PS/2 鼠标，也可设定给其他硬件
c010222d:	fa                   	cli    
c010222e:	6a 00                	push   $0x0
c0102230:	6a 2c                	push   $0x2c
c0102232:	e9 25 fe ff ff       	jmp    c010205c <irq_common_stub>

c0102237 <irq13>:
IRQ  13,    45  ; 协处理器使用
c0102237:	fa                   	cli    
c0102238:	6a 00                	push   $0x0
c010223a:	6a 2d                	push   $0x2d
c010223c:	e9 1b fe ff ff       	jmp    c010205c <irq_common_stub>

c0102241 <irq14>:
IRQ  14,    46  ; IDE0 传输控制使用
c0102241:	fa                   	cli    
c0102242:	6a 00                	push   $0x0
c0102244:	6a 2e                	push   $0x2e
c0102246:	e9 11 fe ff ff       	jmp    c010205c <irq_common_stub>

c010224b <irq15>:
IRQ  15,    47  ; IDE1 传输控制使用
c010224b:	fa                   	cli    
c010224c:	6a 00                	push   $0x0
c010224e:	6a 2f                	push   $0x2f
c0102250:	e9 07 fe ff ff       	jmp    c010205c <irq_common_stub>
c0102255:	66 90                	xchg   %ax,%ax
c0102257:	66 90                	xchg   %ax,%ax
c0102259:	66 90                	xchg   %ax,%ax
c010225b:	66 90                	xchg   %ax,%ax
c010225d:	66 90                	xchg   %ax,%ax
c010225f:	90                   	nop

c0102260 <setvga>:
;设置vga模式
[GLOBAL setvga]
setvga:
sti
c0102260:	fb                   	sti    
mov al,00h         
c0102261:	b0 00                	mov    $0x0,%al
mov ah,13h            
c0102263:	b4 13                	mov    $0x13,%ah
int 10h               
c0102265:	cd 10                	int    $0x10
ret
c0102267:	c3                   	ret    

c0102268 <insert_str>:
#include "console.h"
#include "vargs.h"


void insert_str(char *inserted_str,char *inserting_str,uint32_t offset)  //插入辅助函数
{
c0102268:	55                   	push   %ebp
c0102269:	89 e5                	mov    %esp,%ebp
c010226b:	57                   	push   %edi
c010226c:	53                   	push   %ebx
c010226d:	83 ec 70             	sub    $0x70,%esp
c0102270:	e8 8f 1d 00 00       	call   c0104004 <__x86.get_pc_thunk.bx>
c0102275:	81 c3 8b 2d 00 00    	add    $0x2d8b,%ebx
	char m[100]={0};
c010227b:	8d 55 90             	lea    -0x70(%ebp),%edx
c010227e:	b8 00 00 00 00       	mov    $0x0,%eax
c0102283:	b9 19 00 00 00       	mov    $0x19,%ecx
c0102288:	89 d7                	mov    %edx,%edi
c010228a:	f3 ab                	rep stos %eax,%es:(%edi)
	char *afterInsetedPositionStr=m;
c010228c:	8d 45 90             	lea    -0x70(%ebp),%eax
c010228f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	strcpy(afterInsetedPositionStr,inserted_str+offset+2);
c0102292:	8b 45 10             	mov    0x10(%ebp),%eax
c0102295:	8d 50 02             	lea    0x2(%eax),%edx
c0102298:	8b 45 08             	mov    0x8(%ebp),%eax
c010229b:	01 d0                	add    %edx,%eax
c010229d:	83 ec 08             	sub    $0x8,%esp
c01022a0:	50                   	push   %eax
c01022a1:	ff 75 f4             	pushl  -0xc(%ebp)
c01022a4:	e8 e4 17 00 00       	call   c0103a8d <strcpy>
c01022a9:	83 c4 10             	add    $0x10,%esp
	memcpy(inserted_str+offset,inserting_str,strlen(inserting_str));
c01022ac:	83 ec 0c             	sub    $0xc,%esp
c01022af:	ff 75 0c             	pushl  0xc(%ebp)
c01022b2:	e8 a5 17 00 00       	call   c0103a5c <strlen>
c01022b7:	83 c4 10             	add    $0x10,%esp
c01022ba:	89 c1                	mov    %eax,%ecx
c01022bc:	8b 55 08             	mov    0x8(%ebp),%edx
c01022bf:	8b 45 10             	mov    0x10(%ebp),%eax
c01022c2:	01 d0                	add    %edx,%eax
c01022c4:	83 ec 04             	sub    $0x4,%esp
c01022c7:	51                   	push   %ecx
c01022c8:	ff 75 0c             	pushl  0xc(%ebp)
c01022cb:	50                   	push   %eax
c01022cc:	e8 a0 16 00 00       	call   c0103971 <memcpy>
c01022d1:	83 c4 10             	add    $0x10,%esp
	*(inserted_str+offset+strlen(inserting_str))='\0';
c01022d4:	83 ec 0c             	sub    $0xc,%esp
c01022d7:	ff 75 0c             	pushl  0xc(%ebp)
c01022da:	e8 7d 17 00 00       	call   c0103a5c <strlen>
c01022df:	83 c4 10             	add    $0x10,%esp
c01022e2:	89 c2                	mov    %eax,%edx
c01022e4:	8b 45 10             	mov    0x10(%ebp),%eax
c01022e7:	01 c2                	add    %eax,%edx
c01022e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01022ec:	01 d0                	add    %edx,%eax
c01022ee:	c6 00 00             	movb   $0x0,(%eax)
	strcat(inserted_str,afterInsetedPositionStr);
c01022f1:	83 ec 08             	sub    $0x8,%esp
c01022f4:	ff 75 f4             	pushl  -0xc(%ebp)
c01022f7:	ff 75 08             	pushl  0x8(%ebp)
c01022fa:	e8 d4 17 00 00       	call   c0103ad3 <strcat>
c01022ff:	83 c4 10             	add    $0x10,%esp
	//memcpy(*(inserted_str+offset+1+strlen(inserting_str)),afterInsetedPositionStr,strlen(afterInsetedPositionStr));
	return inserted_str;
c0102302:	90                   	nop
}
c0102303:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0102306:	5b                   	pop    %ebx
c0102307:	5f                   	pop    %edi
c0102308:	5d                   	pop    %ebp
c0102309:	c3                   	ret    

c010230a <printk>:

void printk(char *input_str,...)
{
c010230a:	55                   	push   %ebp
c010230b:	89 e5                	mov    %esp,%ebp
c010230d:	53                   	push   %ebx
c010230e:	83 ec 34             	sub    $0x34,%esp
c0102311:	e8 ee 1c 00 00       	call   c0104004 <__x86.get_pc_thunk.bx>
c0102316:	81 c3 ea 2c 00 00    	add    $0x2cea,%ebx
	static char staticArry[100]={0};
	char *output_str=staticArry;
c010231c:	8d 83 20 00 00 00    	lea    0x20(%ebx),%eax
c0102322:	89 45 f0             	mov    %eax,-0x10(%ebp)
	strcpy(output_str,input_str);
c0102325:	83 ec 08             	sub    $0x8,%esp
c0102328:	ff 75 08             	pushl  0x8(%ebp)
c010232b:	ff 75 f0             	pushl  -0x10(%ebp)
c010232e:	e8 5a 17 00 00       	call   c0103a8d <strcpy>
c0102333:	83 c4 10             	add    $0x10,%esp
	va_list ptr;
	va_start(ptr,output_str);
c0102336:	8d 45 0c             	lea    0xc(%ebp),%eax
c0102339:	89 45 cc             	mov    %eax,-0x34(%ebp)
	int offset=0;
c010233c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;*(output_str+offset)!='\0';offset++)
c0102343:	e9 9e 01 00 00       	jmp    c01024e6 <printk+0x1dc>
	{
		char *charptr=output_str+offset;
c0102348:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010234b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010234e:	01 d0                	add    %edx,%eax
c0102350:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (*charptr=='%')
c0102353:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102356:	0f b6 00             	movzbl (%eax),%eax
c0102359:	3c 25                	cmp    $0x25,%al
c010235b:	0f 85 81 01 00 00    	jne    c01024e2 <printk+0x1d8>
		{
			if (*(charptr+1)=='s')
c0102361:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102364:	83 c0 01             	add    $0x1,%eax
c0102367:	0f b6 00             	movzbl (%eax),%eax
c010236a:	3c 73                	cmp    $0x73,%al
c010236c:	75 43                	jne    c01023b1 <printk+0xa7>
			{
				char *arg_str_ptr=va_arg(ptr,char*);//此处是否需要复制static数组？
c010236e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0102371:	8d 50 04             	lea    0x4(%eax),%edx
c0102374:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0102377:	8b 00                	mov    (%eax),%eax
c0102379:	89 45 d0             	mov    %eax,-0x30(%ebp)

				insert_str(output_str,arg_str_ptr,offset);
c010237c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010237f:	83 ec 04             	sub    $0x4,%esp
c0102382:	50                   	push   %eax
c0102383:	ff 75 d0             	pushl  -0x30(%ebp)
c0102386:	ff 75 f0             	pushl  -0x10(%ebp)
c0102389:	e8 da fe ff ff       	call   c0102268 <insert_str>
c010238e:	83 c4 10             	add    $0x10,%esp
				
				offset=offset+strlen(arg_str_ptr)-1;
c0102391:	83 ec 0c             	sub    $0xc,%esp
c0102394:	ff 75 d0             	pushl  -0x30(%ebp)
c0102397:	e8 c0 16 00 00       	call   c0103a5c <strlen>
c010239c:	83 c4 10             	add    $0x10,%esp
c010239f:	89 c2                	mov    %eax,%edx
c01023a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01023a4:	01 d0                	add    %edx,%eax
c01023a6:	83 e8 01             	sub    $0x1,%eax
c01023a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01023ac:	e9 31 01 00 00       	jmp    c01024e2 <printk+0x1d8>
				
			}
			else if(*(charptr+1)=='d')
c01023b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01023b4:	83 c0 01             	add    $0x1,%eax
c01023b7:	0f b6 00             	movzbl (%eax),%eax
c01023ba:	3c 64                	cmp    $0x64,%al
c01023bc:	75 55                	jne    c0102413 <printk+0x109>
			{
				int arg_int=va_arg(ptr,int);
c01023be:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01023c1:	8d 50 04             	lea    0x4(%eax),%edx
c01023c4:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01023c7:	8b 00                	mov    (%eax),%eax
c01023c9:	89 45 d8             	mov    %eax,-0x28(%ebp)

				char *temp_ptr=uintTostring(arg_int);
c01023cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01023cf:	83 ec 0c             	sub    $0xc,%esp
c01023d2:	50                   	push   %eax
c01023d3:	e8 34 17 00 00       	call   c0103b0c <uintTostring>
c01023d8:	83 c4 10             	add    $0x10,%esp
c01023db:	89 45 d4             	mov    %eax,-0x2c(%ebp)

				insert_str(output_str,temp_ptr,offset);
c01023de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01023e1:	83 ec 04             	sub    $0x4,%esp
c01023e4:	50                   	push   %eax
c01023e5:	ff 75 d4             	pushl  -0x2c(%ebp)
c01023e8:	ff 75 f0             	pushl  -0x10(%ebp)
c01023eb:	e8 78 fe ff ff       	call   c0102268 <insert_str>
c01023f0:	83 c4 10             	add    $0x10,%esp
				
				offset=offset+strlen(temp_ptr)-1;
c01023f3:	83 ec 0c             	sub    $0xc,%esp
c01023f6:	ff 75 d4             	pushl  -0x2c(%ebp)
c01023f9:	e8 5e 16 00 00       	call   c0103a5c <strlen>
c01023fe:	83 c4 10             	add    $0x10,%esp
c0102401:	89 c2                	mov    %eax,%edx
c0102403:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102406:	01 d0                	add    %edx,%eax
c0102408:	83 e8 01             	sub    $0x1,%eax
c010240b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010240e:	e9 cf 00 00 00       	jmp    c01024e2 <printk+0x1d8>
			}
			else if(*(charptr+1)=='c')
c0102413:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102416:	83 c0 01             	add    $0x1,%eax
c0102419:	0f b6 00             	movzbl (%eax),%eax
c010241c:	3c 63                	cmp    $0x63,%al
c010241e:	0f 84 be 00 00 00    	je     c01024e2 <printk+0x1d8>
			{
				;
			}
			else if(*(charptr+1)=='H')
c0102424:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102427:	83 c0 01             	add    $0x1,%eax
c010242a:	0f b6 00             	movzbl (%eax),%eax
c010242d:	3c 48                	cmp    $0x48,%al
c010242f:	75 53                	jne    c0102484 <printk+0x17a>
			{
				int arg_int=va_arg(ptr,int);
c0102431:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0102434:	8d 50 04             	lea    0x4(%eax),%edx
c0102437:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010243a:	8b 00                	mov    (%eax),%eax
c010243c:	89 45 e0             	mov    %eax,-0x20(%ebp)

				char*hexstrptr=num2hexstr(arg_int,1);
c010243f:	83 ec 08             	sub    $0x8,%esp
c0102442:	6a 01                	push   $0x1
c0102444:	ff 75 e0             	pushl  -0x20(%ebp)
c0102447:	e8 ff 13 00 00       	call   c010384b <num2hexstr>
c010244c:	83 c4 10             	add    $0x10,%esp
c010244f:	89 45 dc             	mov    %eax,-0x24(%ebp)
				
				insert_str(output_str,hexstrptr,offset);
c0102452:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102455:	83 ec 04             	sub    $0x4,%esp
c0102458:	50                   	push   %eax
c0102459:	ff 75 dc             	pushl  -0x24(%ebp)
c010245c:	ff 75 f0             	pushl  -0x10(%ebp)
c010245f:	e8 04 fe ff ff       	call   c0102268 <insert_str>
c0102464:	83 c4 10             	add    $0x10,%esp

				offset=offset+strlen(hexstrptr)-1;
c0102467:	83 ec 0c             	sub    $0xc,%esp
c010246a:	ff 75 dc             	pushl  -0x24(%ebp)
c010246d:	e8 ea 15 00 00       	call   c0103a5c <strlen>
c0102472:	83 c4 10             	add    $0x10,%esp
c0102475:	89 c2                	mov    %eax,%edx
c0102477:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010247a:	01 d0                	add    %edx,%eax
c010247c:	83 e8 01             	sub    $0x1,%eax
c010247f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102482:	eb 5e                	jmp    c01024e2 <printk+0x1d8>
			} 
			else if(*(charptr+1)=='h')
c0102484:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102487:	83 c0 01             	add    $0x1,%eax
c010248a:	0f b6 00             	movzbl (%eax),%eax
c010248d:	3c 68                	cmp    $0x68,%al
c010248f:	75 51                	jne    c01024e2 <printk+0x1d8>
			{
				int arg_int=va_arg(ptr,int);
c0102491:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0102494:	8d 50 04             	lea    0x4(%eax),%edx
c0102497:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010249a:	8b 00                	mov    (%eax),%eax
c010249c:	89 45 e8             	mov    %eax,-0x18(%ebp)

				char*hexstrptr=num2hexstr(arg_int,0);
c010249f:	83 ec 08             	sub    $0x8,%esp
c01024a2:	6a 00                	push   $0x0
c01024a4:	ff 75 e8             	pushl  -0x18(%ebp)
c01024a7:	e8 9f 13 00 00       	call   c010384b <num2hexstr>
c01024ac:	83 c4 10             	add    $0x10,%esp
c01024af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				
				insert_str(output_str,hexstrptr,offset);
c01024b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01024b5:	83 ec 04             	sub    $0x4,%esp
c01024b8:	50                   	push   %eax
c01024b9:	ff 75 e4             	pushl  -0x1c(%ebp)
c01024bc:	ff 75 f0             	pushl  -0x10(%ebp)
c01024bf:	e8 a4 fd ff ff       	call   c0102268 <insert_str>
c01024c4:	83 c4 10             	add    $0x10,%esp

				offset=offset+strlen(hexstrptr)-1;
c01024c7:	83 ec 0c             	sub    $0xc,%esp
c01024ca:	ff 75 e4             	pushl  -0x1c(%ebp)
c01024cd:	e8 8a 15 00 00       	call   c0103a5c <strlen>
c01024d2:	83 c4 10             	add    $0x10,%esp
c01024d5:	89 c2                	mov    %eax,%edx
c01024d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01024da:	01 d0                	add    %edx,%eax
c01024dc:	83 e8 01             	sub    $0x1,%eax
c01024df:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(;*(output_str+offset)!='\0';offset++)
c01024e2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01024e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01024e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01024ec:	01 d0                	add    %edx,%eax
c01024ee:	0f b6 00             	movzbl (%eax),%eax
c01024f1:	84 c0                	test   %al,%al
c01024f3:	0f 85 4f fe ff ff    	jne    c0102348 <printk+0x3e>
			}
		}
	}
	va_end(ptr);
	console_write(output_str);
c01024f9:	83 ec 0c             	sub    $0xc,%esp
c01024fc:	ff 75 f0             	pushl  -0x10(%ebp)
c01024ff:	e8 e3 10 00 00       	call   c01035e7 <console_write>
c0102504:	83 c4 10             	add    $0x10,%esp
}
c0102507:	90                   	nop
c0102508:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010250b:	c9                   	leave  
c010250c:	c3                   	ret    

c010250d <printbasic>:


//输入uint32_t或者char*  使用%d或者%s
//wdnmd 这个可变参有问题！！
void printbasic(char *format_str,char *m)
{
c010250d:	55                   	push   %ebp
c010250e:	89 e5                	mov    %esp,%ebp
c0102510:	83 ec 18             	sub    $0x18,%esp
c0102513:	e8 e8 1a 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0102518:	05 e8 2a 00 00       	add    $0x2ae8,%eax
	//va_list ptr_start=NULL;
	char *formatStr=format_str;
c010251d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102520:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//va_start(ptr_start,format_str);
	//console_write_color(va_arg(ptr_start,char *), rc_black, rc_green);	
	int i=0;
c0102523:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(char *head=formatStr;*(head+i)!='\0';i++)
c010252a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010252d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0102530:	eb 3a                	jmp    c010256c <printbasic+0x5f>
	{
		if (*(head+i)=='%'){
c0102532:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102535:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102538:	01 d0                	add    %edx,%eax
c010253a:	0f b6 00             	movzbl (%eax),%eax
c010253d:	3c 25                	cmp    $0x25,%al
c010253f:	75 27                	jne    c0102568 <printbasic+0x5b>
			if(*(head+i+1)=='s')
c0102541:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102544:	8d 50 01             	lea    0x1(%eax),%edx
c0102547:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010254a:	01 d0                	add    %edx,%eax
c010254c:	0f b6 00             	movzbl (%eax),%eax
c010254f:	3c 73                	cmp    $0x73,%al
c0102551:	75 15                	jne    c0102568 <printbasic+0x5b>
			{
				//char *str_head=va_arg(&ptr_start,char*);
				insert_str(format_str,m,i);
c0102553:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102556:	83 ec 04             	sub    $0x4,%esp
c0102559:	50                   	push   %eax
c010255a:	ff 75 0c             	pushl  0xc(%ebp)
c010255d:	ff 75 08             	pushl  0x8(%ebp)
c0102560:	e8 03 fd ff ff       	call   c0102268 <insert_str>
c0102565:	83 c4 10             	add    $0x10,%esp
	for(char *head=formatStr;*(head+i)!='\0';i++)
c0102568:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010256c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010256f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102572:	01 d0                	add    %edx,%eax
c0102574:	0f b6 00             	movzbl (%eax),%eax
c0102577:	84 c0                	test   %al,%al
c0102579:	75 b7                	jne    c0102532 <printbasic+0x25>
			else;
		}
	}
	//console_write_color(formatStr, rc_black, rc_white);
	
}
c010257b:	90                   	nop
c010257c:	c9                   	leave  
c010257d:	c3                   	ret    

c010257e <printk_color>:



void printk_color(char *input_str,real_color_t back,real_color_t fore,...)
{
c010257e:	55                   	push   %ebp
c010257f:	89 e5                	mov    %esp,%ebp
c0102581:	53                   	push   %ebx
c0102582:	83 ec 34             	sub    $0x34,%esp
c0102585:	e8 7a 1a 00 00       	call   c0104004 <__x86.get_pc_thunk.bx>
c010258a:	81 c3 76 2a 00 00    	add    $0x2a76,%ebx
	static char staticArry[100]={0};
	char *output_str=staticArry;
c0102590:	8d 83 a0 00 00 00    	lea    0xa0(%ebx),%eax
c0102596:	89 45 f0             	mov    %eax,-0x10(%ebp)
	strcpy(output_str,input_str);
c0102599:	83 ec 08             	sub    $0x8,%esp
c010259c:	ff 75 08             	pushl  0x8(%ebp)
c010259f:	ff 75 f0             	pushl  -0x10(%ebp)
c01025a2:	e8 e6 14 00 00       	call   c0103a8d <strcpy>
c01025a7:	83 c4 10             	add    $0x10,%esp
	va_list ptr;
	va_start(ptr,output_str);
c01025aa:	8d 45 14             	lea    0x14(%ebp),%eax
c01025ad:	89 45 cc             	mov    %eax,-0x34(%ebp)
	int offset=0;
c01025b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;*(output_str+offset)!='\0';offset++)
c01025b7:	e9 9e 01 00 00       	jmp    c010275a <printk_color+0x1dc>
	{
		char *charptr=output_str+offset;
c01025bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01025bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025c2:	01 d0                	add    %edx,%eax
c01025c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (*charptr=='%')
c01025c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01025ca:	0f b6 00             	movzbl (%eax),%eax
c01025cd:	3c 25                	cmp    $0x25,%al
c01025cf:	0f 85 81 01 00 00    	jne    c0102756 <printk_color+0x1d8>
		{
			if (*(charptr+1)=='s')
c01025d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01025d8:	83 c0 01             	add    $0x1,%eax
c01025db:	0f b6 00             	movzbl (%eax),%eax
c01025de:	3c 73                	cmp    $0x73,%al
c01025e0:	75 43                	jne    c0102625 <printk_color+0xa7>
			{
				char *arg_str_ptr=va_arg(ptr,char*);//此处是否需要复制static数组？
c01025e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01025e5:	8d 50 04             	lea    0x4(%eax),%edx
c01025e8:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01025eb:	8b 00                	mov    (%eax),%eax
c01025ed:	89 45 d0             	mov    %eax,-0x30(%ebp)

				insert_str(output_str,arg_str_ptr,offset);
c01025f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025f3:	83 ec 04             	sub    $0x4,%esp
c01025f6:	50                   	push   %eax
c01025f7:	ff 75 d0             	pushl  -0x30(%ebp)
c01025fa:	ff 75 f0             	pushl  -0x10(%ebp)
c01025fd:	e8 66 fc ff ff       	call   c0102268 <insert_str>
c0102602:	83 c4 10             	add    $0x10,%esp
				
				offset=offset+strlen(arg_str_ptr)-1;
c0102605:	83 ec 0c             	sub    $0xc,%esp
c0102608:	ff 75 d0             	pushl  -0x30(%ebp)
c010260b:	e8 4c 14 00 00       	call   c0103a5c <strlen>
c0102610:	83 c4 10             	add    $0x10,%esp
c0102613:	89 c2                	mov    %eax,%edx
c0102615:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102618:	01 d0                	add    %edx,%eax
c010261a:	83 e8 01             	sub    $0x1,%eax
c010261d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102620:	e9 31 01 00 00       	jmp    c0102756 <printk_color+0x1d8>
				
			}
			else if(*(charptr+1)=='d')
c0102625:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102628:	83 c0 01             	add    $0x1,%eax
c010262b:	0f b6 00             	movzbl (%eax),%eax
c010262e:	3c 64                	cmp    $0x64,%al
c0102630:	75 55                	jne    c0102687 <printk_color+0x109>
			{
				int arg_int=va_arg(ptr,int);
c0102632:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0102635:	8d 50 04             	lea    0x4(%eax),%edx
c0102638:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010263b:	8b 00                	mov    (%eax),%eax
c010263d:	89 45 d8             	mov    %eax,-0x28(%ebp)

				char *temp_ptr=uintTostring(arg_int);
c0102640:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0102643:	83 ec 0c             	sub    $0xc,%esp
c0102646:	50                   	push   %eax
c0102647:	e8 c0 14 00 00       	call   c0103b0c <uintTostring>
c010264c:	83 c4 10             	add    $0x10,%esp
c010264f:	89 45 d4             	mov    %eax,-0x2c(%ebp)

				insert_str(output_str,temp_ptr,offset);
c0102652:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102655:	83 ec 04             	sub    $0x4,%esp
c0102658:	50                   	push   %eax
c0102659:	ff 75 d4             	pushl  -0x2c(%ebp)
c010265c:	ff 75 f0             	pushl  -0x10(%ebp)
c010265f:	e8 04 fc ff ff       	call   c0102268 <insert_str>
c0102664:	83 c4 10             	add    $0x10,%esp
				
				offset=offset+strlen(temp_ptr)-1;
c0102667:	83 ec 0c             	sub    $0xc,%esp
c010266a:	ff 75 d4             	pushl  -0x2c(%ebp)
c010266d:	e8 ea 13 00 00       	call   c0103a5c <strlen>
c0102672:	83 c4 10             	add    $0x10,%esp
c0102675:	89 c2                	mov    %eax,%edx
c0102677:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010267a:	01 d0                	add    %edx,%eax
c010267c:	83 e8 01             	sub    $0x1,%eax
c010267f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102682:	e9 cf 00 00 00       	jmp    c0102756 <printk_color+0x1d8>
			}
			else if(*(charptr+1)=='c')
c0102687:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010268a:	83 c0 01             	add    $0x1,%eax
c010268d:	0f b6 00             	movzbl (%eax),%eax
c0102690:	3c 63                	cmp    $0x63,%al
c0102692:	0f 84 be 00 00 00    	je     c0102756 <printk_color+0x1d8>
			{
				;
			}
			else if(*(charptr+1)=='H')
c0102698:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010269b:	83 c0 01             	add    $0x1,%eax
c010269e:	0f b6 00             	movzbl (%eax),%eax
c01026a1:	3c 48                	cmp    $0x48,%al
c01026a3:	75 53                	jne    c01026f8 <printk_color+0x17a>
			{
				int arg_int=va_arg(ptr,int);
c01026a5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01026a8:	8d 50 04             	lea    0x4(%eax),%edx
c01026ab:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01026ae:	8b 00                	mov    (%eax),%eax
c01026b0:	89 45 e0             	mov    %eax,-0x20(%ebp)

				char*hexstrptr=num2hexstr(arg_int,1);
c01026b3:	83 ec 08             	sub    $0x8,%esp
c01026b6:	6a 01                	push   $0x1
c01026b8:	ff 75 e0             	pushl  -0x20(%ebp)
c01026bb:	e8 8b 11 00 00       	call   c010384b <num2hexstr>
c01026c0:	83 c4 10             	add    $0x10,%esp
c01026c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
				
				insert_str(output_str,hexstrptr,offset);
c01026c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026c9:	83 ec 04             	sub    $0x4,%esp
c01026cc:	50                   	push   %eax
c01026cd:	ff 75 dc             	pushl  -0x24(%ebp)
c01026d0:	ff 75 f0             	pushl  -0x10(%ebp)
c01026d3:	e8 90 fb ff ff       	call   c0102268 <insert_str>
c01026d8:	83 c4 10             	add    $0x10,%esp

				offset=offset+strlen(hexstrptr)-1;
c01026db:	83 ec 0c             	sub    $0xc,%esp
c01026de:	ff 75 dc             	pushl  -0x24(%ebp)
c01026e1:	e8 76 13 00 00       	call   c0103a5c <strlen>
c01026e6:	83 c4 10             	add    $0x10,%esp
c01026e9:	89 c2                	mov    %eax,%edx
c01026eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026ee:	01 d0                	add    %edx,%eax
c01026f0:	83 e8 01             	sub    $0x1,%eax
c01026f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01026f6:	eb 5e                	jmp    c0102756 <printk_color+0x1d8>
			} 
			else if(*(charptr+1)=='h')
c01026f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01026fb:	83 c0 01             	add    $0x1,%eax
c01026fe:	0f b6 00             	movzbl (%eax),%eax
c0102701:	3c 68                	cmp    $0x68,%al
c0102703:	75 51                	jne    c0102756 <printk_color+0x1d8>
			{
				int arg_int=va_arg(ptr,int);
c0102705:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0102708:	8d 50 04             	lea    0x4(%eax),%edx
c010270b:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010270e:	8b 00                	mov    (%eax),%eax
c0102710:	89 45 e8             	mov    %eax,-0x18(%ebp)

				char*hexstrptr=num2hexstr(arg_int,0);
c0102713:	83 ec 08             	sub    $0x8,%esp
c0102716:	6a 00                	push   $0x0
c0102718:	ff 75 e8             	pushl  -0x18(%ebp)
c010271b:	e8 2b 11 00 00       	call   c010384b <num2hexstr>
c0102720:	83 c4 10             	add    $0x10,%esp
c0102723:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				
				insert_str(output_str,hexstrptr,offset);
c0102726:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102729:	83 ec 04             	sub    $0x4,%esp
c010272c:	50                   	push   %eax
c010272d:	ff 75 e4             	pushl  -0x1c(%ebp)
c0102730:	ff 75 f0             	pushl  -0x10(%ebp)
c0102733:	e8 30 fb ff ff       	call   c0102268 <insert_str>
c0102738:	83 c4 10             	add    $0x10,%esp

				offset=offset+strlen(hexstrptr)-1;
c010273b:	83 ec 0c             	sub    $0xc,%esp
c010273e:	ff 75 e4             	pushl  -0x1c(%ebp)
c0102741:	e8 16 13 00 00       	call   c0103a5c <strlen>
c0102746:	83 c4 10             	add    $0x10,%esp
c0102749:	89 c2                	mov    %eax,%edx
c010274b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010274e:	01 d0                	add    %edx,%eax
c0102750:	83 e8 01             	sub    $0x1,%eax
c0102753:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(;*(output_str+offset)!='\0';offset++)
c0102756:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010275a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010275d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102760:	01 d0                	add    %edx,%eax
c0102762:	0f b6 00             	movzbl (%eax),%eax
c0102765:	84 c0                	test   %al,%al
c0102767:	0f 85 4f fe ff ff    	jne    c01025bc <printk_color+0x3e>
			}
		}
	}
	va_end(ptr);
	console_write_color(output_str,back,fore);
c010276d:	83 ec 04             	sub    $0x4,%esp
c0102770:	ff 75 10             	pushl  0x10(%ebp)
c0102773:	ff 75 0c             	pushl  0xc(%ebp)
c0102776:	ff 75 f0             	pushl  -0x10(%ebp)
c0102779:	e8 a7 0e 00 00       	call   c0103625 <console_write_color>
c010277e:	83 c4 10             	add    $0x10,%esp
}
c0102781:	90                   	nop
c0102782:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102785:	c9                   	leave  
c0102786:	c3                   	ret    

c0102787 <timer_callback>:
#include "idt.h"
#include "common.h"
#include "console.h"

void timer_callback(pt_regs *regs)
{
c0102787:	55                   	push   %ebp
c0102788:	89 e5                	mov    %esp,%ebp
c010278a:	53                   	push   %ebx
c010278b:	83 ec 04             	sub    $0x4,%esp
c010278e:	e8 6d 18 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0102793:	05 6d 28 00 00       	add    $0x286d,%eax
    static uint32_t tick = 0;
    console_write_color("Tack!\n", rc_black, rc_green);
c0102798:	83 ec 04             	sub    $0x4,%esp
c010279b:	6a 02                	push   $0x2
c010279d:	6a 00                	push   $0x0
c010279f:	8d 90 0c f0 ff ff    	lea    -0xff4(%eax),%edx
c01027a5:	52                   	push   %edx
c01027a6:	89 c3                	mov    %eax,%ebx
c01027a8:	e8 78 0e 00 00       	call   c0103625 <console_write_color>
c01027ad:	83 c4 10             	add    $0x10,%esp
}
c01027b0:	90                   	nop
c01027b1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01027b4:	c9                   	leave  
c01027b5:	c3                   	ret    

c01027b6 <init_timer>:

void init_timer(uint32_t frequency)
{
c01027b6:	55                   	push   %ebp
c01027b7:	89 e5                	mov    %esp,%ebp
c01027b9:	53                   	push   %ebx
c01027ba:	83 ec 14             	sub    $0x14,%esp
c01027bd:	e8 42 18 00 00       	call   c0104004 <__x86.get_pc_thunk.bx>
c01027c2:	81 c3 3e 28 00 00    	add    $0x283e,%ebx
    // 注册时间相关的处理函数
    register_interrupt_handler(IRQ0, timer_callback);
c01027c8:	83 ec 08             	sub    $0x8,%esp
c01027cb:	8d 83 87 d7 ff ff    	lea    -0x2879(%ebx),%eax
c01027d1:	50                   	push   %eax
c01027d2:	6a 20                	push   $0x20
c01027d4:	e8 80 09 00 00       	call   c0103159 <register_interrupt_handler>
c01027d9:	83 c4 10             	add    $0x10,%esp

    // Intel 8253/8254 PIT芯片 I/O端口地址范围是40h~43h
    // 输入频率为 1193180，frequency 即每秒中断次数
    uint32_t divisor = 1193180 / frequency;
c01027dc:	b8 dc 34 12 00       	mov    $0x1234dc,%eax
c01027e1:	ba 00 00 00 00       	mov    $0x0,%edx
c01027e6:	f7 75 08             	divl   0x8(%ebp)
c01027e9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // D7 D6 D5 D4 D3 D2 D1 D0
    // 0  0  1  1  0  1  1  0
    // 即就是 36 H
    // 设置 8253/8254 芯片工作在模式 3 下
    outb(0x43, 0x36);
c01027ec:	83 ec 08             	sub    $0x8,%esp
c01027ef:	6a 36                	push   $0x36
c01027f1:	6a 43                	push   $0x43
c01027f3:	e8 56 14 00 00       	call   c0103c4e <outb>
c01027f8:	83 c4 10             	add    $0x10,%esp

    // 拆分低字节和高字节
    uint8_t low = (uint8_t)(divisor & 0xFF);
c01027fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01027fe:	88 45 f3             	mov    %al,-0xd(%ebp)
    uint8_t hign = (uint8_t)((divisor >> 8) & 0xFF);
c0102801:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102804:	c1 e8 08             	shr    $0x8,%eax
c0102807:	88 45 f2             	mov    %al,-0xe(%ebp)
    
    // 分别写入低字节和高字节
    outb(0x40, low);
c010280a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010280e:	83 ec 08             	sub    $0x8,%esp
c0102811:	50                   	push   %eax
c0102812:	6a 40                	push   $0x40
c0102814:	e8 35 14 00 00       	call   c0103c4e <outb>
c0102819:	83 c4 10             	add    $0x10,%esp
    outb(0x40, hign);
c010281c:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
c0102820:	83 ec 08             	sub    $0x8,%esp
c0102823:	50                   	push   %eax
c0102824:	6a 40                	push   $0x40
c0102826:	e8 23 14 00 00       	call   c0103c4e <outb>
c010282b:	83 c4 10             	add    $0x10,%esp
}
c010282e:	90                   	nop
c010282f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102832:	c9                   	leave  
c0102833:	c3                   	ret    

c0102834 <show_memory_map>:

// 物理内存管理的栈指针
static uint32_t pmm_stack_top;

void show_memory_map()
{
c0102834:	55                   	push   %ebp
c0102835:	89 e5                	mov    %esp,%ebp
c0102837:	57                   	push   %edi
c0102838:	56                   	push   %esi
c0102839:	53                   	push   %ebx
c010283a:	83 ec 1c             	sub    $0x1c,%esp
c010283d:	e8 c2 17 00 00       	call   c0104004 <__x86.get_pc_thunk.bx>
c0102842:	81 c3 be 27 00 00    	add    $0x27be,%ebx
    uint32_t mmap_addr = glb_mboot_ptr->mmap_addr;
c0102848:	c7 c0 80 6c 18 c0    	mov    $0xc0186c80,%eax
c010284e:	8b 00                	mov    (%eax),%eax
c0102850:	8b 40 30             	mov    0x30(%eax),%eax
c0102853:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t mmap_length = glb_mboot_ptr->mmap_length;
c0102856:	c7 c0 80 6c 18 c0    	mov    $0xc0186c80,%eax
c010285c:	8b 00                	mov    (%eax),%eax
c010285e:	8b 40 2c             	mov    0x2c(%eax),%eax
c0102861:	89 45 dc             	mov    %eax,-0x24(%ebp)

    printk("Memory map:\n");
c0102864:	83 ec 0c             	sub    $0xc,%esp
c0102867:	8d 83 14 f0 ff ff    	lea    -0xfec(%ebx),%eax
c010286d:	50                   	push   %eax
c010286e:	e8 97 fa ff ff       	call   c010230a <printk>
c0102873:	83 c4 10             	add    $0x10,%esp

    mmap_entry_t *mmap = (mmap_entry_t *)mmap_addr;
c0102876:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0102879:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    for (mmap = (mmap_entry_t *)mmap_addr; (uint32_t)mmap < mmap_addr + mmap_length; mmap++) {
c010287c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010287f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0102882:	eb 39                	jmp    c01028bd <show_memory_map+0x89>
        printk("base_addr = %h%h, length = %h%h, type = %h\n",
            (uint32_t)mmap->base_addr_high, (uint32_t)mmap->base_addr_low,
            (uint32_t)mmap->length_high, (uint32_t)mmap->length_low,
            (uint32_t)mmap->type);
c0102884:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102887:	8b 78 14             	mov    0x14(%eax),%edi
            (uint32_t)mmap->length_high, (uint32_t)mmap->length_low,
c010288a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010288d:	8b 70 0c             	mov    0xc(%eax),%esi
c0102890:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102893:	8b 48 10             	mov    0x10(%eax),%ecx
            (uint32_t)mmap->base_addr_high, (uint32_t)mmap->base_addr_low,
c0102896:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0102899:	8b 50 04             	mov    0x4(%eax),%edx
c010289c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010289f:	8b 40 08             	mov    0x8(%eax),%eax
        printk("base_addr = %h%h, length = %h%h, type = %h\n",
c01028a2:	83 ec 08             	sub    $0x8,%esp
c01028a5:	57                   	push   %edi
c01028a6:	56                   	push   %esi
c01028a7:	51                   	push   %ecx
c01028a8:	52                   	push   %edx
c01028a9:	50                   	push   %eax
c01028aa:	8d 83 24 f0 ff ff    	lea    -0xfdc(%ebx),%eax
c01028b0:	50                   	push   %eax
c01028b1:	e8 54 fa ff ff       	call   c010230a <printk>
c01028b6:	83 c4 20             	add    $0x20,%esp
    for (mmap = (mmap_entry_t *)mmap_addr; (uint32_t)mmap < mmap_addr + mmap_length; mmap++) {
c01028b9:	83 45 e4 18          	addl   $0x18,-0x1c(%ebp)
c01028bd:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01028c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01028c3:	01 c2                	add    %eax,%edx
c01028c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01028c8:	39 c2                	cmp    %eax,%edx
c01028ca:	77 b8                	ja     c0102884 <show_memory_map+0x50>
    }
}
c01028cc:	90                   	nop
c01028cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01028d0:	5b                   	pop    %ebx
c01028d1:	5e                   	pop    %esi
c01028d2:	5f                   	pop    %edi
c01028d3:	5d                   	pop    %ebp
c01028d4:	c3                   	ret    

c01028d5 <init_pmm>:

void init_pmm()
{
c01028d5:	55                   	push   %ebp
c01028d6:	89 e5                	mov    %esp,%ebp
c01028d8:	53                   	push   %ebx
c01028d9:	83 ec 24             	sub    $0x24,%esp
c01028dc:	e8 23 17 00 00       	call   c0104004 <__x86.get_pc_thunk.bx>
c01028e1:	81 c3 1f 27 00 00    	add    $0x271f,%ebx
    mmap_entry_t *mmap_start_addr = (mmap_entry_t *)glb_mboot_ptr->mmap_addr;
c01028e7:	c7 c0 80 6c 18 c0    	mov    $0xc0186c80,%eax
c01028ed:	8b 00                	mov    (%eax),%eax
c01028ef:	8b 40 30             	mov    0x30(%eax),%eax
c01028f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    mmap_entry_t *mmap_end_addr = (mmap_entry_t *)glb_mboot_ptr->mmap_addr + glb_mboot_ptr->mmap_length;
c01028f5:	c7 c0 80 6c 18 c0    	mov    $0xc0186c80,%eax
c01028fb:	8b 00                	mov    (%eax),%eax
c01028fd:	8b 50 2c             	mov    0x2c(%eax),%edx
c0102900:	89 d0                	mov    %edx,%eax
c0102902:	01 c0                	add    %eax,%eax
c0102904:	01 d0                	add    %edx,%eax
c0102906:	c1 e0 03             	shl    $0x3,%eax
c0102909:	89 c2                	mov    %eax,%edx
c010290b:	c7 c0 80 6c 18 c0    	mov    $0xc0186c80,%eax
c0102911:	8b 00                	mov    (%eax),%eax
c0102913:	8b 40 30             	mov    0x30(%eax),%eax
c0102916:	01 d0                	add    %edx,%eax
c0102918:	89 45 e8             	mov    %eax,-0x18(%ebp)

    mmap_entry_t *map_entry;

    for (map_entry = mmap_start_addr; map_entry < mmap_end_addr; map_entry++) {
c010291b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010291e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102921:	e9 83 00 00 00       	jmp    c01029a9 <init_pmm+0xd4>

        // 如果是可用内存 ( 按照协议，1 表示可用内存，其它数字指保留区域 )
        if (map_entry->type == 1 && map_entry->base_addr_low == 0x100000) {
c0102926:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102929:	8b 40 14             	mov    0x14(%eax),%eax
c010292c:	83 f8 01             	cmp    $0x1,%eax
c010292f:	75 74                	jne    c01029a5 <init_pmm+0xd0>
c0102931:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102934:	8b 40 04             	mov    0x4(%eax),%eax
c0102937:	3d 00 00 10 00       	cmp    $0x100000,%eax
c010293c:	75 67                	jne    c01029a5 <init_pmm+0xd0>
            
            // 把内核结束位置到结束位置的内存段，按页存储到页管理栈里
            // 最多支持512MB的物理内存
            uint32_t page_addr = map_entry->base_addr_low + (uint32_t)(kern_end - kern_start);
c010293e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102941:	8b 40 04             	mov    0x4(%eax),%eax
c0102944:	c7 c2 00 00 10 c0    	mov    $0xc0100000,%edx
c010294a:	29 d0                	sub    %edx,%eax
c010294c:	89 c2                	mov    %eax,%edx
c010294e:	c7 c0 00 f0 18 c0    	mov    $0xc018f000,%eax
c0102954:	01 d0                	add    %edx,%eax
c0102956:	89 45 f0             	mov    %eax,-0x10(%ebp)
            uint32_t length = map_entry->base_addr_low + map_entry->length_low;
c0102959:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010295c:	8b 50 04             	mov    0x4(%eax),%edx
c010295f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102962:	8b 40 0c             	mov    0xc(%eax),%eax
c0102965:	01 d0                	add    %edx,%eax
c0102967:	89 45 e4             	mov    %eax,-0x1c(%ebp)

            while (page_addr < length && page_addr <= PMM_MAX_SIZE) {
c010296a:	eb 28                	jmp    c0102994 <init_pmm+0xbf>
                pmm_free_page(page_addr);
c010296c:	83 ec 0c             	sub    $0xc,%esp
c010296f:	ff 75 f0             	pushl  -0x10(%ebp)
c0102972:	e8 72 00 00 00       	call   c01029e9 <pmm_free_page>
c0102977:	83 c4 10             	add    $0x10,%esp
                page_addr += PMM_PAGE_SIZE;
c010297a:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
                phy_page_count++;
c0102981:	c7 c0 00 64 18 c0    	mov    $0xc0186400,%eax
c0102987:	8b 00                	mov    (%eax),%eax
c0102989:	8d 50 01             	lea    0x1(%eax),%edx
c010298c:	c7 c0 00 64 18 c0    	mov    $0xc0186400,%eax
c0102992:	89 10                	mov    %edx,(%eax)
            while (page_addr < length && page_addr <= PMM_MAX_SIZE) {
c0102994:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102997:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010299a:	73 09                	jae    c01029a5 <init_pmm+0xd0>
c010299c:	81 7d f0 00 00 00 20 	cmpl   $0x20000000,-0x10(%ebp)
c01029a3:	76 c7                	jbe    c010296c <init_pmm+0x97>
    for (map_entry = mmap_start_addr; map_entry < mmap_end_addr; map_entry++) {
c01029a5:	83 45 f4 18          	addl   $0x18,-0xc(%ebp)
c01029a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01029ac:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01029af:	0f 82 71 ff ff ff    	jb     c0102926 <init_pmm+0x51>
            }
        }
    }
}
c01029b5:	90                   	nop
c01029b6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01029b9:	c9                   	leave  
c01029ba:	c3                   	ret    

c01029bb <pmm_alloc_page>:

uint32_t pmm_alloc_page()
{
c01029bb:	55                   	push   %ebp
c01029bc:	89 e5                	mov    %esp,%ebp
c01029be:	83 ec 10             	sub    $0x10,%esp
c01029c1:	e8 3a 16 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c01029c6:	05 3a 26 00 00       	add    $0x263a,%eax
    //assert(pmm_stack_top != 0, "out of memory");

    uint32_t page = pmm_stack[pmm_stack_top--];
c01029cb:	8b 90 24 01 08 00    	mov    0x80124(%eax),%edx
c01029d1:	8d 4a ff             	lea    -0x1(%edx),%ecx
c01029d4:	89 88 24 01 08 00    	mov    %ecx,0x80124(%eax)
c01029da:	8b 84 90 20 01 00 00 	mov    0x120(%eax,%edx,4),%eax
c01029e1:	89 45 fc             	mov    %eax,-0x4(%ebp)

    return page;
c01029e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01029e7:	c9                   	leave  
c01029e8:	c3                   	ret    

c01029e9 <pmm_free_page>:

void pmm_free_page(uint32_t p)
{
c01029e9:	55                   	push   %ebp
c01029ea:	89 e5                	mov    %esp,%ebp
c01029ec:	e8 0f 16 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c01029f1:	05 0f 26 00 00       	add    $0x260f,%eax
    //assert(pmm_stack_top != PAGE_MAX_SIZE, "out of pmm_stack stack");

    pmm_stack[++pmm_stack_top] = p;
c01029f6:	8b 90 24 01 08 00    	mov    0x80124(%eax),%edx
c01029fc:	83 c2 01             	add    $0x1,%edx
c01029ff:	89 90 24 01 08 00    	mov    %edx,0x80124(%eax)
c0102a05:	8b 90 24 01 08 00    	mov    0x80124(%eax),%edx
c0102a0b:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0102a0e:	89 8c 90 20 01 00 00 	mov    %ecx,0x120(%eax,%edx,4)
c0102a15:	90                   	nop
c0102a16:	5d                   	pop    %ebp
c0102a17:	c3                   	ret    

c0102a18 <isr_handler>:



// ISR分发函数
void isr_handler(pt_regs *regs)
{
c0102a18:	55                   	push   %ebp
c0102a19:	89 e5                	mov    %esp,%ebp
c0102a1b:	53                   	push   %ebx
c0102a1c:	83 ec 04             	sub    $0x4,%esp
c0102a1f:	e8 dc 15 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0102a24:	05 dc 25 00 00       	add    $0x25dc,%eax
    if (interrupt_handlers[regs->int_no]) {
c0102a29:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a2c:	8b 4a 24             	mov    0x24(%edx),%ecx
c0102a2f:	c7 c2 00 60 18 c0    	mov    $0xc0186000,%edx
c0102a35:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
c0102a38:	85 d2                	test   %edx,%edx
c0102a3a:	74 1c                	je     c0102a58 <isr_handler+0x40>
          interrupt_handlers[regs->int_no](regs);
c0102a3c:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a3f:	8b 52 24             	mov    0x24(%edx),%edx
c0102a42:	c7 c0 00 60 18 c0    	mov    $0xc0186000,%eax
c0102a48:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0102a4b:	83 ec 0c             	sub    $0xc,%esp
c0102a4e:	ff 75 08             	pushl  0x8(%ebp)
c0102a51:	ff d0                	call   *%eax
c0102a53:	83 c4 10             	add    $0x10,%esp
    } else {
        console_write_color("Hello, OS kernel!\n", rc_black, rc_green);
    }
}
c0102a56:	eb 18                	jmp    c0102a70 <isr_handler+0x58>
        console_write_color("Hello, OS kernel!\n", rc_black, rc_green);
c0102a58:	83 ec 04             	sub    $0x4,%esp
c0102a5b:	6a 02                	push   $0x2
c0102a5d:	6a 00                	push   $0x0
c0102a5f:	8d 90 50 f0 ff ff    	lea    -0xfb0(%eax),%edx
c0102a65:	52                   	push   %edx
c0102a66:	89 c3                	mov    %eax,%ebx
c0102a68:	e8 b8 0b 00 00       	call   c0103625 <console_write_color>
c0102a6d:	83 c4 10             	add    $0x10,%esp
}
c0102a70:	90                   	nop
c0102a71:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102a74:	c9                   	leave  
c0102a75:	c3                   	ret    

c0102a76 <irq_handler>:
// IRQ 分发函数
void irq_handler(pt_regs *regs)
{
c0102a76:	55                   	push   %ebp
c0102a77:	89 e5                	mov    %esp,%ebp
c0102a79:	53                   	push   %ebx
c0102a7a:	83 ec 04             	sub    $0x4,%esp
c0102a7d:	e8 82 15 00 00       	call   c0104004 <__x86.get_pc_thunk.bx>
c0102a82:	81 c3 7e 25 00 00    	add    $0x257e,%ebx
    // 发送中断结束信号给 PICs
    // 大于等于 40 的中断号是由从片处理的
    if (regs->int_no >= 40) {
c0102a88:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a8b:	8b 40 24             	mov    0x24(%eax),%eax
c0102a8e:	83 f8 27             	cmp    $0x27,%eax
c0102a91:	76 12                	jbe    c0102aa5 <irq_handler+0x2f>
        // 发送重设信号给从片
        outb(0xA0, 0x20);
c0102a93:	83 ec 08             	sub    $0x8,%esp
c0102a96:	6a 20                	push   $0x20
c0102a98:	68 a0 00 00 00       	push   $0xa0
c0102a9d:	e8 ac 11 00 00       	call   c0103c4e <outb>
c0102aa2:	83 c4 10             	add    $0x10,%esp
    }
    // 发送重设信号给主片
    outb(0x20, 0x20);
c0102aa5:	83 ec 08             	sub    $0x8,%esp
c0102aa8:	6a 20                	push   $0x20
c0102aaa:	6a 20                	push   $0x20
c0102aac:	e8 9d 11 00 00       	call   c0103c4e <outb>
c0102ab1:	83 c4 10             	add    $0x10,%esp

    if (interrupt_handlers[regs->int_no]) {
c0102ab4:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ab7:	8b 50 24             	mov    0x24(%eax),%edx
c0102aba:	c7 c0 00 60 18 c0    	mov    $0xc0186000,%eax
c0102ac0:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0102ac3:	85 c0                	test   %eax,%eax
c0102ac5:	74 1a                	je     c0102ae1 <irq_handler+0x6b>
        interrupt_handlers[regs->int_no](regs);
c0102ac7:	8b 45 08             	mov    0x8(%ebp),%eax
c0102aca:	8b 50 24             	mov    0x24(%eax),%edx
c0102acd:	c7 c0 00 60 18 c0    	mov    $0xc0186000,%eax
c0102ad3:	8b 04 90             	mov    (%eax,%edx,4),%eax
c0102ad6:	83 ec 0c             	sub    $0xc,%esp
c0102ad9:	ff 75 08             	pushl  0x8(%ebp)
c0102adc:	ff d0                	call   *%eax
c0102ade:	83 c4 10             	add    $0x10,%esp
    }
}
c0102ae1:	90                   	nop
c0102ae2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102ae5:	c9                   	leave  
c0102ae6:	c3                   	ret    

c0102ae7 <init_8295a>:

static void init_8295a(){
c0102ae7:	55                   	push   %ebp
c0102ae8:	89 e5                	mov    %esp,%ebp
c0102aea:	53                   	push   %ebx
c0102aeb:	83 ec 04             	sub    $0x4,%esp
c0102aee:	e8 11 15 00 00       	call   c0104004 <__x86.get_pc_thunk.bx>
c0102af3:	81 c3 0d 25 00 00    	add    $0x250d,%ebx
    // 主片端口 0x20 0x21
    // 从片端口 0xA0 0xA1
        
    // 初始化主片、从片
    // 0001 0001
    outb(0x20, 0x11);
c0102af9:	83 ec 08             	sub    $0x8,%esp
c0102afc:	6a 11                	push   $0x11
c0102afe:	6a 20                	push   $0x20
c0102b00:	e8 49 11 00 00       	call   c0103c4e <outb>
c0102b05:	83 c4 10             	add    $0x10,%esp
    outb(0xA0, 0x11);
c0102b08:	83 ec 08             	sub    $0x8,%esp
c0102b0b:	6a 11                	push   $0x11
c0102b0d:	68 a0 00 00 00       	push   $0xa0
c0102b12:	e8 37 11 00 00       	call   c0103c4e <outb>
c0102b17:	83 c4 10             	add    $0x10,%esp
    
    // 设置主片 IRQ 从 0x20(32) 号中断开始
    outb(0x21, 0x20);
c0102b1a:	83 ec 08             	sub    $0x8,%esp
c0102b1d:	6a 20                	push   $0x20
c0102b1f:	6a 21                	push   $0x21
c0102b21:	e8 28 11 00 00       	call   c0103c4e <outb>
c0102b26:	83 c4 10             	add    $0x10,%esp

    // 设置从片 IRQ 从 0x28(40) 号中断开始
    outb(0xA1, 0x28);
c0102b29:	83 ec 08             	sub    $0x8,%esp
c0102b2c:	6a 28                	push   $0x28
c0102b2e:	68 a1 00 00 00       	push   $0xa1
c0102b33:	e8 16 11 00 00       	call   c0103c4e <outb>
c0102b38:	83 c4 10             	add    $0x10,%esp
    
    // 设置主片 IR2 引脚连接从片
    outb(0x21, 0x04);
c0102b3b:	83 ec 08             	sub    $0x8,%esp
c0102b3e:	6a 04                	push   $0x4
c0102b40:	6a 21                	push   $0x21
c0102b42:	e8 07 11 00 00       	call   c0103c4e <outb>
c0102b47:	83 c4 10             	add    $0x10,%esp

    // 告诉从片输出引脚和主片 IR2 号相连
    outb(0xA1, 0x02);
c0102b4a:	83 ec 08             	sub    $0x8,%esp
c0102b4d:	6a 02                	push   $0x2
c0102b4f:	68 a1 00 00 00       	push   $0xa1
c0102b54:	e8 f5 10 00 00       	call   c0103c4e <outb>
c0102b59:	83 c4 10             	add    $0x10,%esp
    
    // 设置主片和从片按照 8086 的方式工作
    outb(0x21, 0x01);
c0102b5c:	83 ec 08             	sub    $0x8,%esp
c0102b5f:	6a 01                	push   $0x1
c0102b61:	6a 21                	push   $0x21
c0102b63:	e8 e6 10 00 00       	call   c0103c4e <outb>
c0102b68:	83 c4 10             	add    $0x10,%esp
    outb(0xA1, 0x01);
c0102b6b:	83 ec 08             	sub    $0x8,%esp
c0102b6e:	6a 01                	push   $0x1
c0102b70:	68 a1 00 00 00       	push   $0xa1
c0102b75:	e8 d4 10 00 00       	call   c0103c4e <outb>
c0102b7a:	83 c4 10             	add    $0x10,%esp
    
    // 设置主从片允许中断
    outb(0x21, 0x0);
c0102b7d:	83 ec 08             	sub    $0x8,%esp
c0102b80:	6a 00                	push   $0x0
c0102b82:	6a 21                	push   $0x21
c0102b84:	e8 c5 10 00 00       	call   c0103c4e <outb>
c0102b89:	83 c4 10             	add    $0x10,%esp
    outb(0xA1, 0x0);
c0102b8c:	83 ec 08             	sub    $0x8,%esp
c0102b8f:	6a 00                	push   $0x0
c0102b91:	68 a1 00 00 00       	push   $0xa1
c0102b96:	e8 b3 10 00 00       	call   c0103c4e <outb>
c0102b9b:	83 c4 10             	add    $0x10,%esp
}
c0102b9e:	90                   	nop
c0102b9f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102ba2:	c9                   	leave  
c0102ba3:	c3                   	ret    

c0102ba4 <init_idt>:

// 初始化中断描述符表
void init_idt()
{   
c0102ba4:	55                   	push   %ebp
c0102ba5:	89 e5                	mov    %esp,%ebp
c0102ba7:	53                   	push   %ebx
c0102ba8:	83 ec 04             	sub    $0x4,%esp
c0102bab:	e8 54 14 00 00       	call   c0104004 <__x86.get_pc_thunk.bx>
c0102bb0:	81 c3 50 24 00 00    	add    $0x2450,%ebx

    init_8295a();
c0102bb6:	e8 2c ff ff ff       	call   c0102ae7 <init_8295a>
    bzero((uint8_t *)&interrupt_handlers, sizeof(interrupt_handler_t) * 256);
c0102bbb:	83 ec 08             	sub    $0x8,%esp
c0102bbe:	68 00 04 00 00       	push   $0x400
c0102bc3:	c7 c0 00 60 18 c0    	mov    $0xc0186000,%eax
c0102bc9:	50                   	push   %eax
c0102bca:	e8 0b 0e 00 00       	call   c01039da <bzero>
c0102bcf:	83 c4 10             	add    $0x10,%esp
    
    idt_ptr.limit = sizeof(idt_entry_t) * 256 - 1;
c0102bd2:	c7 c0 20 64 18 c0    	mov    $0xc0186420,%eax
c0102bd8:	66 c7 00 ff 07       	movw   $0x7ff,(%eax)
    idt_ptr.base  = (uint32_t)&idt_entries;
c0102bdd:	c7 c0 40 64 18 c0    	mov    $0xc0186440,%eax
c0102be3:	89 c2                	mov    %eax,%edx
c0102be5:	c7 c0 20 64 18 c0    	mov    $0xc0186420,%eax
c0102beb:	89 50 02             	mov    %edx,0x2(%eax)
    
    bzero((uint8_t *)&idt_entries, sizeof(idt_entry_t) * 256);
c0102bee:	83 ec 08             	sub    $0x8,%esp
c0102bf1:	68 00 08 00 00       	push   $0x800
c0102bf6:	c7 c0 40 64 18 c0    	mov    $0xc0186440,%eax
c0102bfc:	50                   	push   %eax
c0102bfd:	e8 d8 0d 00 00       	call   c01039da <bzero>
c0102c02:	83 c4 10             	add    $0x10,%esp

//内部中断
    idt_set_gate( 0, (uint32_t)isr0,  0x08, 0x8E);
c0102c05:	c7 c0 88 20 10 c0    	mov    $0xc0102088,%eax
c0102c0b:	68 8e 00 00 00       	push   $0x8e
c0102c10:	6a 08                	push   $0x8
c0102c12:	50                   	push   %eax
c0102c13:	6a 00                	push   $0x0
c0102c15:	e8 b6 04 00 00       	call   c01030d0 <idt_set_gate>
c0102c1a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate( 1, (uint32_t)isr1,  0x08, 0x8E);
c0102c1d:	c7 c0 8f 20 10 c0    	mov    $0xc010208f,%eax
c0102c23:	68 8e 00 00 00       	push   $0x8e
c0102c28:	6a 08                	push   $0x8
c0102c2a:	50                   	push   %eax
c0102c2b:	6a 01                	push   $0x1
c0102c2d:	e8 9e 04 00 00       	call   c01030d0 <idt_set_gate>
c0102c32:	83 c4 10             	add    $0x10,%esp
    idt_set_gate( 2, (uint32_t)isr2,  0x08, 0x8E);
c0102c35:	c7 c0 96 20 10 c0    	mov    $0xc0102096,%eax
c0102c3b:	68 8e 00 00 00       	push   $0x8e
c0102c40:	6a 08                	push   $0x8
c0102c42:	50                   	push   %eax
c0102c43:	6a 02                	push   $0x2
c0102c45:	e8 86 04 00 00       	call   c01030d0 <idt_set_gate>
c0102c4a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate( 3, (uint32_t)isr3,  0x08, 0x8E);
c0102c4d:	c7 c0 9d 20 10 c0    	mov    $0xc010209d,%eax
c0102c53:	68 8e 00 00 00       	push   $0x8e
c0102c58:	6a 08                	push   $0x8
c0102c5a:	50                   	push   %eax
c0102c5b:	6a 03                	push   $0x3
c0102c5d:	e8 6e 04 00 00       	call   c01030d0 <idt_set_gate>
c0102c62:	83 c4 10             	add    $0x10,%esp
    idt_set_gate( 4, (uint32_t)isr4,  0x08, 0x8E);
c0102c65:	c7 c0 a4 20 10 c0    	mov    $0xc01020a4,%eax
c0102c6b:	68 8e 00 00 00       	push   $0x8e
c0102c70:	6a 08                	push   $0x8
c0102c72:	50                   	push   %eax
c0102c73:	6a 04                	push   $0x4
c0102c75:	e8 56 04 00 00       	call   c01030d0 <idt_set_gate>
c0102c7a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate( 5, (uint32_t)isr5,  0x08, 0x8E);
c0102c7d:	c7 c0 ab 20 10 c0    	mov    $0xc01020ab,%eax
c0102c83:	68 8e 00 00 00       	push   $0x8e
c0102c88:	6a 08                	push   $0x8
c0102c8a:	50                   	push   %eax
c0102c8b:	6a 05                	push   $0x5
c0102c8d:	e8 3e 04 00 00       	call   c01030d0 <idt_set_gate>
c0102c92:	83 c4 10             	add    $0x10,%esp
    idt_set_gate( 6, (uint32_t)isr6,  0x08, 0x8E);
c0102c95:	c7 c0 b5 20 10 c0    	mov    $0xc01020b5,%eax
c0102c9b:	68 8e 00 00 00       	push   $0x8e
c0102ca0:	6a 08                	push   $0x8
c0102ca2:	50                   	push   %eax
c0102ca3:	6a 06                	push   $0x6
c0102ca5:	e8 26 04 00 00       	call   c01030d0 <idt_set_gate>
c0102caa:	83 c4 10             	add    $0x10,%esp
    idt_set_gate( 7, (uint32_t)isr7,  0x08, 0x8E);
c0102cad:	c7 c0 bf 20 10 c0    	mov    $0xc01020bf,%eax
c0102cb3:	68 8e 00 00 00       	push   $0x8e
c0102cb8:	6a 08                	push   $0x8
c0102cba:	50                   	push   %eax
c0102cbb:	6a 07                	push   $0x7
c0102cbd:	e8 0e 04 00 00       	call   c01030d0 <idt_set_gate>
c0102cc2:	83 c4 10             	add    $0x10,%esp
    idt_set_gate( 8, (uint32_t)isr8,  0x08, 0x8E);
c0102cc5:	c7 c0 c9 20 10 c0    	mov    $0xc01020c9,%eax
c0102ccb:	68 8e 00 00 00       	push   $0x8e
c0102cd0:	6a 08                	push   $0x8
c0102cd2:	50                   	push   %eax
c0102cd3:	6a 08                	push   $0x8
c0102cd5:	e8 f6 03 00 00       	call   c01030d0 <idt_set_gate>
c0102cda:	83 c4 10             	add    $0x10,%esp
    idt_set_gate( 9, (uint32_t)isr9,  0x08, 0x8E);
c0102cdd:	c7 c0 d1 20 10 c0    	mov    $0xc01020d1,%eax
c0102ce3:	68 8e 00 00 00       	push   $0x8e
c0102ce8:	6a 08                	push   $0x8
c0102cea:	50                   	push   %eax
c0102ceb:	6a 09                	push   $0x9
c0102ced:	e8 de 03 00 00       	call   c01030d0 <idt_set_gate>
c0102cf2:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(10, (uint32_t)isr10, 0x08, 0x8E);
c0102cf5:	c7 c0 db 20 10 c0    	mov    $0xc01020db,%eax
c0102cfb:	68 8e 00 00 00       	push   $0x8e
c0102d00:	6a 08                	push   $0x8
c0102d02:	50                   	push   %eax
c0102d03:	6a 0a                	push   $0xa
c0102d05:	e8 c6 03 00 00       	call   c01030d0 <idt_set_gate>
c0102d0a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(11, (uint32_t)isr11, 0x08, 0x8E);
c0102d0d:	c7 c0 e3 20 10 c0    	mov    $0xc01020e3,%eax
c0102d13:	68 8e 00 00 00       	push   $0x8e
c0102d18:	6a 08                	push   $0x8
c0102d1a:	50                   	push   %eax
c0102d1b:	6a 0b                	push   $0xb
c0102d1d:	e8 ae 03 00 00       	call   c01030d0 <idt_set_gate>
c0102d22:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(12, (uint32_t)isr12, 0x08, 0x8E);
c0102d25:	c7 c0 eb 20 10 c0    	mov    $0xc01020eb,%eax
c0102d2b:	68 8e 00 00 00       	push   $0x8e
c0102d30:	6a 08                	push   $0x8
c0102d32:	50                   	push   %eax
c0102d33:	6a 0c                	push   $0xc
c0102d35:	e8 96 03 00 00       	call   c01030d0 <idt_set_gate>
c0102d3a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(13, (uint32_t)isr13, 0x08, 0x8E);
c0102d3d:	c7 c0 f3 20 10 c0    	mov    $0xc01020f3,%eax
c0102d43:	68 8e 00 00 00       	push   $0x8e
c0102d48:	6a 08                	push   $0x8
c0102d4a:	50                   	push   %eax
c0102d4b:	6a 0d                	push   $0xd
c0102d4d:	e8 7e 03 00 00       	call   c01030d0 <idt_set_gate>
c0102d52:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(14, (uint32_t)isr14, 0x08, 0x8E);
c0102d55:	c7 c0 fb 20 10 c0    	mov    $0xc01020fb,%eax
c0102d5b:	68 8e 00 00 00       	push   $0x8e
c0102d60:	6a 08                	push   $0x8
c0102d62:	50                   	push   %eax
c0102d63:	6a 0e                	push   $0xe
c0102d65:	e8 66 03 00 00       	call   c01030d0 <idt_set_gate>
c0102d6a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(15, (uint32_t)isr15, 0x08, 0x8E);
c0102d6d:	c7 c0 03 21 10 c0    	mov    $0xc0102103,%eax
c0102d73:	68 8e 00 00 00       	push   $0x8e
c0102d78:	6a 08                	push   $0x8
c0102d7a:	50                   	push   %eax
c0102d7b:	6a 0f                	push   $0xf
c0102d7d:	e8 4e 03 00 00       	call   c01030d0 <idt_set_gate>
c0102d82:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(16, (uint32_t)isr16, 0x08, 0x8E);
c0102d85:	c7 c0 0d 21 10 c0    	mov    $0xc010210d,%eax
c0102d8b:	68 8e 00 00 00       	push   $0x8e
c0102d90:	6a 08                	push   $0x8
c0102d92:	50                   	push   %eax
c0102d93:	6a 10                	push   $0x10
c0102d95:	e8 36 03 00 00       	call   c01030d0 <idt_set_gate>
c0102d9a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(17, (uint32_t)isr17, 0x08, 0x8E);
c0102d9d:	c7 c0 17 21 10 c0    	mov    $0xc0102117,%eax
c0102da3:	68 8e 00 00 00       	push   $0x8e
c0102da8:	6a 08                	push   $0x8
c0102daa:	50                   	push   %eax
c0102dab:	6a 11                	push   $0x11
c0102dad:	e8 1e 03 00 00       	call   c01030d0 <idt_set_gate>
c0102db2:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(18, (uint32_t)isr18, 0x08, 0x8E);
c0102db5:	c7 c0 1f 21 10 c0    	mov    $0xc010211f,%eax
c0102dbb:	68 8e 00 00 00       	push   $0x8e
c0102dc0:	6a 08                	push   $0x8
c0102dc2:	50                   	push   %eax
c0102dc3:	6a 12                	push   $0x12
c0102dc5:	e8 06 03 00 00       	call   c01030d0 <idt_set_gate>
c0102dca:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(19, (uint32_t)isr19, 0x08, 0x8E);
c0102dcd:	c7 c0 29 21 10 c0    	mov    $0xc0102129,%eax
c0102dd3:	68 8e 00 00 00       	push   $0x8e
c0102dd8:	6a 08                	push   $0x8
c0102dda:	50                   	push   %eax
c0102ddb:	6a 13                	push   $0x13
c0102ddd:	e8 ee 02 00 00       	call   c01030d0 <idt_set_gate>
c0102de2:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(20, (uint32_t)isr20, 0x08, 0x8E);
c0102de5:	c7 c0 33 21 10 c0    	mov    $0xc0102133,%eax
c0102deb:	68 8e 00 00 00       	push   $0x8e
c0102df0:	6a 08                	push   $0x8
c0102df2:	50                   	push   %eax
c0102df3:	6a 14                	push   $0x14
c0102df5:	e8 d6 02 00 00       	call   c01030d0 <idt_set_gate>
c0102dfa:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(21, (uint32_t)isr21, 0x08, 0x8E);
c0102dfd:	c7 c0 3d 21 10 c0    	mov    $0xc010213d,%eax
c0102e03:	68 8e 00 00 00       	push   $0x8e
c0102e08:	6a 08                	push   $0x8
c0102e0a:	50                   	push   %eax
c0102e0b:	6a 15                	push   $0x15
c0102e0d:	e8 be 02 00 00       	call   c01030d0 <idt_set_gate>
c0102e12:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(22, (uint32_t)isr22, 0x08, 0x8E);
c0102e15:	c7 c0 47 21 10 c0    	mov    $0xc0102147,%eax
c0102e1b:	68 8e 00 00 00       	push   $0x8e
c0102e20:	6a 08                	push   $0x8
c0102e22:	50                   	push   %eax
c0102e23:	6a 16                	push   $0x16
c0102e25:	e8 a6 02 00 00       	call   c01030d0 <idt_set_gate>
c0102e2a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(23, (uint32_t)isr23, 0x08, 0x8E);
c0102e2d:	c7 c0 51 21 10 c0    	mov    $0xc0102151,%eax
c0102e33:	68 8e 00 00 00       	push   $0x8e
c0102e38:	6a 08                	push   $0x8
c0102e3a:	50                   	push   %eax
c0102e3b:	6a 17                	push   $0x17
c0102e3d:	e8 8e 02 00 00       	call   c01030d0 <idt_set_gate>
c0102e42:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(24, (uint32_t)isr24, 0x08, 0x8E);
c0102e45:	c7 c0 5b 21 10 c0    	mov    $0xc010215b,%eax
c0102e4b:	68 8e 00 00 00       	push   $0x8e
c0102e50:	6a 08                	push   $0x8
c0102e52:	50                   	push   %eax
c0102e53:	6a 18                	push   $0x18
c0102e55:	e8 76 02 00 00       	call   c01030d0 <idt_set_gate>
c0102e5a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(25, (uint32_t)isr25, 0x08, 0x8E);
c0102e5d:	c7 c0 65 21 10 c0    	mov    $0xc0102165,%eax
c0102e63:	68 8e 00 00 00       	push   $0x8e
c0102e68:	6a 08                	push   $0x8
c0102e6a:	50                   	push   %eax
c0102e6b:	6a 19                	push   $0x19
c0102e6d:	e8 5e 02 00 00       	call   c01030d0 <idt_set_gate>
c0102e72:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(26, (uint32_t)isr26, 0x08, 0x8E);
c0102e75:	c7 c0 6f 21 10 c0    	mov    $0xc010216f,%eax
c0102e7b:	68 8e 00 00 00       	push   $0x8e
c0102e80:	6a 08                	push   $0x8
c0102e82:	50                   	push   %eax
c0102e83:	6a 1a                	push   $0x1a
c0102e85:	e8 46 02 00 00       	call   c01030d0 <idt_set_gate>
c0102e8a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(27, (uint32_t)isr27, 0x08, 0x8E);
c0102e8d:	c7 c0 79 21 10 c0    	mov    $0xc0102179,%eax
c0102e93:	68 8e 00 00 00       	push   $0x8e
c0102e98:	6a 08                	push   $0x8
c0102e9a:	50                   	push   %eax
c0102e9b:	6a 1b                	push   $0x1b
c0102e9d:	e8 2e 02 00 00       	call   c01030d0 <idt_set_gate>
c0102ea2:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(28, (uint32_t)isr28, 0x08, 0x8E);
c0102ea5:	c7 c0 83 21 10 c0    	mov    $0xc0102183,%eax
c0102eab:	68 8e 00 00 00       	push   $0x8e
c0102eb0:	6a 08                	push   $0x8
c0102eb2:	50                   	push   %eax
c0102eb3:	6a 1c                	push   $0x1c
c0102eb5:	e8 16 02 00 00       	call   c01030d0 <idt_set_gate>
c0102eba:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(29, (uint32_t)isr29, 0x08, 0x8E);
c0102ebd:	c7 c0 8d 21 10 c0    	mov    $0xc010218d,%eax
c0102ec3:	68 8e 00 00 00       	push   $0x8e
c0102ec8:	6a 08                	push   $0x8
c0102eca:	50                   	push   %eax
c0102ecb:	6a 1d                	push   $0x1d
c0102ecd:	e8 fe 01 00 00       	call   c01030d0 <idt_set_gate>
c0102ed2:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(30, (uint32_t)isr30, 0x08, 0x8E);
c0102ed5:	c7 c0 97 21 10 c0    	mov    $0xc0102197,%eax
c0102edb:	68 8e 00 00 00       	push   $0x8e
c0102ee0:	6a 08                	push   $0x8
c0102ee2:	50                   	push   %eax
c0102ee3:	6a 1e                	push   $0x1e
c0102ee5:	e8 e6 01 00 00       	call   c01030d0 <idt_set_gate>
c0102eea:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(31, (uint32_t)isr31, 0x08, 0x8E);
c0102eed:	c7 c0 a1 21 10 c0    	mov    $0xc01021a1,%eax
c0102ef3:	68 8e 00 00 00       	push   $0x8e
c0102ef8:	6a 08                	push   $0x8
c0102efa:	50                   	push   %eax
c0102efb:	6a 1f                	push   $0x1f
c0102efd:	e8 ce 01 00 00       	call   c01030d0 <idt_set_gate>
c0102f02:	83 c4 10             	add    $0x10,%esp

//外部中断
    idt_set_gate(31, (uint32_t)isr31, 0x08, 0x8E);
c0102f05:	c7 c0 a1 21 10 c0    	mov    $0xc01021a1,%eax
c0102f0b:	68 8e 00 00 00       	push   $0x8e
c0102f10:	6a 08                	push   $0x8
c0102f12:	50                   	push   %eax
c0102f13:	6a 1f                	push   $0x1f
c0102f15:	e8 b6 01 00 00       	call   c01030d0 <idt_set_gate>
c0102f1a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(32, (uint32_t)irq0, 0x08, 0x8E);
c0102f1d:	c7 c0 b5 21 10 c0    	mov    $0xc01021b5,%eax
c0102f23:	68 8e 00 00 00       	push   $0x8e
c0102f28:	6a 08                	push   $0x8
c0102f2a:	50                   	push   %eax
c0102f2b:	6a 20                	push   $0x20
c0102f2d:	e8 9e 01 00 00       	call   c01030d0 <idt_set_gate>
c0102f32:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(33, (uint32_t)irq1, 0x08, 0x8E);
c0102f35:	c7 c0 bf 21 10 c0    	mov    $0xc01021bf,%eax
c0102f3b:	68 8e 00 00 00       	push   $0x8e
c0102f40:	6a 08                	push   $0x8
c0102f42:	50                   	push   %eax
c0102f43:	6a 21                	push   $0x21
c0102f45:	e8 86 01 00 00       	call   c01030d0 <idt_set_gate>
c0102f4a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(34, (uint32_t)irq2, 0x08, 0x8E);
c0102f4d:	c7 c0 c9 21 10 c0    	mov    $0xc01021c9,%eax
c0102f53:	68 8e 00 00 00       	push   $0x8e
c0102f58:	6a 08                	push   $0x8
c0102f5a:	50                   	push   %eax
c0102f5b:	6a 22                	push   $0x22
c0102f5d:	e8 6e 01 00 00       	call   c01030d0 <idt_set_gate>
c0102f62:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(35, (uint32_t)irq3, 0x08, 0x8E);
c0102f65:	c7 c0 d3 21 10 c0    	mov    $0xc01021d3,%eax
c0102f6b:	68 8e 00 00 00       	push   $0x8e
c0102f70:	6a 08                	push   $0x8
c0102f72:	50                   	push   %eax
c0102f73:	6a 23                	push   $0x23
c0102f75:	e8 56 01 00 00       	call   c01030d0 <idt_set_gate>
c0102f7a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(36, (uint32_t)irq4, 0x08, 0x8E);
c0102f7d:	c7 c0 dd 21 10 c0    	mov    $0xc01021dd,%eax
c0102f83:	68 8e 00 00 00       	push   $0x8e
c0102f88:	6a 08                	push   $0x8
c0102f8a:	50                   	push   %eax
c0102f8b:	6a 24                	push   $0x24
c0102f8d:	e8 3e 01 00 00       	call   c01030d0 <idt_set_gate>
c0102f92:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(37, (uint32_t)irq5, 0x08, 0x8E);
c0102f95:	c7 c0 e7 21 10 c0    	mov    $0xc01021e7,%eax
c0102f9b:	68 8e 00 00 00       	push   $0x8e
c0102fa0:	6a 08                	push   $0x8
c0102fa2:	50                   	push   %eax
c0102fa3:	6a 25                	push   $0x25
c0102fa5:	e8 26 01 00 00       	call   c01030d0 <idt_set_gate>
c0102faa:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(38, (uint32_t)irq6, 0x08, 0x8E);
c0102fad:	c7 c0 f1 21 10 c0    	mov    $0xc01021f1,%eax
c0102fb3:	68 8e 00 00 00       	push   $0x8e
c0102fb8:	6a 08                	push   $0x8
c0102fba:	50                   	push   %eax
c0102fbb:	6a 26                	push   $0x26
c0102fbd:	e8 0e 01 00 00       	call   c01030d0 <idt_set_gate>
c0102fc2:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(39, (uint32_t)irq7, 0x08, 0x8E);
c0102fc5:	c7 c0 fb 21 10 c0    	mov    $0xc01021fb,%eax
c0102fcb:	68 8e 00 00 00       	push   $0x8e
c0102fd0:	6a 08                	push   $0x8
c0102fd2:	50                   	push   %eax
c0102fd3:	6a 27                	push   $0x27
c0102fd5:	e8 f6 00 00 00       	call   c01030d0 <idt_set_gate>
c0102fda:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(40, (uint32_t)irq8, 0x08, 0x8E);
c0102fdd:	c7 c0 05 22 10 c0    	mov    $0xc0102205,%eax
c0102fe3:	68 8e 00 00 00       	push   $0x8e
c0102fe8:	6a 08                	push   $0x8
c0102fea:	50                   	push   %eax
c0102feb:	6a 28                	push   $0x28
c0102fed:	e8 de 00 00 00       	call   c01030d0 <idt_set_gate>
c0102ff2:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(41, (uint32_t)irq9, 0x08, 0x8E);
c0102ff5:	c7 c0 0f 22 10 c0    	mov    $0xc010220f,%eax
c0102ffb:	68 8e 00 00 00       	push   $0x8e
c0103000:	6a 08                	push   $0x8
c0103002:	50                   	push   %eax
c0103003:	6a 29                	push   $0x29
c0103005:	e8 c6 00 00 00       	call   c01030d0 <idt_set_gate>
c010300a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(42, (uint32_t)irq10, 0x08, 0x8E);
c010300d:	c7 c0 19 22 10 c0    	mov    $0xc0102219,%eax
c0103013:	68 8e 00 00 00       	push   $0x8e
c0103018:	6a 08                	push   $0x8
c010301a:	50                   	push   %eax
c010301b:	6a 2a                	push   $0x2a
c010301d:	e8 ae 00 00 00       	call   c01030d0 <idt_set_gate>
c0103022:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(43, (uint32_t)irq11, 0x08, 0x8E);
c0103025:	c7 c0 23 22 10 c0    	mov    $0xc0102223,%eax
c010302b:	68 8e 00 00 00       	push   $0x8e
c0103030:	6a 08                	push   $0x8
c0103032:	50                   	push   %eax
c0103033:	6a 2b                	push   $0x2b
c0103035:	e8 96 00 00 00       	call   c01030d0 <idt_set_gate>
c010303a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(44, (uint32_t)irq12, 0x08, 0x8E);
c010303d:	c7 c0 2d 22 10 c0    	mov    $0xc010222d,%eax
c0103043:	68 8e 00 00 00       	push   $0x8e
c0103048:	6a 08                	push   $0x8
c010304a:	50                   	push   %eax
c010304b:	6a 2c                	push   $0x2c
c010304d:	e8 7e 00 00 00       	call   c01030d0 <idt_set_gate>
c0103052:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(45, (uint32_t)irq13, 0x08, 0x8E);
c0103055:	c7 c0 37 22 10 c0    	mov    $0xc0102237,%eax
c010305b:	68 8e 00 00 00       	push   $0x8e
c0103060:	6a 08                	push   $0x8
c0103062:	50                   	push   %eax
c0103063:	6a 2d                	push   $0x2d
c0103065:	e8 66 00 00 00       	call   c01030d0 <idt_set_gate>
c010306a:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(46, (uint32_t)irq14, 0x08, 0x8E);
c010306d:	c7 c0 41 22 10 c0    	mov    $0xc0102241,%eax
c0103073:	68 8e 00 00 00       	push   $0x8e
c0103078:	6a 08                	push   $0x8
c010307a:	50                   	push   %eax
c010307b:	6a 2e                	push   $0x2e
c010307d:	e8 4e 00 00 00       	call   c01030d0 <idt_set_gate>
c0103082:	83 c4 10             	add    $0x10,%esp
    idt_set_gate(47, (uint32_t)irq15, 0x08, 0x8E);
c0103085:	c7 c0 4b 22 10 c0    	mov    $0xc010224b,%eax
c010308b:	68 8e 00 00 00       	push   $0x8e
c0103090:	6a 08                	push   $0x8
c0103092:	50                   	push   %eax
c0103093:	6a 2f                	push   $0x2f
c0103095:	e8 36 00 00 00       	call   c01030d0 <idt_set_gate>
c010309a:	83 c4 10             	add    $0x10,%esp

    // 系统调用中断
    idt_set_gate(255, (uint32_t)isr255, 0x08, 0x8E);
c010309d:	c7 c0 ab 21 10 c0    	mov    $0xc01021ab,%eax
c01030a3:	68 8e 00 00 00       	push   $0x8e
c01030a8:	6a 08                	push   $0x8
c01030aa:	50                   	push   %eax
c01030ab:	68 ff 00 00 00       	push   $0xff
c01030b0:	e8 1b 00 00 00       	call   c01030d0 <idt_set_gate>
c01030b5:	83 c4 10             	add    $0x10,%esp

    // 更新设置中断描述符表
    idt_flush((uint32_t)&idt_ptr);
c01030b8:	c7 c0 20 64 18 c0    	mov    $0xc0186420,%eax
c01030be:	83 ec 0c             	sub    $0xc,%esp
c01030c1:	50                   	push   %eax
c01030c2:	e8 39 ef ff ff       	call   c0102000 <idt_flush>
c01030c7:	83 c4 10             	add    $0x10,%esp
}
c01030ca:	90                   	nop
c01030cb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01030ce:	c9                   	leave  
c01030cf:	c3                   	ret    

c01030d0 <idt_set_gate>:

// 设置中断描述符
static void idt_set_gate(uint8_t num, uint32_t base, uint16_t sel, uint8_t flags)
{
c01030d0:	55                   	push   %ebp
c01030d1:	89 e5                	mov    %esp,%ebp
c01030d3:	53                   	push   %ebx
c01030d4:	83 ec 0c             	sub    $0xc,%esp
c01030d7:	e8 24 0f 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c01030dc:	05 24 1f 00 00       	add    $0x1f24,%eax
c01030e1:	8b 5d 08             	mov    0x8(%ebp),%ebx
c01030e4:	8b 4d 10             	mov    0x10(%ebp),%ecx
c01030e7:	8b 55 14             	mov    0x14(%ebp),%edx
c01030ea:	88 5d f8             	mov    %bl,-0x8(%ebp)
c01030ed:	66 89 4d f4          	mov    %cx,-0xc(%ebp)
c01030f1:	88 55 f0             	mov    %dl,-0x10(%ebp)
    idt_entries[num].base_lo = base & 0xFFFF;
c01030f4:	0f b6 4d f8          	movzbl -0x8(%ebp),%ecx
c01030f8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01030fb:	89 d3                	mov    %edx,%ebx
c01030fd:	c7 c2 40 64 18 c0    	mov    $0xc0186440,%edx
c0103103:	66 89 1c ca          	mov    %bx,(%edx,%ecx,8)
    idt_entries[num].base_hi = (base >> 16) & 0xFFFF;
c0103107:	8b 55 0c             	mov    0xc(%ebp),%edx
c010310a:	c1 ea 10             	shr    $0x10,%edx
c010310d:	0f b6 4d f8          	movzbl -0x8(%ebp),%ecx
c0103111:	89 d3                	mov    %edx,%ebx
c0103113:	c7 c2 40 64 18 c0    	mov    $0xc0186440,%edx
c0103119:	66 89 5c ca 06       	mov    %bx,0x6(%edx,%ecx,8)
    idt_entries[num].sel     = sel;
c010311e:	0f b6 4d f8          	movzbl -0x8(%ebp),%ecx
c0103122:	c7 c2 40 64 18 c0    	mov    $0xc0186440,%edx
c0103128:	0f b7 5d f4          	movzwl -0xc(%ebp),%ebx
c010312c:	66 89 5c ca 02       	mov    %bx,0x2(%edx,%ecx,8)
    idt_entries[num].always0 = 0;
c0103131:	0f b6 4d f8          	movzbl -0x8(%ebp),%ecx
c0103135:	c7 c2 40 64 18 c0    	mov    $0xc0186440,%edx
c010313b:	c6 44 ca 04 00       	movb   $0x0,0x4(%edx,%ecx,8)

    // 先留下 0x60 这个魔数，以后实现用户态时候
    // 这个与运算可以设置中断门的特权级别为 3
    idt_entries[num].flags = flags;  // | 0x60
c0103140:	0f b6 55 f8          	movzbl -0x8(%ebp),%edx
c0103144:	c7 c0 40 64 18 c0    	mov    $0xc0186440,%eax
c010314a:	0f b6 4d f0          	movzbl -0x10(%ebp),%ecx
c010314e:	88 4c d0 05          	mov    %cl,0x5(%eax,%edx,8)
}
c0103152:	90                   	nop
c0103153:	83 c4 0c             	add    $0xc,%esp
c0103156:	5b                   	pop    %ebx
c0103157:	5d                   	pop    %ebp
c0103158:	c3                   	ret    

c0103159 <register_interrupt_handler>:


//中断注册函数
void register_interrupt_handler(uint8_t n, interrupt_handler_t h)
{
c0103159:	55                   	push   %ebp
c010315a:	89 e5                	mov    %esp,%ebp
c010315c:	83 ec 04             	sub    $0x4,%esp
c010315f:	e8 9c 0e 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0103164:	05 9c 1e 00 00       	add    $0x1e9c,%eax
c0103169:	8b 55 08             	mov    0x8(%ebp),%edx
c010316c:	88 55 fc             	mov    %dl,-0x4(%ebp)
    interrupt_handlers[n]=h;
c010316f:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
c0103173:	c7 c0 00 60 18 c0    	mov    $0xc0186000,%eax
c0103179:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010317c:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
c010317f:	90                   	nop
c0103180:	c9                   	leave  
c0103181:	c3                   	ret    

c0103182 <init_gdt>:
// 声明内核栈地址
extern uint32_t stack;

// 初始化全局描述符表
void init_gdt()
{
c0103182:	55                   	push   %ebp
c0103183:	89 e5                	mov    %esp,%ebp
c0103185:	53                   	push   %ebx
c0103186:	83 ec 04             	sub    $0x4,%esp
c0103189:	e8 76 0e 00 00       	call   c0104004 <__x86.get_pc_thunk.bx>
c010318e:	81 c3 72 1e 00 00    	add    $0x1e72,%ebx
    // 全局描述符表界限 e.g. 从 0 开始，所以总长要 - 1
    gdt_ptr.limit = sizeof(gdt_entry_t) * GDT_LENGTH - 1;
c0103194:	c7 c0 68 6c 18 c0    	mov    $0xc0186c68,%eax
c010319a:	66 c7 00 27 00       	movw   $0x27,(%eax)
    gdt_ptr.base = (uint32_t)&gdt_entries;
c010319f:	c7 c0 40 6c 18 c0    	mov    $0xc0186c40,%eax
c01031a5:	89 c2                	mov    %eax,%edx
c01031a7:	c7 c0 68 6c 18 c0    	mov    $0xc0186c68,%eax
c01031ad:	89 50 02             	mov    %edx,0x2(%eax)

    // 采用 Intel 平坦模型
    gdt_set_gate(0, 0, 0, 0, 0);   // 按照 Intel 文档要求，第一个描述符必须全 0
c01031b0:	83 ec 0c             	sub    $0xc,%esp
c01031b3:	6a 00                	push   $0x0
c01031b5:	6a 00                	push   $0x0
c01031b7:	6a 00                	push   $0x0
c01031b9:	6a 00                	push   $0x0
c01031bb:	6a 00                	push   $0x0
c01031bd:	e8 87 00 00 00       	call   c0103249 <gdt_set_gate>
c01031c2:	83 c4 20             	add    $0x20,%esp
    gdt_set_gate(1, 0, 0xFFFFFFFF, 0x9A, 0xCF);     // 指令段
c01031c5:	83 ec 0c             	sub    $0xc,%esp
c01031c8:	68 cf 00 00 00       	push   $0xcf
c01031cd:	68 9a 00 00 00       	push   $0x9a
c01031d2:	6a ff                	push   $0xffffffff
c01031d4:	6a 00                	push   $0x0
c01031d6:	6a 01                	push   $0x1
c01031d8:	e8 6c 00 00 00       	call   c0103249 <gdt_set_gate>
c01031dd:	83 c4 20             	add    $0x20,%esp
    gdt_set_gate(2, 0, 0xFFFFFFFF, 0x92, 0xCF);     // 数据段
c01031e0:	83 ec 0c             	sub    $0xc,%esp
c01031e3:	68 cf 00 00 00       	push   $0xcf
c01031e8:	68 92 00 00 00       	push   $0x92
c01031ed:	6a ff                	push   $0xffffffff
c01031ef:	6a 00                	push   $0x0
c01031f1:	6a 02                	push   $0x2
c01031f3:	e8 51 00 00 00       	call   c0103249 <gdt_set_gate>
c01031f8:	83 c4 20             	add    $0x20,%esp
    gdt_set_gate(3, 0, 0xFFFFFFFF, 0xFA, 0xCF);     // 用户模式代码段
c01031fb:	83 ec 0c             	sub    $0xc,%esp
c01031fe:	68 cf 00 00 00       	push   $0xcf
c0103203:	68 fa 00 00 00       	push   $0xfa
c0103208:	6a ff                	push   $0xffffffff
c010320a:	6a 00                	push   $0x0
c010320c:	6a 03                	push   $0x3
c010320e:	e8 36 00 00 00       	call   c0103249 <gdt_set_gate>
c0103213:	83 c4 20             	add    $0x20,%esp
    gdt_set_gate(4, 0, 0xFFFFFFFF, 0xF2, 0xCF);     // 用户模式数据段
c0103216:	83 ec 0c             	sub    $0xc,%esp
c0103219:	68 cf 00 00 00       	push   $0xcf
c010321e:	68 f2 00 00 00       	push   $0xf2
c0103223:	6a ff                	push   $0xffffffff
c0103225:	6a 00                	push   $0x0
c0103227:	6a 04                	push   $0x4
c0103229:	e8 1b 00 00 00       	call   c0103249 <gdt_set_gate>
c010322e:	83 c4 20             	add    $0x20,%esp

    // 加载全局描述符表地址到 GPTR 寄存器
    gdt_flush((uint32_t)&gdt_ptr);
c0103231:	c7 c0 68 6c 18 c0    	mov    $0xc0186c68,%eax
c0103237:	83 ec 0c             	sub    $0xc,%esp
c010323a:	50                   	push   %eax
c010323b:	e8 d0 ed ff ff       	call   c0102010 <gdt_flush>
c0103240:	83 c4 10             	add    $0x10,%esp
}
c0103243:	90                   	nop
c0103244:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103247:	c9                   	leave  
c0103248:	c3                   	ret    

c0103249 <gdt_set_gate>:

// 全局描述符表构造函数，根据下标构造
// 参数分别是 数组下标、基地址、限长、访问标志，其它访问标志
static void gdt_set_gate(int32_t num, uint32_t base, uint32_t limit, uint8_t access, uint8_t gran)
{
c0103249:	55                   	push   %ebp
c010324a:	89 e5                	mov    %esp,%ebp
c010324c:	53                   	push   %ebx
c010324d:	83 ec 08             	sub    $0x8,%esp
c0103250:	e8 ab 0d 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0103255:	05 ab 1d 00 00       	add    $0x1dab,%eax
c010325a:	8b 4d 14             	mov    0x14(%ebp),%ecx
c010325d:	8b 55 18             	mov    0x18(%ebp),%edx
c0103260:	88 4d f8             	mov    %cl,-0x8(%ebp)
c0103263:	88 55 f4             	mov    %dl,-0xc(%ebp)
    gdt_entries[num].base_low     = (base & 0xFFFF);
c0103266:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103269:	89 d3                	mov    %edx,%ebx
c010326b:	c7 c2 40 6c 18 c0    	mov    $0xc0186c40,%edx
c0103271:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0103274:	66 89 5c ca 02       	mov    %bx,0x2(%edx,%ecx,8)
    gdt_entries[num].base_middle  = (base >> 16) & 0xFF;
c0103279:	8b 55 0c             	mov    0xc(%ebp),%edx
c010327c:	c1 ea 10             	shr    $0x10,%edx
c010327f:	89 d3                	mov    %edx,%ebx
c0103281:	c7 c2 40 6c 18 c0    	mov    $0xc0186c40,%edx
c0103287:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010328a:	88 5c ca 04          	mov    %bl,0x4(%edx,%ecx,8)
    gdt_entries[num].base_high    = (base >> 24) & 0xFF;
c010328e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103291:	c1 ea 18             	shr    $0x18,%edx
c0103294:	89 d3                	mov    %edx,%ebx
c0103296:	c7 c2 40 6c 18 c0    	mov    $0xc0186c40,%edx
c010329c:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010329f:	88 5c ca 07          	mov    %bl,0x7(%edx,%ecx,8)

    gdt_entries[num].limit_low    = (limit & 0xFFFF);
c01032a3:	8b 55 10             	mov    0x10(%ebp),%edx
c01032a6:	89 d3                	mov    %edx,%ebx
c01032a8:	c7 c2 40 6c 18 c0    	mov    $0xc0186c40,%edx
c01032ae:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01032b1:	66 89 1c ca          	mov    %bx,(%edx,%ecx,8)
    gdt_entries[num].granularity  = (limit >> 16) & 0x0F;
c01032b5:	8b 55 10             	mov    0x10(%ebp),%edx
c01032b8:	c1 ea 10             	shr    $0x10,%edx
c01032bb:	89 d3                	mov    %edx,%ebx
c01032bd:	83 e3 0f             	and    $0xf,%ebx
c01032c0:	c7 c2 40 6c 18 c0    	mov    $0xc0186c40,%edx
c01032c6:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01032c9:	88 5c ca 06          	mov    %bl,0x6(%edx,%ecx,8)

    gdt_entries[num].granularity |= gran & 0xF0;
c01032cd:	c7 c2 40 6c 18 c0    	mov    $0xc0186c40,%edx
c01032d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01032d6:	0f b6 54 ca 06       	movzbl 0x6(%edx,%ecx,8),%edx
c01032db:	89 d1                	mov    %edx,%ecx
c01032dd:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
c01032e1:	83 e2 f0             	and    $0xfffffff0,%edx
c01032e4:	09 ca                	or     %ecx,%edx
c01032e6:	89 d3                	mov    %edx,%ebx
c01032e8:	c7 c2 40 6c 18 c0    	mov    $0xc0186c40,%edx
c01032ee:	8b 4d 08             	mov    0x8(%ebp),%ecx
c01032f1:	88 5c ca 06          	mov    %bl,0x6(%edx,%ecx,8)
    gdt_entries[num].access       = access;
c01032f5:	c7 c0 40 6c 18 c0    	mov    $0xc0186c40,%eax
c01032fb:	8b 55 08             	mov    0x8(%ebp),%edx
c01032fe:	0f b6 4d f8          	movzbl -0x8(%ebp),%ecx
c0103302:	88 4c d0 05          	mov    %cl,0x5(%eax,%edx,8)
c0103306:	90                   	nop
c0103307:	83 c4 08             	add    $0x8,%esp
c010330a:	5b                   	pop    %ebx
c010330b:	5d                   	pop    %ebp
c010330c:	c3                   	ret    

c010330d <move_cursor>:
// 屏幕"光标"的坐标
static uint8_t cursor_x = 0;
static uint8_t cursor_y = 0;

static void move_cursor()
{
c010330d:	55                   	push   %ebp
c010330e:	89 e5                	mov    %esp,%ebp
c0103310:	53                   	push   %ebx
c0103311:	83 ec 14             	sub    $0x14,%esp
c0103314:	e8 eb 0c 00 00       	call   c0104004 <__x86.get_pc_thunk.bx>
c0103319:	81 c3 e7 1c 00 00    	add    $0x1ce7,%ebx
    // 屏幕是 80 字节宽
    uint16_t cursorLocation = cursor_y * 80 + cursor_x;
c010331f:	0f b6 83 29 01 08 00 	movzbl 0x80129(%ebx),%eax
c0103326:	0f b6 d0             	movzbl %al,%edx
c0103329:	89 d0                	mov    %edx,%eax
c010332b:	c1 e0 02             	shl    $0x2,%eax
c010332e:	01 d0                	add    %edx,%eax
c0103330:	c1 e0 04             	shl    $0x4,%eax
c0103333:	89 c2                	mov    %eax,%edx
c0103335:	0f b6 83 28 01 08 00 	movzbl 0x80128(%ebx),%eax
c010333c:	0f b6 c0             	movzbl %al,%eax
c010333f:	01 d0                	add    %edx,%eax
c0103341:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    
    // 在这里用到的两个内部寄存器的编号为14与15，分别表示光标位置
    // 的高8位与低8位。

    outb(0x3D4, 14);                    // 告诉 VGA 我们要设置光标的高字节
c0103345:	83 ec 08             	sub    $0x8,%esp
c0103348:	6a 0e                	push   $0xe
c010334a:	68 d4 03 00 00       	push   $0x3d4
c010334f:	e8 fa 08 00 00       	call   c0103c4e <outb>
c0103354:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, cursorLocation >> 8);   // 发送高 8 位
c0103357:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010335b:	66 c1 e8 08          	shr    $0x8,%ax
c010335f:	0f b7 c0             	movzwl %ax,%eax
c0103362:	83 ec 08             	sub    $0x8,%esp
c0103365:	50                   	push   %eax
c0103366:	68 d5 03 00 00       	push   $0x3d5
c010336b:	e8 de 08 00 00       	call   c0103c4e <outb>
c0103370:	83 c4 10             	add    $0x10,%esp
    outb(0x3D4, 15);                    // 告诉 VGA 我们要设置光标的低字节
c0103373:	83 ec 08             	sub    $0x8,%esp
c0103376:	6a 0f                	push   $0xf
c0103378:	68 d4 03 00 00       	push   $0x3d4
c010337d:	e8 cc 08 00 00       	call   c0103c4e <outb>
c0103382:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, (cursorLocation<<8)>>8);        // 发送低 8 位
c0103385:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0103389:	c1 e0 08             	shl    $0x8,%eax
c010338c:	c1 f8 08             	sar    $0x8,%eax
c010338f:	83 ec 08             	sub    $0x8,%esp
c0103392:	50                   	push   %eax
c0103393:	68 d5 03 00 00       	push   $0x3d5
c0103398:	e8 b1 08 00 00       	call   c0103c4e <outb>
c010339d:	83 c4 10             	add    $0x10,%esp
}
c01033a0:	90                   	nop
c01033a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01033a4:	c9                   	leave  
c01033a5:	c3                   	ret    

c01033a6 <console_clear>:

void console_clear()
{
c01033a6:	55                   	push   %ebp
c01033a7:	89 e5                	mov    %esp,%ebp
c01033a9:	83 ec 18             	sub    $0x18,%esp
c01033ac:	e8 4f 0c 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c01033b1:	05 4f 1c 00 00       	add    $0x1c4f,%eax
    uint8_t attribute_byte = (0 << 4) | (15 & 0x0F);
c01033b6:	c6 45 f3 0f          	movb   $0xf,-0xd(%ebp)
    uint16_t blank = 0x20 | (attribute_byte << 8);
c01033ba:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
c01033be:	c1 e2 08             	shl    $0x8,%edx
c01033c1:	83 ca 20             	or     $0x20,%edx
c01033c4:	66 89 55 f0          	mov    %dx,-0x10(%ebp)

    for (int i = 0; i < 80 * 25; i++) {
c01033c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01033cf:	eb 18                	jmp    c01033e9 <console_clear+0x43>
          video_memory[i] = blank;
c01033d1:	8b 90 08 f0 ff ff    	mov    -0xff8(%eax),%edx
c01033d7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c01033da:	01 c9                	add    %ecx,%ecx
c01033dc:	01 d1                	add    %edx,%ecx
c01033de:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c01033e2:	66 89 11             	mov    %dx,(%ecx)
    for (int i = 0; i < 80 * 25; i++) {
c01033e5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01033e9:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c01033f0:	7e df                	jle    c01033d1 <console_clear+0x2b>
    }

    cursor_x = 0;
c01033f2:	c6 80 28 01 08 00 00 	movb   $0x0,0x80128(%eax)
    cursor_y = 0;
c01033f9:	c6 80 29 01 08 00 00 	movb   $0x0,0x80129(%eax)
    move_cursor();
c0103400:	e8 08 ff ff ff       	call   c010330d <move_cursor>
}
c0103405:	90                   	nop
c0103406:	c9                   	leave  
c0103407:	c3                   	ret    

c0103408 <scroll>:

static void scroll()
{
c0103408:	55                   	push   %ebp
c0103409:	89 e5                	mov    %esp,%ebp
c010340b:	53                   	push   %ebx
c010340c:	83 ec 10             	sub    $0x10,%esp
c010340f:	e8 ec 0b 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0103414:	05 ec 1b 00 00       	add    $0x1bec,%eax
    // attribute_byte 被构造出一个黑底白字的描述格式
    uint8_t attribute_byte = (0 << 4) | (15 & 0x0F);
c0103419:	c6 45 f7 0f          	movb   $0xf,-0x9(%ebp)
    uint16_t blank = 0x20 | (attribute_byte << 8);  // space 是 0x20
c010341d:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c0103421:	c1 e2 08             	shl    $0x8,%edx
c0103424:	83 ca 20             	or     $0x20,%edx
c0103427:	66 89 55 f4          	mov    %dx,-0xc(%ebp)

    // cursor_y 到 25 的时候，就该换行了
    if (cursor_y >= 25) {
c010342b:	0f b6 90 29 01 08 00 	movzbl 0x80129(%eax),%edx
c0103432:	80 fa 18             	cmp    $0x18,%dl
c0103435:	76 6a                	jbe    c01034a1 <scroll+0x99>
        // 将所有行的显示数据复制到上一行，第一行永远消失了...
        int i;
        
        for (i = 0 * 80; i < 24 * 80; i++) {
c0103437:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c010343e:	eb 27                	jmp    c0103467 <scroll+0x5f>
              video_memory[i] = video_memory[i+80];
c0103440:	8b 90 08 f0 ff ff    	mov    -0xff8(%eax),%edx
c0103446:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0103449:	83 c1 50             	add    $0x50,%ecx
c010344c:	01 c9                	add    %ecx,%ecx
c010344e:	01 ca                	add    %ecx,%edx
c0103450:	8b 88 08 f0 ff ff    	mov    -0xff8(%eax),%ecx
c0103456:	8b 5d f8             	mov    -0x8(%ebp),%ebx
c0103459:	01 db                	add    %ebx,%ebx
c010345b:	01 d9                	add    %ebx,%ecx
c010345d:	0f b7 12             	movzwl (%edx),%edx
c0103460:	66 89 11             	mov    %dx,(%ecx)
        for (i = 0 * 80; i < 24 * 80; i++) {
c0103463:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c0103467:	81 7d f8 7f 07 00 00 	cmpl   $0x77f,-0x8(%ebp)
c010346e:	7e d0                	jle    c0103440 <scroll+0x38>
        }

        // 最后的一行数据现在填充空格，不显示任何字符
        for (i = 24 * 80; i < 25 * 80; i++) {
c0103470:	c7 45 f8 80 07 00 00 	movl   $0x780,-0x8(%ebp)
c0103477:	eb 18                	jmp    c0103491 <scroll+0x89>
              video_memory[i] = blank;
c0103479:	8b 90 08 f0 ff ff    	mov    -0xff8(%eax),%edx
c010347f:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0103482:	01 c9                	add    %ecx,%ecx
c0103484:	01 d1                	add    %edx,%ecx
c0103486:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c010348a:	66 89 11             	mov    %dx,(%ecx)
        for (i = 24 * 80; i < 25 * 80; i++) {
c010348d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c0103491:	81 7d f8 cf 07 00 00 	cmpl   $0x7cf,-0x8(%ebp)
c0103498:	7e df                	jle    c0103479 <scroll+0x71>
        }
        
        // 向上移动了一行，所以 cursor_y 现在是 24
        cursor_y = 24;
c010349a:	c6 80 29 01 08 00 18 	movb   $0x18,0x80129(%eax)
    }
}
c01034a1:	90                   	nop
c01034a2:	83 c4 10             	add    $0x10,%esp
c01034a5:	5b                   	pop    %ebx
c01034a6:	5d                   	pop    %ebp
c01034a7:	c3                   	ret    

c01034a8 <console_putc_color>:

void console_putc_color(char c, real_color_t back, real_color_t fore)
{
c01034a8:	55                   	push   %ebp
c01034a9:	89 e5                	mov    %esp,%ebp
c01034ab:	56                   	push   %esi
c01034ac:	53                   	push   %ebx
c01034ad:	83 ec 20             	sub    $0x20,%esp
c01034b0:	e8 4b 0b 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c01034b5:	05 4b 1b 00 00       	add    $0x1b4b,%eax
c01034ba:	8b 55 08             	mov    0x8(%ebp),%edx
c01034bd:	88 55 e4             	mov    %dl,-0x1c(%ebp)
    uint8_t back_color = (uint8_t)back;
c01034c0:	8b 55 0c             	mov    0xc(%ebp),%edx
c01034c3:	88 55 f7             	mov    %dl,-0x9(%ebp)
    uint8_t fore_color = (uint8_t)fore;
c01034c6:	8b 55 10             	mov    0x10(%ebp),%edx
c01034c9:	88 55 f6             	mov    %dl,-0xa(%ebp)

    uint8_t attribute_byte = (back_color << 4) | (fore_color & 0x0F);
c01034cc:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
c01034d0:	c1 e2 04             	shl    $0x4,%edx
c01034d3:	89 d1                	mov    %edx,%ecx
c01034d5:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
c01034d9:	83 e2 0f             	and    $0xf,%edx
c01034dc:	09 ca                	or     %ecx,%edx
c01034de:	88 55 f5             	mov    %dl,-0xb(%ebp)
    uint16_t attribute = attribute_byte << 8;
c01034e1:	0f b6 55 f5          	movzbl -0xb(%ebp),%edx
c01034e5:	c1 e2 08             	shl    $0x8,%edx
c01034e8:	66 89 55 f2          	mov    %dx,-0xe(%ebp)

    // 0x08 是退格键的 ASCII 码
    // 0x09 是tab 键的 ASCII 码
    if (c == 0x08 && cursor_x) {
c01034ec:	80 7d e4 08          	cmpb   $0x8,-0x1c(%ebp)
c01034f0:	75 20                	jne    c0103512 <console_putc_color+0x6a>
c01034f2:	0f b6 90 28 01 08 00 	movzbl 0x80128(%eax),%edx
c01034f9:	84 d2                	test   %dl,%dl
c01034fb:	74 15                	je     c0103512 <console_putc_color+0x6a>
          cursor_x--;
c01034fd:	0f b6 90 28 01 08 00 	movzbl 0x80128(%eax),%edx
c0103504:	83 ea 01             	sub    $0x1,%edx
c0103507:	88 90 28 01 08 00    	mov    %dl,0x80128(%eax)
c010350d:	e9 a0 00 00 00       	jmp    c01035b2 <console_putc_color+0x10a>
    } else if (c == 0x09) {
c0103512:	80 7d e4 09          	cmpb   $0x9,-0x1c(%ebp)
c0103516:	75 18                	jne    c0103530 <console_putc_color+0x88>
          cursor_x = (cursor_x+8) & ~(8-1);
c0103518:	0f b6 90 28 01 08 00 	movzbl 0x80128(%eax),%edx
c010351f:	83 c2 08             	add    $0x8,%edx
c0103522:	83 e2 f8             	and    $0xfffffff8,%edx
c0103525:	88 90 28 01 08 00    	mov    %dl,0x80128(%eax)
c010352b:	e9 82 00 00 00       	jmp    c01035b2 <console_putc_color+0x10a>
    } else if (c == '\r') {
c0103530:	80 7d e4 0d          	cmpb   $0xd,-0x1c(%ebp)
c0103534:	75 09                	jne    c010353f <console_putc_color+0x97>
          cursor_x = 0;
c0103536:	c6 80 28 01 08 00 00 	movb   $0x0,0x80128(%eax)
c010353d:	eb 73                	jmp    c01035b2 <console_putc_color+0x10a>
    } else if (c == '\n') {
c010353f:	80 7d e4 0a          	cmpb   $0xa,-0x1c(%ebp)
c0103543:	75 19                	jne    c010355e <console_putc_color+0xb6>
        cursor_x = 0;
c0103545:	c6 80 28 01 08 00 00 	movb   $0x0,0x80128(%eax)
        cursor_y++;
c010354c:	0f b6 90 29 01 08 00 	movzbl 0x80129(%eax),%edx
c0103553:	83 c2 01             	add    $0x1,%edx
c0103556:	88 90 29 01 08 00    	mov    %dl,0x80129(%eax)
c010355c:	eb 54                	jmp    c01035b2 <console_putc_color+0x10a>
    } else if (c >= ' ') {
c010355e:	80 7d e4 1f          	cmpb   $0x1f,-0x1c(%ebp)
c0103562:	7e 4e                	jle    c01035b2 <console_putc_color+0x10a>
        video_memory[cursor_y*80 + cursor_x] = c | attribute;
c0103564:	66 0f be 4d e4       	movsbw -0x1c(%ebp),%cx
c0103569:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010356d:	89 ce                	mov    %ecx,%esi
c010356f:	09 d6                	or     %edx,%esi
c0103571:	8b 98 08 f0 ff ff    	mov    -0xff8(%eax),%ebx
c0103577:	0f b6 90 29 01 08 00 	movzbl 0x80129(%eax),%edx
c010357e:	0f b6 ca             	movzbl %dl,%ecx
c0103581:	89 ca                	mov    %ecx,%edx
c0103583:	c1 e2 02             	shl    $0x2,%edx
c0103586:	01 ca                	add    %ecx,%edx
c0103588:	c1 e2 04             	shl    $0x4,%edx
c010358b:	89 d1                	mov    %edx,%ecx
c010358d:	0f b6 90 28 01 08 00 	movzbl 0x80128(%eax),%edx
c0103594:	0f b6 d2             	movzbl %dl,%edx
c0103597:	01 ca                	add    %ecx,%edx
c0103599:	01 d2                	add    %edx,%edx
c010359b:	01 da                	add    %ebx,%edx
c010359d:	89 f1                	mov    %esi,%ecx
c010359f:	66 89 0a             	mov    %cx,(%edx)
        cursor_x++;
c01035a2:	0f b6 90 28 01 08 00 	movzbl 0x80128(%eax),%edx
c01035a9:	83 c2 01             	add    $0x1,%edx
c01035ac:	88 90 28 01 08 00    	mov    %dl,0x80128(%eax)
    }

    // 每 80 个字符一行，满80就必须换行了
    if (cursor_x >= 80) {
c01035b2:	0f b6 90 28 01 08 00 	movzbl 0x80128(%eax),%edx
c01035b9:	80 fa 4f             	cmp    $0x4f,%dl
c01035bc:	76 17                	jbe    c01035d5 <console_putc_color+0x12d>
        cursor_x = 0;
c01035be:	c6 80 28 01 08 00 00 	movb   $0x0,0x80128(%eax)
        cursor_y ++;
c01035c5:	0f b6 90 29 01 08 00 	movzbl 0x80129(%eax),%edx
c01035cc:	83 c2 01             	add    $0x1,%edx
c01035cf:	88 90 29 01 08 00    	mov    %dl,0x80129(%eax)
    }

    // 如果需要的话滚动屏幕显示
    scroll();
c01035d5:	e8 2e fe ff ff       	call   c0103408 <scroll>

    // 移动硬件的输入光标
    move_cursor();
c01035da:	e8 2e fd ff ff       	call   c010330d <move_cursor>
}
c01035df:	90                   	nop
c01035e0:	83 c4 20             	add    $0x20,%esp
c01035e3:	5b                   	pop    %ebx
c01035e4:	5e                   	pop    %esi
c01035e5:	5d                   	pop    %ebp
c01035e6:	c3                   	ret    

c01035e7 <console_write>:

void console_write(char *cstr)
{
c01035e7:	55                   	push   %ebp
c01035e8:	89 e5                	mov    %esp,%ebp
c01035ea:	83 ec 08             	sub    $0x8,%esp
c01035ed:	e8 0e 0a 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c01035f2:	05 0e 1a 00 00       	add    $0x1a0e,%eax
    while (*cstr) {
c01035f7:	eb 1f                	jmp    c0103618 <console_write+0x31>
          console_putc_color(*cstr++, rc_black, rc_white);
c01035f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01035fc:	8d 50 01             	lea    0x1(%eax),%edx
c01035ff:	89 55 08             	mov    %edx,0x8(%ebp)
c0103602:	0f b6 00             	movzbl (%eax),%eax
c0103605:	0f be c0             	movsbl %al,%eax
c0103608:	83 ec 04             	sub    $0x4,%esp
c010360b:	6a 0f                	push   $0xf
c010360d:	6a 00                	push   $0x0
c010360f:	50                   	push   %eax
c0103610:	e8 93 fe ff ff       	call   c01034a8 <console_putc_color>
c0103615:	83 c4 10             	add    $0x10,%esp
    while (*cstr) {
c0103618:	8b 45 08             	mov    0x8(%ebp),%eax
c010361b:	0f b6 00             	movzbl (%eax),%eax
c010361e:	84 c0                	test   %al,%al
c0103620:	75 d7                	jne    c01035f9 <console_write+0x12>
    }
}
c0103622:	90                   	nop
c0103623:	c9                   	leave  
c0103624:	c3                   	ret    

c0103625 <console_write_color>:

void console_write_color(char *cstr, real_color_t back, real_color_t fore)
{
c0103625:	55                   	push   %ebp
c0103626:	89 e5                	mov    %esp,%ebp
c0103628:	83 ec 08             	sub    $0x8,%esp
c010362b:	e8 d0 09 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0103630:	05 d0 19 00 00       	add    $0x19d0,%eax
    while (*cstr) {
c0103635:	eb 21                	jmp    c0103658 <console_write_color+0x33>
          console_putc_color(*cstr++, back, fore);
c0103637:	8b 45 08             	mov    0x8(%ebp),%eax
c010363a:	8d 50 01             	lea    0x1(%eax),%edx
c010363d:	89 55 08             	mov    %edx,0x8(%ebp)
c0103640:	0f b6 00             	movzbl (%eax),%eax
c0103643:	0f be c0             	movsbl %al,%eax
c0103646:	83 ec 04             	sub    $0x4,%esp
c0103649:	ff 75 10             	pushl  0x10(%ebp)
c010364c:	ff 75 0c             	pushl  0xc(%ebp)
c010364f:	50                   	push   %eax
c0103650:	e8 53 fe ff ff       	call   c01034a8 <console_putc_color>
c0103655:	83 c4 10             	add    $0x10,%esp
    while (*cstr) {
c0103658:	8b 45 08             	mov    0x8(%ebp),%eax
c010365b:	0f b6 00             	movzbl (%eax),%eax
c010365e:	84 c0                	test   %al,%al
c0103660:	75 d5                	jne    c0103637 <console_write_color+0x12>
    }
}
c0103662:	90                   	nop
c0103663:	c9                   	leave  
c0103664:	c3                   	ret    

c0103665 <console_write_dec>:

void console_write_dec(uint32_t n, real_color_t back, real_color_t fore)
{
c0103665:	55                   	push   %ebp
c0103666:	89 e5                	mov    %esp,%ebp
c0103668:	53                   	push   %ebx
c0103669:	83 ec 04             	sub    $0x4,%esp
c010366c:	e8 8f 09 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0103671:	05 8f 19 00 00       	add    $0x198f,%eax
  console_write_color(uintTostring(n),back,fore);     
c0103676:	83 ec 0c             	sub    $0xc,%esp
c0103679:	ff 75 08             	pushl  0x8(%ebp)
c010367c:	89 c3                	mov    %eax,%ebx
c010367e:	e8 89 04 00 00       	call   c0103b0c <uintTostring>
c0103683:	83 c4 10             	add    $0x10,%esp
c0103686:	83 ec 04             	sub    $0x4,%esp
c0103689:	ff 75 10             	pushl  0x10(%ebp)
c010368c:	ff 75 0c             	pushl  0xc(%ebp)
c010368f:	50                   	push   %eax
c0103690:	e8 90 ff ff ff       	call   c0103625 <console_write_color>
c0103695:	83 c4 10             	add    $0x10,%esp
}
c0103698:	90                   	nop
c0103699:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010369c:	c9                   	leave  
c010369d:	c3                   	ret    

c010369e <into_vga_mode>:
#include"vga.h"
#include"types.h"
extern setvga();
void into_vga_mode()
{
c010369e:	55                   	push   %ebp
c010369f:	89 e5                	mov    %esp,%ebp
c01036a1:	53                   	push   %ebx
c01036a2:	83 ec 04             	sub    $0x4,%esp
c01036a5:	e8 56 09 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c01036aa:	05 56 19 00 00       	add    $0x1956,%eax
	setvga();
c01036af:	89 c3                	mov    %eax,%ebx
c01036b1:	e8 aa eb ff ff       	call   c0102260 <setvga>
c01036b6:	90                   	nop
c01036b7:	83 c4 04             	add    $0x4,%esp
c01036ba:	5b                   	pop    %ebx
c01036bb:	5d                   	pop    %ebp
c01036bc:	c3                   	ret    

c01036bd <kern_init>:
    // 调用内核初始化函数
    kern_init();
}

int kern_init()
{
c01036bd:	55                   	push   %ebp
c01036be:	89 e5                	mov    %esp,%ebp
c01036c0:	53                   	push   %ebx
c01036c1:	83 ec 04             	sub    $0x4,%esp
c01036c4:	e8 3b 09 00 00       	call   c0104004 <__x86.get_pc_thunk.bx>
c01036c9:	81 c3 37 19 00 00    	add    $0x1937,%ebx

    extern void setvga();
    extern uint8_t kern_start[];
    extern uint8_t kern_end[];
    console_clear();
c01036cf:	e8 d2 fc ff ff       	call   c01033a6 <console_clear>
    
	init_gdt();
c01036d4:	e8 a9 fa ff ff       	call   c0103182 <init_gdt>
	init_idt();
c01036d9:	e8 c6 f4 ff ff       	call   c0102ba4 <init_idt>
    //init_timer(200);
    printk("<kern_start>:%H\n",kern_start);
c01036de:	83 ec 08             	sub    $0x8,%esp
c01036e1:	c7 c0 00 00 10 c0    	mov    $0xc0100000,%eax
c01036e7:	50                   	push   %eax
c01036e8:	8d 83 63 f0 ff ff    	lea    -0xf9d(%ebx),%eax
c01036ee:	50                   	push   %eax
c01036ef:	e8 16 ec ff ff       	call   c010230a <printk>
c01036f4:	83 c4 10             	add    $0x10,%esp
    printk("<kern_end>:%H\n",kern_end);
c01036f7:	83 ec 08             	sub    $0x8,%esp
c01036fa:	c7 c0 00 f0 18 c0    	mov    $0xc018f000,%eax
c0103700:	50                   	push   %eax
c0103701:	8d 83 74 f0 ff ff    	lea    -0xf8c(%ebx),%eax
c0103707:	50                   	push   %eax
c0103708:	e8 fd eb ff ff       	call   c010230a <printk>
c010370d:	83 c4 10             	add    $0x10,%esp
    printk("<kernel-use>:%dKB\n",(kern_end-kern_start)/1024);
c0103710:	c7 c0 00 f0 18 c0    	mov    $0xc018f000,%eax
c0103716:	89 c2                	mov    %eax,%edx
c0103718:	c7 c0 00 00 10 c0    	mov    $0xc0100000,%eax
c010371e:	29 c2                	sub    %eax,%edx
c0103720:	89 d0                	mov    %edx,%eax
c0103722:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0103728:	85 c0                	test   %eax,%eax
c010372a:	0f 48 c2             	cmovs  %edx,%eax
c010372d:	c1 f8 0a             	sar    $0xa,%eax
c0103730:	83 ec 08             	sub    $0x8,%esp
c0103733:	50                   	push   %eax
c0103734:	8d 83 83 f0 ff ff    	lea    -0xf7d(%ebx),%eax
c010373a:	50                   	push   %eax
c010373b:	e8 ca eb ff ff       	call   c010230a <printk>
c0103740:	83 c4 10             	add    $0x10,%esp
    init_pmm();
c0103743:	e8 8d f1 ff ff       	call   c01028d5 <init_pmm>
    printk_color("alloc:%H\n",rc_white,rc_blue,pmm_alloc_page());
c0103748:	e8 6e f2 ff ff       	call   c01029bb <pmm_alloc_page>
c010374d:	50                   	push   %eax
c010374e:	6a 01                	push   $0x1
c0103750:	6a 0f                	push   $0xf
c0103752:	8d 83 96 f0 ff ff    	lea    -0xf6a(%ebx),%eax
c0103758:	50                   	push   %eax
c0103759:	e8 20 ee ff ff       	call   c010257e <printk_color>
c010375e:	83 c4 10             	add    $0x10,%esp
    printk_color("alloc:%H\n",rc_white,rc_blue,pmm_alloc_page());
c0103761:	e8 55 f2 ff ff       	call   c01029bb <pmm_alloc_page>
c0103766:	50                   	push   %eax
c0103767:	6a 01                	push   $0x1
c0103769:	6a 0f                	push   $0xf
c010376b:	8d 83 96 f0 ff ff    	lea    -0xf6a(%ebx),%eax
c0103771:	50                   	push   %eax
c0103772:	e8 07 ee ff ff       	call   c010257e <printk_color>
c0103777:	83 c4 10             	add    $0x10,%esp
    printk_color("alloc:%H\n",rc_white,rc_blue,pmm_alloc_page());
c010377a:	e8 3c f2 ff ff       	call   c01029bb <pmm_alloc_page>
c010377f:	50                   	push   %eax
c0103780:	6a 01                	push   $0x1
c0103782:	6a 0f                	push   $0xf
c0103784:	8d 83 96 f0 ff ff    	lea    -0xf6a(%ebx),%eax
c010378a:	50                   	push   %eax
c010378b:	e8 ee ed ff ff       	call   c010257e <printk_color>
c0103790:	83 c4 10             	add    $0x10,%esp
    show_memory_map();
c0103793:	e8 9c f0 ff ff       	call   c0102834 <show_memory_map>
    return 0;
c0103798:	b8 00 00 00 00       	mov    $0x0,%eax
c010379d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01037a0:	c9                   	leave  
c01037a1:	c3                   	ret    

c01037a2 <func>:
//string.c in /libs
#include"string.h"

static int func(char *s,int n,int i)          //n表示输入的数 i表示转化的进制
{
c01037a2:	55                   	push   %ebp
c01037a3:	89 e5                	mov    %esp,%ebp
c01037a5:	83 ec 28             	sub    $0x28,%esp
c01037a8:	e8 53 08 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c01037ad:	05 53 18 00 00       	add    $0x1853,%eax
    char bit[]={"0123456789ABCDEF"};
c01037b2:	c7 45 e3 30 31 32 33 	movl   $0x33323130,-0x1d(%ebp)
c01037b9:	c7 45 e7 34 35 36 37 	movl   $0x37363534,-0x19(%ebp)
c01037c0:	c7 45 eb 38 39 41 42 	movl   $0x42413938,-0x15(%ebp)
c01037c7:	c7 45 ef 43 44 45 46 	movl   $0x46454443,-0x11(%ebp)
c01037ce:	c6 45 f3 00          	movb   $0x0,-0xd(%ebp)
    int len;
    if(n==0)
c01037d2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01037d6:	75 1c                	jne    c01037f4 <func+0x52>
    {
        strcpy(s,"");
c01037d8:	83 ec 08             	sub    $0x8,%esp
c01037db:	8d 80 a0 f0 ff ff    	lea    -0xf60(%eax),%eax
c01037e1:	50                   	push   %eax
c01037e2:	ff 75 08             	pushl  0x8(%ebp)
c01037e5:	e8 a3 02 00 00       	call   c0103a8d <strcpy>
c01037ea:	83 c4 10             	add    $0x10,%esp
        return 0;
c01037ed:	b8 00 00 00 00       	mov    $0x0,%eax
c01037f2:	eb 55                	jmp    c0103849 <func+0xa7>
    }
    func(s,n/i,i);
c01037f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01037f7:	99                   	cltd   
c01037f8:	f7 7d 10             	idivl  0x10(%ebp)
c01037fb:	83 ec 04             	sub    $0x4,%esp
c01037fe:	ff 75 10             	pushl  0x10(%ebp)
c0103801:	50                   	push   %eax
c0103802:	ff 75 08             	pushl  0x8(%ebp)
c0103805:	e8 98 ff ff ff       	call   c01037a2 <func>
c010380a:	83 c4 10             	add    $0x10,%esp
    len=strlen(s);
c010380d:	83 ec 0c             	sub    $0xc,%esp
c0103810:	ff 75 08             	pushl  0x8(%ebp)
c0103813:	e8 44 02 00 00       	call   c0103a5c <strlen>
c0103818:	83 c4 10             	add    $0x10,%esp
c010381b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    s[len]=bit[n%i];
c010381e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103821:	99                   	cltd   
c0103822:	f7 7d 10             	idivl  0x10(%ebp)
c0103825:	89 d1                	mov    %edx,%ecx
c0103827:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010382a:	8b 45 08             	mov    0x8(%ebp),%eax
c010382d:	01 c2                	add    %eax,%edx
c010382f:	0f b6 44 0d e3       	movzbl -0x1d(%ebp,%ecx,1),%eax
c0103834:	88 02                	mov    %al,(%edx)
    s[len+1]='\0';
c0103836:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103839:	8d 50 01             	lea    0x1(%eax),%edx
c010383c:	8b 45 08             	mov    0x8(%ebp),%eax
c010383f:	01 d0                	add    %edx,%eax
c0103841:	c6 00 00             	movb   $0x0,(%eax)
    return 1;
c0103844:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103849:	c9                   	leave  
c010384a:	c3                   	ret    

c010384b <num2hexstr>:

//32位的16进制数 使用0x+8位字符表示+\0   共11位字符
inline char *num2hexstr(int number,int need0x)
{	if (number!=0)
c010384b:	55                   	push   %ebp
c010384c:	89 e5                	mov    %esp,%ebp
c010384e:	53                   	push   %ebx
c010384f:	83 ec 34             	sub    $0x34,%esp
c0103852:	e8 ad 07 00 00       	call   c0104004 <__x86.get_pc_thunk.bx>
c0103857:	81 c3 a9 17 00 00    	add    $0x17a9,%ebx
c010385d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103861:	0f 84 f1 00 00 00    	je     c0103958 <num2hexstr+0x10d>
	{
	static char static_hexstr[11]={0};
	static_hexstr[0]='0';
c0103867:	c6 83 40 01 08 00 30 	movb   $0x30,0x80140(%ebx)
	static_hexstr[1]='x';
c010386e:	c6 83 41 01 08 00 78 	movb   $0x78,0x80141(%ebx)
	char temp_arry[9]={0};
c0103875:	c7 45 df 00 00 00 00 	movl   $0x0,-0x21(%ebp)
c010387c:	c7 45 e3 00 00 00 00 	movl   $0x0,-0x1d(%ebp)
c0103883:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
	char *temp_arry_ptr=temp_arry;
c0103887:	8d 45 df             	lea    -0x21(%ebp),%eax
c010388a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	func(temp_arry_ptr,number,16);
c010388d:	83 ec 04             	sub    $0x4,%esp
c0103890:	6a 10                	push   $0x10
c0103892:	ff 75 08             	pushl  0x8(%ebp)
c0103895:	ff 75 f0             	pushl  -0x10(%ebp)
c0103898:	e8 05 ff ff ff       	call   c01037a2 <func>
c010389d:	83 c4 10             	add    $0x10,%esp
	char temp_arry2[9]={0};
c01038a0:	c7 45 d6 00 00 00 00 	movl   $0x0,-0x2a(%ebp)
c01038a7:	c7 45 da 00 00 00 00 	movl   $0x0,-0x26(%ebp)
c01038ae:	c6 45 de 00          	movb   $0x0,-0x22(%ebp)
	char *temp_arry2_ptr=temp_arry2;
c01038b2:	8d 45 d6             	lea    -0x2a(%ebp),%eax
c01038b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	strcpy(temp_arry2_ptr,temp_arry_ptr);
c01038b8:	83 ec 08             	sub    $0x8,%esp
c01038bb:	ff 75 f0             	pushl  -0x10(%ebp)
c01038be:	ff 75 ec             	pushl  -0x14(%ebp)
c01038c1:	e8 c7 01 00 00       	call   c0103a8d <strcpy>
c01038c6:	83 c4 10             	add    $0x10,%esp
	int offset=8-strlen(temp_arry);
c01038c9:	83 ec 0c             	sub    $0xc,%esp
c01038cc:	8d 45 df             	lea    -0x21(%ebp),%eax
c01038cf:	50                   	push   %eax
c01038d0:	e8 87 01 00 00       	call   c0103a5c <strlen>
c01038d5:	83 c4 10             	add    $0x10,%esp
c01038d8:	ba 08 00 00 00       	mov    $0x8,%edx
c01038dd:	29 c2                	sub    %eax,%edx
c01038df:	89 d0                	mov    %edx,%eax
c01038e1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	strcpy(temp_arry+offset,temp_arry2);
c01038e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01038e7:	8d 55 df             	lea    -0x21(%ebp),%edx
c01038ea:	01 c2                	add    %eax,%edx
c01038ec:	83 ec 08             	sub    $0x8,%esp
c01038ef:	8d 45 d6             	lea    -0x2a(%ebp),%eax
c01038f2:	50                   	push   %eax
c01038f3:	52                   	push   %edx
c01038f4:	e8 94 01 00 00       	call   c0103a8d <strcpy>
c01038f9:	83 c4 10             	add    $0x10,%esp
	for(int i=0;i<offset;i++)
c01038fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103903:	eb 0f                	jmp    c0103914 <num2hexstr+0xc9>
		*(temp_arry+i)='0';
c0103905:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103908:	8d 55 df             	lea    -0x21(%ebp),%edx
c010390b:	01 d0                	add    %edx,%eax
c010390d:	c6 00 30             	movb   $0x30,(%eax)
	for(int i=0;i<offset;i++)
c0103910:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103914:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103917:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010391a:	7c e9                	jl     c0103905 <num2hexstr+0xba>
	if(need0x)
c010391c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103920:	74 18                	je     c010393a <num2hexstr+0xef>
		strcpy(static_hexstr+2,temp_arry);
c0103922:	8d 83 42 01 08 00    	lea    0x80142(%ebx),%eax
c0103928:	83 ec 08             	sub    $0x8,%esp
c010392b:	8d 55 df             	lea    -0x21(%ebp),%edx
c010392e:	52                   	push   %edx
c010392f:	50                   	push   %eax
c0103930:	e8 58 01 00 00       	call   c0103a8d <strcpy>
c0103935:	83 c4 10             	add    $0x10,%esp
c0103938:	eb 16                	jmp    c0103950 <num2hexstr+0x105>
	else
		strcpy(static_hexstr,temp_arry);
c010393a:	83 ec 08             	sub    $0x8,%esp
c010393d:	8d 45 df             	lea    -0x21(%ebp),%eax
c0103940:	50                   	push   %eax
c0103941:	8d 83 40 01 08 00    	lea    0x80140(%ebx),%eax
c0103947:	50                   	push   %eax
c0103948:	e8 40 01 00 00       	call   c0103a8d <strcpy>
c010394d:	83 c4 10             	add    $0x10,%esp
	return static_hexstr;
c0103950:	8d 83 40 01 08 00    	lea    0x80140(%ebx),%eax
c0103956:	eb 14                	jmp    c010396c <num2hexstr+0x121>
	}
	else 
	{
		if(need0x)
c0103958:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010395c:	74 08                	je     c0103966 <num2hexstr+0x11b>
			return "0x00000000";
c010395e:	8d 83 a1 f0 ff ff    	lea    -0xf5f(%ebx),%eax
c0103964:	eb 06                	jmp    c010396c <num2hexstr+0x121>
		else
			return "00000000";
c0103966:	8d 83 ac f0 ff ff    	lea    -0xf54(%ebx),%eax
	}
}
c010396c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010396f:	c9                   	leave  
c0103970:	c3                   	ret    

c0103971 <memcpy>:

inline void memcpy(uint8_t *dest ,const uint8_t *src,uint32_t len)
{
c0103971:	55                   	push   %ebp
c0103972:	89 e5                	mov    %esp,%ebp
c0103974:	e8 87 06 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0103979:	05 87 16 00 00       	add    $0x1687,%eax
	for(;len!=0;len--)
c010397e:	eb 17                	jmp    c0103997 <memcpy+0x26>
	{
		*dest=*src;
c0103980:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103983:	0f b6 10             	movzbl (%eax),%edx
c0103986:	8b 45 08             	mov    0x8(%ebp),%eax
c0103989:	88 10                	mov    %dl,(%eax)
		dest++;
c010398b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
		src++;
c010398f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
	for(;len!=0;len--)
c0103993:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c0103997:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010399b:	75 e3                	jne    c0103980 <memcpy+0xf>
	}
}
c010399d:	90                   	nop
c010399e:	5d                   	pop    %ebp
c010399f:	c3                   	ret    

c01039a0 <memset>:

inline void memset(void *dest,uint8_t val ,uint32_t len)
{
c01039a0:	55                   	push   %ebp
c01039a1:	89 e5                	mov    %esp,%ebp
c01039a3:	83 ec 14             	sub    $0x14,%esp
c01039a6:	e8 55 06 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c01039ab:	05 55 16 00 00       	add    $0x1655,%eax
c01039b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039b3:	88 45 ec             	mov    %al,-0x14(%ebp)
	uint8_t *dst = (uint8_t *)dest;
c01039b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01039b9:	89 45 fc             	mov    %eax,-0x4(%ebp)

    for ( ; len != 0; len--) {
c01039bc:	eb 13                	jmp    c01039d1 <memset+0x31>
        *dst++ = val;
c01039be:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01039c1:	8d 50 01             	lea    0x1(%eax),%edx
c01039c4:	89 55 fc             	mov    %edx,-0x4(%ebp)
c01039c7:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
c01039cb:	88 10                	mov    %dl,(%eax)
    for ( ; len != 0; len--) {
c01039cd:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c01039d1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01039d5:	75 e7                	jne    c01039be <memset+0x1e>
    }
}
c01039d7:	90                   	nop
c01039d8:	c9                   	leave  
c01039d9:	c3                   	ret    

c01039da <bzero>:

inline void bzero(void *dest, uint32_t len)
{
c01039da:	55                   	push   %ebp
c01039db:	89 e5                	mov    %esp,%ebp
c01039dd:	e8 1e 06 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c01039e2:	05 1e 16 00 00       	add    $0x161e,%eax
    memset(dest, 0, len);
c01039e7:	ff 75 0c             	pushl  0xc(%ebp)
c01039ea:	6a 00                	push   $0x0
c01039ec:	ff 75 08             	pushl  0x8(%ebp)
c01039ef:	e8 ac ff ff ff       	call   c01039a0 <memset>
c01039f4:	83 c4 0c             	add    $0xc,%esp
}
c01039f7:	90                   	nop
c01039f8:	c9                   	leave  
c01039f9:	c3                   	ret    

c01039fa <strcmp>:

inline int strcmp(const char *str1,const char *str2)
{
c01039fa:	55                   	push   %ebp
c01039fb:	89 e5                	mov    %esp,%ebp
c01039fd:	e8 fe 05 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0103a02:	05 fe 15 00 00       	add    $0x15fe,%eax
	while(1){
		if (*str1=='\0'&&*str2=='\0')
c0103a07:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a0a:	0f b6 00             	movzbl (%eax),%eax
c0103a0d:	84 c0                	test   %al,%al
c0103a0f:	75 11                	jne    c0103a22 <strcmp+0x28>
c0103a11:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a14:	0f b6 00             	movzbl (%eax),%eax
c0103a17:	84 c0                	test   %al,%al
c0103a19:	75 07                	jne    c0103a22 <strcmp+0x28>
			return 0;
c0103a1b:	b8 00 00 00 00       	mov    $0x0,%eax
c0103a20:	eb 38                	jmp    c0103a5a <strcmp+0x60>
		else if ((int)*str1>(int)*str2){
c0103a22:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a25:	0f b6 10             	movzbl (%eax),%edx
c0103a28:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a2b:	0f b6 00             	movzbl (%eax),%eax
c0103a2e:	38 c2                	cmp    %al,%dl
c0103a30:	7e 07                	jle    c0103a39 <strcmp+0x3f>
			return 1;
c0103a32:	b8 01 00 00 00       	mov    $0x1,%eax
c0103a37:	eb 21                	jmp    c0103a5a <strcmp+0x60>
		}
		else if((int)*str1>(int)*str2){
c0103a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a3c:	0f b6 10             	movzbl (%eax),%edx
c0103a3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a42:	0f b6 00             	movzbl (%eax),%eax
c0103a45:	38 c2                	cmp    %al,%dl
c0103a47:	7e 07                	jle    c0103a50 <strcmp+0x56>
			return -1;
c0103a49:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0103a4e:	eb 0a                	jmp    c0103a5a <strcmp+0x60>
		}
		else{
			str1++;
c0103a50:	83 45 08 01          	addl   $0x1,0x8(%ebp)
			str2++;
c0103a54:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
		if (*str1=='\0'&&*str2=='\0')
c0103a58:	eb ad                	jmp    c0103a07 <strcmp+0xd>
		}
	}
}
c0103a5a:	5d                   	pop    %ebp
c0103a5b:	c3                   	ret    

c0103a5c <strlen>:

inline int strlen(const char *src)
{
c0103a5c:	55                   	push   %ebp
c0103a5d:	89 e5                	mov    %esp,%ebp
c0103a5f:	83 ec 10             	sub    $0x10,%esp
c0103a62:	e8 99 05 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0103a67:	05 99 15 00 00       	add    $0x1599,%eax
	int i=0;
c0103a6c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	while(*(src+i)!='\0')
c0103a73:	eb 04                	jmp    c0103a79 <strlen+0x1d>
		i++;
c0103a75:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
	while(*(src+i)!='\0')
c0103a79:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103a7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a7f:	01 d0                	add    %edx,%eax
c0103a81:	0f b6 00             	movzbl (%eax),%eax
c0103a84:	84 c0                	test   %al,%al
c0103a86:	75 ed                	jne    c0103a75 <strlen+0x19>
	return i;
c0103a88:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0103a8b:	c9                   	leave  
c0103a8c:	c3                   	ret    

c0103a8d <strcpy>:

inline char *strcpy(char *dest, const char *src)
{
c0103a8d:	55                   	push   %ebp
c0103a8e:	89 e5                	mov    %esp,%ebp
c0103a90:	83 ec 10             	sub    $0x10,%esp
c0103a93:	e8 68 05 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0103a98:	05 68 15 00 00       	add    $0x1568,%eax
	char *dest_head=dest;
c0103a9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aa0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while(*(src)!='\0')
c0103aa3:	eb 13                	jmp    c0103ab8 <strcpy+0x2b>
	{
		*dest=*src;
c0103aa5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103aa8:	0f b6 10             	movzbl (%eax),%edx
c0103aab:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aae:	88 10                	mov    %dl,(%eax)
		dest++;
c0103ab0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
		src++;
c0103ab4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
	while(*(src)!='\0')
c0103ab8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103abb:	0f b6 00             	movzbl (%eax),%eax
c0103abe:	84 c0                	test   %al,%al
c0103ac0:	75 e3                	jne    c0103aa5 <strcpy+0x18>
	}
	*dest='\0';
c0103ac2:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ac5:	c6 00 00             	movb   $0x0,(%eax)
	dest=dest_head;
c0103ac8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103acb:	89 45 08             	mov    %eax,0x8(%ebp)
	return dest;
c0103ace:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0103ad1:	c9                   	leave  
c0103ad2:	c3                   	ret    

c0103ad3 <strcat>:

inline char *strcat(char *dest, const char *src)
{
c0103ad3:	55                   	push   %ebp
c0103ad4:	89 e5                	mov    %esp,%ebp
c0103ad6:	83 ec 10             	sub    $0x10,%esp
c0103ad9:	e8 22 05 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0103ade:	05 22 15 00 00       	add    $0x1522,%eax
	char *pointer=dest;
c0103ae3:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ae6:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for(;*pointer!='\0';pointer++);
c0103ae9:	eb 04                	jmp    c0103aef <strcat+0x1c>
c0103aeb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0103aef:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103af2:	0f b6 00             	movzbl (%eax),%eax
c0103af5:	84 c0                	test   %al,%al
c0103af7:	75 f2                	jne    c0103aeb <strcat+0x18>
	strcpy(pointer,src);
c0103af9:	ff 75 0c             	pushl  0xc(%ebp)
c0103afc:	ff 75 fc             	pushl  -0x4(%ebp)
c0103aff:	e8 89 ff ff ff       	call   c0103a8d <strcpy>
c0103b04:	83 c4 08             	add    $0x8,%esp
	return dest;		
c0103b07:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0103b0a:	c9                   	leave  
c0103b0b:	c3                   	ret    

c0103b0c <uintTostring>:

inline char *uintTostring(uint32_t num)
{
c0103b0c:	55                   	push   %ebp
c0103b0d:	89 e5                	mov    %esp,%ebp
c0103b0f:	83 ec 28             	sub    $0x28,%esp
c0103b12:	e8 e9 04 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0103b17:	05 e9 14 00 00       	add    $0x14e9,%eax
	char i2stable[10]={'0','1','2','3','4','5','6','7','8','9'};
c0103b1c:	c6 45 da 30          	movb   $0x30,-0x26(%ebp)
c0103b20:	c6 45 db 31          	movb   $0x31,-0x25(%ebp)
c0103b24:	c6 45 dc 32          	movb   $0x32,-0x24(%ebp)
c0103b28:	c6 45 dd 33          	movb   $0x33,-0x23(%ebp)
c0103b2c:	c6 45 de 34          	movb   $0x34,-0x22(%ebp)
c0103b30:	c6 45 df 35          	movb   $0x35,-0x21(%ebp)
c0103b34:	c6 45 e0 36          	movb   $0x36,-0x20(%ebp)
c0103b38:	c6 45 e1 37          	movb   $0x37,-0x1f(%ebp)
c0103b3c:	c6 45 e2 38          	movb   $0x38,-0x1e(%ebp)
c0103b40:	c6 45 e3 39          	movb   $0x39,-0x1d(%ebp)
	static char m[32]={0};
	char *str_ptr=m;
c0103b44:	8d 80 60 01 08 00    	lea    0x80160(%eax),%eax
c0103b4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	char *head=str_ptr;
c0103b4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b50:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
c0103b53:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;num>=10;i++)
c0103b5a:	eb 46                	jmp    c0103ba2 <uintTostring+0x96>
	{
		uint32_t num_=num/10;
c0103b5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b5f:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
c0103b64:	f7 e2                	mul    %edx
c0103b66:	89 d0                	mov    %edx,%eax
c0103b68:	c1 e8 03             	shr    $0x3,%eax
c0103b6b:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32_t index=num-(num_*10);
c0103b6e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103b71:	89 d0                	mov    %edx,%eax
c0103b73:	c1 e0 02             	shl    $0x2,%eax
c0103b76:	01 d0                	add    %edx,%eax
c0103b78:	01 c0                	add    %eax,%eax
c0103b7a:	89 c2                	mov    %eax,%edx
c0103b7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b7f:	29 d0                	sub    %edx,%eax
c0103b81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		num=num_;
c0103b84:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103b87:	89 45 08             	mov    %eax,0x8(%ebp)
		*str_ptr=i2stable[index];
c0103b8a:	8d 55 da             	lea    -0x26(%ebp),%edx
c0103b8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103b90:	01 d0                	add    %edx,%eax
c0103b92:	0f b6 10             	movzbl (%eax),%edx
c0103b95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b98:	88 10                	mov    %dl,(%eax)
		str_ptr++;
c0103b9a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
	for(;num>=10;i++)
c0103b9e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0103ba2:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
c0103ba6:	77 b4                	ja     c0103b5c <uintTostring+0x50>
	}
	*str_ptr=i2stable[num];
c0103ba8:	8d 55 da             	lea    -0x26(%ebp),%edx
c0103bab:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bae:	01 d0                	add    %edx,%eax
c0103bb0:	0f b6 10             	movzbl (%eax),%edx
c0103bb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bb6:	88 10                	mov    %dl,(%eax)
	*(str_ptr+1)='\0';
c0103bb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bbb:	83 c0 01             	add    $0x1,%eax
c0103bbe:	c6 00 00             	movb   $0x0,(%eax)
	return strrevers(head);
c0103bc1:	83 ec 0c             	sub    $0xc,%esp
c0103bc4:	ff 75 ec             	pushl  -0x14(%ebp)
c0103bc7:	e8 05 00 00 00       	call   c0103bd1 <strrevers>
c0103bcc:	83 c4 10             	add    $0x10,%esp
}
c0103bcf:	c9                   	leave  
c0103bd0:	c3                   	ret    

c0103bd1 <strrevers>:

inline  char *strrevers(char *str)
{
c0103bd1:	55                   	push   %ebp
c0103bd2:	89 e5                	mov    %esp,%ebp
c0103bd4:	83 ec 20             	sub    $0x20,%esp
c0103bd7:	e8 24 04 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0103bdc:	05 24 14 00 00       	add    $0x1424,%eax
	char *str_head=str;
c0103be1:	8b 45 08             	mov    0x8(%ebp),%eax
c0103be4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int lenth=strlen(str);
c0103be7:	ff 75 08             	pushl  0x8(%ebp)
c0103bea:	e8 6d fe ff ff       	call   c0103a5c <strlen>
c0103bef:	83 c4 04             	add    $0x4,%esp
c0103bf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int ptr_h=0;
c0103bf5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int ptr_t=--lenth;
c0103bfc:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
c0103c00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c03:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for(;ptr_h<ptr_t;)
c0103c06:	eb 39                	jmp    c0103c41 <strrevers+0x70>
	{
		char temp=*(str_head+ptr_t);
c0103c08:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0103c0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c0e:	01 d0                	add    %edx,%eax
c0103c10:	0f b6 00             	movzbl (%eax),%eax
c0103c13:	88 45 ef             	mov    %al,-0x11(%ebp)
		*(str_head+ptr_t)=*(str_head+ptr_h);
c0103c16:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103c19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c1c:	01 d0                	add    %edx,%eax
c0103c1e:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c0103c21:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103c24:	01 ca                	add    %ecx,%edx
c0103c26:	0f b6 00             	movzbl (%eax),%eax
c0103c29:	88 02                	mov    %al,(%edx)
		*(str_head+ptr_h)=temp;
c0103c2b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103c2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c31:	01 c2                	add    %eax,%edx
c0103c33:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c0103c37:	88 02                	mov    %al,(%edx)
		ptr_h++;
c0103c39:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
		ptr_t--;
c0103c3d:	83 6d f8 01          	subl   $0x1,-0x8(%ebp)
	for(;ptr_h<ptr_t;)
c0103c41:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103c44:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0103c47:	7c bf                	jl     c0103c08 <strrevers+0x37>
	}
	return str_head;
c0103c49:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103c4c:	c9                   	leave  
c0103c4d:	c3                   	ret    

c0103c4e <outb>:
#include "common.h"

// 端口写一个字节
inline void outb(uint16_t port, uint8_t value)
{
c0103c4e:	55                   	push   %ebp
c0103c4f:	89 e5                	mov    %esp,%ebp
c0103c51:	83 ec 08             	sub    $0x8,%esp
c0103c54:	e8 a7 03 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0103c59:	05 a7 13 00 00       	add    $0x13a7,%eax
c0103c5e:	8b 55 08             	mov    0x8(%ebp),%edx
c0103c61:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103c64:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
c0103c68:	88 45 f8             	mov    %al,-0x8(%ebp)
    asm volatile ("outb %1, %0" : : "dN" (port), "a" (value));
c0103c6b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0103c6f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
c0103c73:	ee                   	out    %al,(%dx)
}
c0103c74:	90                   	nop
c0103c75:	c9                   	leave  
c0103c76:	c3                   	ret    

c0103c77 <inb>:

// 端口读一个字节
inline uint8_t inb(uint16_t port)
{
c0103c77:	55                   	push   %ebp
c0103c78:	89 e5                	mov    %esp,%ebp
c0103c7a:	83 ec 14             	sub    $0x14,%esp
c0103c7d:	e8 7e 03 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0103c82:	05 7e 13 00 00       	add    $0x137e,%eax
c0103c87:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c8a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t ret;

    asm volatile("inb %1, %0" : "=a" (ret) : "dN" (port));
c0103c8e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0103c92:	89 c2                	mov    %eax,%edx
c0103c94:	ec                   	in     (%dx),%al
c0103c95:	88 45 ff             	mov    %al,-0x1(%ebp)

    return ret;
c0103c98:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
c0103c9c:	c9                   	leave  
c0103c9d:	c3                   	ret    

c0103c9e <inw>:

// 端口读一个字
inline uint16_t inw(uint16_t port)
{
c0103c9e:	55                   	push   %ebp
c0103c9f:	89 e5                	mov    %esp,%ebp
c0103ca1:	83 ec 14             	sub    $0x14,%esp
c0103ca4:	e8 57 03 00 00       	call   c0104000 <__x86.get_pc_thunk.ax>
c0103ca9:	05 57 13 00 00       	add    $0x1357,%eax
c0103cae:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cb1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint16_t ret;

    asm volatile ("inw %1, %0" : "=a" (ret) : "dN" (port));
c0103cb5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0103cb9:	89 c2                	mov    %eax,%edx
c0103cbb:	66 ed                	in     (%dx),%ax
c0103cbd:	66 89 45 fe          	mov    %ax,-0x2(%ebp)

    return ret;
c0103cc1:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0103cc5:	c9                   	leave  
c0103cc6:	c3                   	ret    
c0103cc7:	66 90                	xchg   %ax,%ax
c0103cc9:	66 90                	xchg   %ax,%ax
c0103ccb:	66 90                	xchg   %ax,%ax
c0103ccd:	66 90                	xchg   %ax,%ax
c0103ccf:	66 90                	xchg   %ax,%ax
c0103cd1:	66 90                	xchg   %ax,%ax
c0103cd3:	66 90                	xchg   %ax,%ax
c0103cd5:	66 90                	xchg   %ax,%ax
c0103cd7:	66 90                	xchg   %ax,%ax
c0103cd9:	66 90                	xchg   %ax,%ax
c0103cdb:	66 90                	xchg   %ax,%ax
c0103cdd:	66 90                	xchg   %ax,%ax
c0103cdf:	66 90                	xchg   %ax,%ax
c0103ce1:	66 90                	xchg   %ax,%ax
c0103ce3:	66 90                	xchg   %ax,%ax
c0103ce5:	66 90                	xchg   %ax,%ax
c0103ce7:	66 90                	xchg   %ax,%ax
c0103ce9:	66 90                	xchg   %ax,%ax
c0103ceb:	66 90                	xchg   %ax,%ax
c0103ced:	66 90                	xchg   %ax,%ax
c0103cef:	66 90                	xchg   %ax,%ax
c0103cf1:	66 90                	xchg   %ax,%ax
c0103cf3:	66 90                	xchg   %ax,%ax
c0103cf5:	66 90                	xchg   %ax,%ax
c0103cf7:	66 90                	xchg   %ax,%ax
c0103cf9:	66 90                	xchg   %ax,%ax
c0103cfb:	66 90                	xchg   %ax,%ax
c0103cfd:	66 90                	xchg   %ax,%ax
c0103cff:	66 90                	xchg   %ax,%ax
c0103d01:	66 90                	xchg   %ax,%ax
c0103d03:	66 90                	xchg   %ax,%ax
c0103d05:	66 90                	xchg   %ax,%ax
c0103d07:	66 90                	xchg   %ax,%ax
c0103d09:	66 90                	xchg   %ax,%ax
c0103d0b:	66 90                	xchg   %ax,%ax
c0103d0d:	66 90                	xchg   %ax,%ax
c0103d0f:	66 90                	xchg   %ax,%ax
c0103d11:	66 90                	xchg   %ax,%ax
c0103d13:	66 90                	xchg   %ax,%ax
c0103d15:	66 90                	xchg   %ax,%ax
c0103d17:	66 90                	xchg   %ax,%ax
c0103d19:	66 90                	xchg   %ax,%ax
c0103d1b:	66 90                	xchg   %ax,%ax
c0103d1d:	66 90                	xchg   %ax,%ax
c0103d1f:	66 90                	xchg   %ax,%ax
c0103d21:	66 90                	xchg   %ax,%ax
c0103d23:	66 90                	xchg   %ax,%ax
c0103d25:	66 90                	xchg   %ax,%ax
c0103d27:	66 90                	xchg   %ax,%ax
c0103d29:	66 90                	xchg   %ax,%ax
c0103d2b:	66 90                	xchg   %ax,%ax
c0103d2d:	66 90                	xchg   %ax,%ax
c0103d2f:	66 90                	xchg   %ax,%ax
c0103d31:	66 90                	xchg   %ax,%ax
c0103d33:	66 90                	xchg   %ax,%ax
c0103d35:	66 90                	xchg   %ax,%ax
c0103d37:	66 90                	xchg   %ax,%ax
c0103d39:	66 90                	xchg   %ax,%ax
c0103d3b:	66 90                	xchg   %ax,%ax
c0103d3d:	66 90                	xchg   %ax,%ax
c0103d3f:	66 90                	xchg   %ax,%ax
c0103d41:	66 90                	xchg   %ax,%ax
c0103d43:	66 90                	xchg   %ax,%ax
c0103d45:	66 90                	xchg   %ax,%ax
c0103d47:	66 90                	xchg   %ax,%ax
c0103d49:	66 90                	xchg   %ax,%ax
c0103d4b:	66 90                	xchg   %ax,%ax
c0103d4d:	66 90                	xchg   %ax,%ax
c0103d4f:	66 90                	xchg   %ax,%ax
c0103d51:	66 90                	xchg   %ax,%ax
c0103d53:	66 90                	xchg   %ax,%ax
c0103d55:	66 90                	xchg   %ax,%ax
c0103d57:	66 90                	xchg   %ax,%ax
c0103d59:	66 90                	xchg   %ax,%ax
c0103d5b:	66 90                	xchg   %ax,%ax
c0103d5d:	66 90                	xchg   %ax,%ax
c0103d5f:	66 90                	xchg   %ax,%ax
c0103d61:	66 90                	xchg   %ax,%ax
c0103d63:	66 90                	xchg   %ax,%ax
c0103d65:	66 90                	xchg   %ax,%ax
c0103d67:	66 90                	xchg   %ax,%ax
c0103d69:	66 90                	xchg   %ax,%ax
c0103d6b:	66 90                	xchg   %ax,%ax
c0103d6d:	66 90                	xchg   %ax,%ax
c0103d6f:	66 90                	xchg   %ax,%ax
c0103d71:	66 90                	xchg   %ax,%ax
c0103d73:	66 90                	xchg   %ax,%ax
c0103d75:	66 90                	xchg   %ax,%ax
c0103d77:	66 90                	xchg   %ax,%ax
c0103d79:	66 90                	xchg   %ax,%ax
c0103d7b:	66 90                	xchg   %ax,%ax
c0103d7d:	66 90                	xchg   %ax,%ax
c0103d7f:	66 90                	xchg   %ax,%ax
c0103d81:	66 90                	xchg   %ax,%ax
c0103d83:	66 90                	xchg   %ax,%ax
c0103d85:	66 90                	xchg   %ax,%ax
c0103d87:	66 90                	xchg   %ax,%ax
c0103d89:	66 90                	xchg   %ax,%ax
c0103d8b:	66 90                	xchg   %ax,%ax
c0103d8d:	66 90                	xchg   %ax,%ax
c0103d8f:	66 90                	xchg   %ax,%ax
c0103d91:	66 90                	xchg   %ax,%ax
c0103d93:	66 90                	xchg   %ax,%ax
c0103d95:	66 90                	xchg   %ax,%ax
c0103d97:	66 90                	xchg   %ax,%ax
c0103d99:	66 90                	xchg   %ax,%ax
c0103d9b:	66 90                	xchg   %ax,%ax
c0103d9d:	66 90                	xchg   %ax,%ax
c0103d9f:	66 90                	xchg   %ax,%ax
c0103da1:	66 90                	xchg   %ax,%ax
c0103da3:	66 90                	xchg   %ax,%ax
c0103da5:	66 90                	xchg   %ax,%ax
c0103da7:	66 90                	xchg   %ax,%ax
c0103da9:	66 90                	xchg   %ax,%ax
c0103dab:	66 90                	xchg   %ax,%ax
c0103dad:	66 90                	xchg   %ax,%ax
c0103daf:	66 90                	xchg   %ax,%ax
c0103db1:	66 90                	xchg   %ax,%ax
c0103db3:	66 90                	xchg   %ax,%ax
c0103db5:	66 90                	xchg   %ax,%ax
c0103db7:	66 90                	xchg   %ax,%ax
c0103db9:	66 90                	xchg   %ax,%ax
c0103dbb:	66 90                	xchg   %ax,%ax
c0103dbd:	66 90                	xchg   %ax,%ax
c0103dbf:	66 90                	xchg   %ax,%ax
c0103dc1:	66 90                	xchg   %ax,%ax
c0103dc3:	66 90                	xchg   %ax,%ax
c0103dc5:	66 90                	xchg   %ax,%ax
c0103dc7:	66 90                	xchg   %ax,%ax
c0103dc9:	66 90                	xchg   %ax,%ax
c0103dcb:	66 90                	xchg   %ax,%ax
c0103dcd:	66 90                	xchg   %ax,%ax
c0103dcf:	66 90                	xchg   %ax,%ax
c0103dd1:	66 90                	xchg   %ax,%ax
c0103dd3:	66 90                	xchg   %ax,%ax
c0103dd5:	66 90                	xchg   %ax,%ax
c0103dd7:	66 90                	xchg   %ax,%ax
c0103dd9:	66 90                	xchg   %ax,%ax
c0103ddb:	66 90                	xchg   %ax,%ax
c0103ddd:	66 90                	xchg   %ax,%ax
c0103ddf:	66 90                	xchg   %ax,%ax
c0103de1:	66 90                	xchg   %ax,%ax
c0103de3:	66 90                	xchg   %ax,%ax
c0103de5:	66 90                	xchg   %ax,%ax
c0103de7:	66 90                	xchg   %ax,%ax
c0103de9:	66 90                	xchg   %ax,%ax
c0103deb:	66 90                	xchg   %ax,%ax
c0103ded:	66 90                	xchg   %ax,%ax
c0103def:	66 90                	xchg   %ax,%ax
c0103df1:	66 90                	xchg   %ax,%ax
c0103df3:	66 90                	xchg   %ax,%ax
c0103df5:	66 90                	xchg   %ax,%ax
c0103df7:	66 90                	xchg   %ax,%ax
c0103df9:	66 90                	xchg   %ax,%ax
c0103dfb:	66 90                	xchg   %ax,%ax
c0103dfd:	66 90                	xchg   %ax,%ax
c0103dff:	66 90                	xchg   %ax,%ax
c0103e01:	66 90                	xchg   %ax,%ax
c0103e03:	66 90                	xchg   %ax,%ax
c0103e05:	66 90                	xchg   %ax,%ax
c0103e07:	66 90                	xchg   %ax,%ax
c0103e09:	66 90                	xchg   %ax,%ax
c0103e0b:	66 90                	xchg   %ax,%ax
c0103e0d:	66 90                	xchg   %ax,%ax
c0103e0f:	66 90                	xchg   %ax,%ax
c0103e11:	66 90                	xchg   %ax,%ax
c0103e13:	66 90                	xchg   %ax,%ax
c0103e15:	66 90                	xchg   %ax,%ax
c0103e17:	66 90                	xchg   %ax,%ax
c0103e19:	66 90                	xchg   %ax,%ax
c0103e1b:	66 90                	xchg   %ax,%ax
c0103e1d:	66 90                	xchg   %ax,%ax
c0103e1f:	66 90                	xchg   %ax,%ax
c0103e21:	66 90                	xchg   %ax,%ax
c0103e23:	66 90                	xchg   %ax,%ax
c0103e25:	66 90                	xchg   %ax,%ax
c0103e27:	66 90                	xchg   %ax,%ax
c0103e29:	66 90                	xchg   %ax,%ax
c0103e2b:	66 90                	xchg   %ax,%ax
c0103e2d:	66 90                	xchg   %ax,%ax
c0103e2f:	66 90                	xchg   %ax,%ax
c0103e31:	66 90                	xchg   %ax,%ax
c0103e33:	66 90                	xchg   %ax,%ax
c0103e35:	66 90                	xchg   %ax,%ax
c0103e37:	66 90                	xchg   %ax,%ax
c0103e39:	66 90                	xchg   %ax,%ax
c0103e3b:	66 90                	xchg   %ax,%ax
c0103e3d:	66 90                	xchg   %ax,%ax
c0103e3f:	66 90                	xchg   %ax,%ax
c0103e41:	66 90                	xchg   %ax,%ax
c0103e43:	66 90                	xchg   %ax,%ax
c0103e45:	66 90                	xchg   %ax,%ax
c0103e47:	66 90                	xchg   %ax,%ax
c0103e49:	66 90                	xchg   %ax,%ax
c0103e4b:	66 90                	xchg   %ax,%ax
c0103e4d:	66 90                	xchg   %ax,%ax
c0103e4f:	66 90                	xchg   %ax,%ax
c0103e51:	66 90                	xchg   %ax,%ax
c0103e53:	66 90                	xchg   %ax,%ax
c0103e55:	66 90                	xchg   %ax,%ax
c0103e57:	66 90                	xchg   %ax,%ax
c0103e59:	66 90                	xchg   %ax,%ax
c0103e5b:	66 90                	xchg   %ax,%ax
c0103e5d:	66 90                	xchg   %ax,%ax
c0103e5f:	66 90                	xchg   %ax,%ax
c0103e61:	66 90                	xchg   %ax,%ax
c0103e63:	66 90                	xchg   %ax,%ax
c0103e65:	66 90                	xchg   %ax,%ax
c0103e67:	66 90                	xchg   %ax,%ax
c0103e69:	66 90                	xchg   %ax,%ax
c0103e6b:	66 90                	xchg   %ax,%ax
c0103e6d:	66 90                	xchg   %ax,%ax
c0103e6f:	66 90                	xchg   %ax,%ax
c0103e71:	66 90                	xchg   %ax,%ax
c0103e73:	66 90                	xchg   %ax,%ax
c0103e75:	66 90                	xchg   %ax,%ax
c0103e77:	66 90                	xchg   %ax,%ax
c0103e79:	66 90                	xchg   %ax,%ax
c0103e7b:	66 90                	xchg   %ax,%ax
c0103e7d:	66 90                	xchg   %ax,%ax
c0103e7f:	66 90                	xchg   %ax,%ax
c0103e81:	66 90                	xchg   %ax,%ax
c0103e83:	66 90                	xchg   %ax,%ax
c0103e85:	66 90                	xchg   %ax,%ax
c0103e87:	66 90                	xchg   %ax,%ax
c0103e89:	66 90                	xchg   %ax,%ax
c0103e8b:	66 90                	xchg   %ax,%ax
c0103e8d:	66 90                	xchg   %ax,%ax
c0103e8f:	66 90                	xchg   %ax,%ax
c0103e91:	66 90                	xchg   %ax,%ax
c0103e93:	66 90                	xchg   %ax,%ax
c0103e95:	66 90                	xchg   %ax,%ax
c0103e97:	66 90                	xchg   %ax,%ax
c0103e99:	66 90                	xchg   %ax,%ax
c0103e9b:	66 90                	xchg   %ax,%ax
c0103e9d:	66 90                	xchg   %ax,%ax
c0103e9f:	66 90                	xchg   %ax,%ax
c0103ea1:	66 90                	xchg   %ax,%ax
c0103ea3:	66 90                	xchg   %ax,%ax
c0103ea5:	66 90                	xchg   %ax,%ax
c0103ea7:	66 90                	xchg   %ax,%ax
c0103ea9:	66 90                	xchg   %ax,%ax
c0103eab:	66 90                	xchg   %ax,%ax
c0103ead:	66 90                	xchg   %ax,%ax
c0103eaf:	66 90                	xchg   %ax,%ax
c0103eb1:	66 90                	xchg   %ax,%ax
c0103eb3:	66 90                	xchg   %ax,%ax
c0103eb5:	66 90                	xchg   %ax,%ax
c0103eb7:	66 90                	xchg   %ax,%ax
c0103eb9:	66 90                	xchg   %ax,%ax
c0103ebb:	66 90                	xchg   %ax,%ax
c0103ebd:	66 90                	xchg   %ax,%ax
c0103ebf:	66 90                	xchg   %ax,%ax
c0103ec1:	66 90                	xchg   %ax,%ax
c0103ec3:	66 90                	xchg   %ax,%ax
c0103ec5:	66 90                	xchg   %ax,%ax
c0103ec7:	66 90                	xchg   %ax,%ax
c0103ec9:	66 90                	xchg   %ax,%ax
c0103ecb:	66 90                	xchg   %ax,%ax
c0103ecd:	66 90                	xchg   %ax,%ax
c0103ecf:	66 90                	xchg   %ax,%ax
c0103ed1:	66 90                	xchg   %ax,%ax
c0103ed3:	66 90                	xchg   %ax,%ax
c0103ed5:	66 90                	xchg   %ax,%ax
c0103ed7:	66 90                	xchg   %ax,%ax
c0103ed9:	66 90                	xchg   %ax,%ax
c0103edb:	66 90                	xchg   %ax,%ax
c0103edd:	66 90                	xchg   %ax,%ax
c0103edf:	66 90                	xchg   %ax,%ax
c0103ee1:	66 90                	xchg   %ax,%ax
c0103ee3:	66 90                	xchg   %ax,%ax
c0103ee5:	66 90                	xchg   %ax,%ax
c0103ee7:	66 90                	xchg   %ax,%ax
c0103ee9:	66 90                	xchg   %ax,%ax
c0103eeb:	66 90                	xchg   %ax,%ax
c0103eed:	66 90                	xchg   %ax,%ax
c0103eef:	66 90                	xchg   %ax,%ax
c0103ef1:	66 90                	xchg   %ax,%ax
c0103ef3:	66 90                	xchg   %ax,%ax
c0103ef5:	66 90                	xchg   %ax,%ax
c0103ef7:	66 90                	xchg   %ax,%ax
c0103ef9:	66 90                	xchg   %ax,%ax
c0103efb:	66 90                	xchg   %ax,%ax
c0103efd:	66 90                	xchg   %ax,%ax
c0103eff:	66 90                	xchg   %ax,%ax
c0103f01:	66 90                	xchg   %ax,%ax
c0103f03:	66 90                	xchg   %ax,%ax
c0103f05:	66 90                	xchg   %ax,%ax
c0103f07:	66 90                	xchg   %ax,%ax
c0103f09:	66 90                	xchg   %ax,%ax
c0103f0b:	66 90                	xchg   %ax,%ax
c0103f0d:	66 90                	xchg   %ax,%ax
c0103f0f:	66 90                	xchg   %ax,%ax
c0103f11:	66 90                	xchg   %ax,%ax
c0103f13:	66 90                	xchg   %ax,%ax
c0103f15:	66 90                	xchg   %ax,%ax
c0103f17:	66 90                	xchg   %ax,%ax
c0103f19:	66 90                	xchg   %ax,%ax
c0103f1b:	66 90                	xchg   %ax,%ax
c0103f1d:	66 90                	xchg   %ax,%ax
c0103f1f:	66 90                	xchg   %ax,%ax
c0103f21:	66 90                	xchg   %ax,%ax
c0103f23:	66 90                	xchg   %ax,%ax
c0103f25:	66 90                	xchg   %ax,%ax
c0103f27:	66 90                	xchg   %ax,%ax
c0103f29:	66 90                	xchg   %ax,%ax
c0103f2b:	66 90                	xchg   %ax,%ax
c0103f2d:	66 90                	xchg   %ax,%ax
c0103f2f:	66 90                	xchg   %ax,%ax
c0103f31:	66 90                	xchg   %ax,%ax
c0103f33:	66 90                	xchg   %ax,%ax
c0103f35:	66 90                	xchg   %ax,%ax
c0103f37:	66 90                	xchg   %ax,%ax
c0103f39:	66 90                	xchg   %ax,%ax
c0103f3b:	66 90                	xchg   %ax,%ax
c0103f3d:	66 90                	xchg   %ax,%ax
c0103f3f:	66 90                	xchg   %ax,%ax
c0103f41:	66 90                	xchg   %ax,%ax
c0103f43:	66 90                	xchg   %ax,%ax
c0103f45:	66 90                	xchg   %ax,%ax
c0103f47:	66 90                	xchg   %ax,%ax
c0103f49:	66 90                	xchg   %ax,%ax
c0103f4b:	66 90                	xchg   %ax,%ax
c0103f4d:	66 90                	xchg   %ax,%ax
c0103f4f:	66 90                	xchg   %ax,%ax
c0103f51:	66 90                	xchg   %ax,%ax
c0103f53:	66 90                	xchg   %ax,%ax
c0103f55:	66 90                	xchg   %ax,%ax
c0103f57:	66 90                	xchg   %ax,%ax
c0103f59:	66 90                	xchg   %ax,%ax
c0103f5b:	66 90                	xchg   %ax,%ax
c0103f5d:	66 90                	xchg   %ax,%ax
c0103f5f:	66 90                	xchg   %ax,%ax
c0103f61:	66 90                	xchg   %ax,%ax
c0103f63:	66 90                	xchg   %ax,%ax
c0103f65:	66 90                	xchg   %ax,%ax
c0103f67:	66 90                	xchg   %ax,%ax
c0103f69:	66 90                	xchg   %ax,%ax
c0103f6b:	66 90                	xchg   %ax,%ax
c0103f6d:	66 90                	xchg   %ax,%ax
c0103f6f:	66 90                	xchg   %ax,%ax
c0103f71:	66 90                	xchg   %ax,%ax
c0103f73:	66 90                	xchg   %ax,%ax
c0103f75:	66 90                	xchg   %ax,%ax
c0103f77:	66 90                	xchg   %ax,%ax
c0103f79:	66 90                	xchg   %ax,%ax
c0103f7b:	66 90                	xchg   %ax,%ax
c0103f7d:	66 90                	xchg   %ax,%ax
c0103f7f:	66 90                	xchg   %ax,%ax
c0103f81:	66 90                	xchg   %ax,%ax
c0103f83:	66 90                	xchg   %ax,%ax
c0103f85:	66 90                	xchg   %ax,%ax
c0103f87:	66 90                	xchg   %ax,%ax
c0103f89:	66 90                	xchg   %ax,%ax
c0103f8b:	66 90                	xchg   %ax,%ax
c0103f8d:	66 90                	xchg   %ax,%ax
c0103f8f:	66 90                	xchg   %ax,%ax
c0103f91:	66 90                	xchg   %ax,%ax
c0103f93:	66 90                	xchg   %ax,%ax
c0103f95:	66 90                	xchg   %ax,%ax
c0103f97:	66 90                	xchg   %ax,%ax
c0103f99:	66 90                	xchg   %ax,%ax
c0103f9b:	66 90                	xchg   %ax,%ax
c0103f9d:	66 90                	xchg   %ax,%ax
c0103f9f:	66 90                	xchg   %ax,%ax
c0103fa1:	66 90                	xchg   %ax,%ax
c0103fa3:	66 90                	xchg   %ax,%ax
c0103fa5:	66 90                	xchg   %ax,%ax
c0103fa7:	66 90                	xchg   %ax,%ax
c0103fa9:	66 90                	xchg   %ax,%ax
c0103fab:	66 90                	xchg   %ax,%ax
c0103fad:	66 90                	xchg   %ax,%ax
c0103faf:	66 90                	xchg   %ax,%ax
c0103fb1:	66 90                	xchg   %ax,%ax
c0103fb3:	66 90                	xchg   %ax,%ax
c0103fb5:	66 90                	xchg   %ax,%ax
c0103fb7:	66 90                	xchg   %ax,%ax
c0103fb9:	66 90                	xchg   %ax,%ax
c0103fbb:	66 90                	xchg   %ax,%ax
c0103fbd:	66 90                	xchg   %ax,%ax
c0103fbf:	66 90                	xchg   %ax,%ax
c0103fc1:	66 90                	xchg   %ax,%ax
c0103fc3:	66 90                	xchg   %ax,%ax
c0103fc5:	66 90                	xchg   %ax,%ax
c0103fc7:	66 90                	xchg   %ax,%ax
c0103fc9:	66 90                	xchg   %ax,%ax
c0103fcb:	66 90                	xchg   %ax,%ax
c0103fcd:	66 90                	xchg   %ax,%ax
c0103fcf:	66 90                	xchg   %ax,%ax
c0103fd1:	66 90                	xchg   %ax,%ax
c0103fd3:	66 90                	xchg   %ax,%ax
c0103fd5:	66 90                	xchg   %ax,%ax
c0103fd7:	66 90                	xchg   %ax,%ax
c0103fd9:	66 90                	xchg   %ax,%ax
c0103fdb:	66 90                	xchg   %ax,%ax
c0103fdd:	66 90                	xchg   %ax,%ax
c0103fdf:	66 90                	xchg   %ax,%ax
c0103fe1:	66 90                	xchg   %ax,%ax
c0103fe3:	66 90                	xchg   %ax,%ax
c0103fe5:	66 90                	xchg   %ax,%ax
c0103fe7:	66 90                	xchg   %ax,%ax
c0103fe9:	66 90                	xchg   %ax,%ax
c0103feb:	66 90                	xchg   %ax,%ax
c0103fed:	66 90                	xchg   %ax,%ax
c0103fef:	66 90                	xchg   %ax,%ax
c0103ff1:	66 90                	xchg   %ax,%ax
c0103ff3:	66 90                	xchg   %ax,%ax
c0103ff5:	66 90                	xchg   %ax,%ax
c0103ff7:	66 90                	xchg   %ax,%ax
c0103ff9:	66 90                	xchg   %ax,%ax
c0103ffb:	66 90                	xchg   %ax,%ax
c0103ffd:	66 90                	xchg   %ax,%ax
c0103fff:	90                   	nop

Disassembly of section .text.__x86.get_pc_thunk.ax:

c0104000 <__x86.get_pc_thunk.ax>:
c0104000:	8b 04 24             	mov    (%esp),%eax
c0104003:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.bx:

c0104004 <__x86.get_pc_thunk.bx>:
c0104004:	8b 1c 24             	mov    (%esp),%ebx
c0104007:	c3                   	ret    
